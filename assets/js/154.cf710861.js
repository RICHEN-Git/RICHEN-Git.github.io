(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{586:function(e,t,s){"use strict";s.r(t);var n=s(19),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v("📖 "+e._s(e.$page.readingTime.text)+"    🔡 "+e._s(e.$page.readingTime.words)),s("br")])]),e._v(" "),s("h1",{attrs:{id:"git-worktree-manage-multiple-working-trees"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-worktree-manage-multiple-working-trees"}},[e._v("#")]),e._v(" 📌 git worktree - Manage multiple working trees")]),e._v(" "),s("h2",{attrs:{id:"add"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[e._v("#")]),e._v(" 🔹 add")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("p",[s("strong",[e._v("2. Usage scenario: How to work on the multiple different branches where I can switch easily between them?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 14    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/38134131",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ git worktree\ngit worktree add <second path>\n\n▲ Creating new worktree\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create new branch inside the worktree folder ")]),e._v("\ngit worktree -b <branch name> <path>\n\n▲ Removing worktree\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# do your code and once you have done ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# commit, push and now you can delete your folder")]),e._v("\nrm -rf <path>\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tell git to remove the workdir copy")]),e._v("\ngit worktree prune\n\n▲ Listing worktree\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[s("strong",[e._v("3. Usage scenario: Commit a single file to another branch")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 13    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[e._v("git cherry-pick")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/42467121",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On branch feature-x")]),e._v("\ngit add <file>\ngit commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Fixed issue #562"')]),e._v(" // Note commit-id\ngit checkout hotfix\ngit cherry-pick <commit-id>\ngit push origin hotfix\n\ngit worktree add -b hotfix ../hotfix origin/master\ncd ../hotfix/\ngit add <file>\ngit commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Fixed issue #562"')]),e._v("\ngit push origin hotfix\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br")])]),s("p",[s("strong",[e._v("4. Usage scenario: i want to work on different branches in git in my local repository which have different branches from origin set as upstream")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/59579791",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ git checkout\n▲ git worktree\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Add "another" directory for a different branch')]),e._v("\ngit worktree add <second path>/<branch name>\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### Creating new worktree")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create new branch inside the worktree folder ")]),e._v("\ngit worktree -b <branch name> <path>\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("### Removing worktree")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tell git to remove the workdir copy")]),e._v("\ngit worktree delete ...\n\n▲ Listing worktree\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[s("strong",[e._v("5. Usage scenario: Git create new branch in new folder")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[e._v("git clone")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/53225143",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("C:\\> cd \\dev\\projects\nC:\\dev\\projects> md MyAwesomeProject\nC:\\dev\\projects> cd MyAwesomeProject\nC:\\dev\\projects\\MyAwesomeProject> git clone https://github.com/user/awesome.git master\n.... snip\n\nC:\\dev\\projects\\MyAwesomeProject> cd master\nC:\\dev\\projects\\MyAwesomeProject\\master> git worktree add ..\\develop develop\nPreparing worktree (checking out "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'develop'")]),e._v(")\nHEAD is now at fca4b6c My most recent awesome commit\n\nC:\\dev\\projects\\MyAwesomeProject\\master> cd ..\nC:\\dev\\projects\\MyAwesomeProject> dir\n\n Volume in drive C is System\n Volume Serial Number is 1234-5678\n\n Directory of C:\\dev\\projects\\MyAwesomeProject\n\n02.10.2018  13.43    <DIR>          .\n02.10.2018  13.43    <DIR>          ..\n09.11.2018  10.26    <DIR>          develop\n08.11.2018  09.48    <DIR>          master\n               0 File(s)              0 bytes\n               4 Dir(s)  229 636 960 256 bytes free\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br")])]),s("p",[s("strong",[e._v("6. Usage scenario: Second checkout of the same local Git branch?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/35853600",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add <new_path>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("7. Usage scenario: How to check out history safely?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/64970419",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add ../<new dir> <sha or branch>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("8. Usage scenario: Git repo where each submodule is a branch of same repo. How to avoid double/triple... download with git clone --recursive?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/43415914",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add ../data data\ngit worktree add ../doc doc\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("strong",[e._v("9. Usage scenario: How to have a tracked file in a git repo that doesn't change from branch to branch")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-init.html"}},[e._v("git init")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[e._v("git fetch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/51575819",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ The concept\n▲ How to do it.\n▲ Step 1: Make a repo\nmkdir myRepo\ncd myRepo\ngit init\n\n▲ Step 2: Make an initial commit\ngit commit -m --allow-empty "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"initial commit"')]),e._v("\n\n▲ Step 3: Set up the worktree\nmkdir Plan\ngit worktree add --detach Plan\ncd Plan\n\n▲ Step 4: Set up the branch\ngit checkout --orphan=planning\ngit commit -m --allow-empty "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"initial commit"')]),e._v("\n\n▲ Step 5: Adding in excludes\necho "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Plan/"')]),e._v(" >> .git/info/exclude\n\n▲ Step 6 (optional): Cloning\ncd myRepo\nmkdir Plan\ngit fetch origin planning:planning\ngit worktree add Plan planning\necho "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Plan/"')]),e._v(" >> .git/info/exclude\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br")])]),s("p",[s("strong",[e._v("10. Usage scenario: Merge feature branch to master in one step")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/36856726",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("cd /path/to/local/repo\ngit worktree add ../target <target_branch>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[s("strong",[e._v("11. Usage scenario: How to create a new branch in new location as continuation from other branch")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/57654976",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add -b child_branch ./subdirectory parent_branch\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("12. Usage scenario: How do you clone all branches of a git repository into their own folders, without specifying every branch?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/64933262",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("mkdir my-tfs-style-repo\ncd my-tfs-style-repo\ngot clone url/to/remote/repo\ncd repo\ngit checkout --detach\ngit for-each-ref refs/remotes/origin --format="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'../%(refname:lstrip=3) %(refname:lstrip=3)'")]),e._v("|grep -v "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("' HEAD$'")]),e._v(" |xargs -n 2 git worktree add\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[s("strong",[e._v("13. Usage scenario: Git: move changes between branches without working directory change")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/64826741",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("worktree_dir=$(mktemp -d)\ngit worktree add "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$worktree_dir"')]),e._v(" branch-to-merge-into\ngit -C "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$worktree_dir"')]),e._v(" cherry-pick target-commit\ngit -C "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$worktree_dir"')]),e._v(" push\ngit worktree remove "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$worktree_dir"')]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[s("strong",[e._v("14. Usage scenario: How to make commits in another branch without checkout?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/59762705",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add ../auxiliary other-branch\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("15. Usage scenario: Git - How to checkout without modifying files?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/37018735",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("cd /targetdir\ngit worktree add ../master master\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("h2",{attrs:{id:"list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[e._v("#")]),e._v(" 🔹 list")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("p",[s("strong",[e._v("2. Usage scenario: same global remote gitignore file across all branches")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[e._v("git fetch")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[e._v("git rev-parse")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/53978166",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#! /bin/sh")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# git-update-ignores-across-remote-tracking-branches")]),e._v("\n\n. git-sh-setup     # get script goodies, and make sure we're at top level\n\nrequire_work_tree  # make sure we have a work-tree, too\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Where is our ignore file? (absolute path)")]),e._v("\nIFILE=$(readlink -f .gitignore) || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cannot find .gitignore file"')]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set up a temporary file; remove it on exit")]),e._v("\nTF=$(mktemp) || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"cannot create temporary file"')]),e._v("\ntrap "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rm -f $TF"')]),e._v(" 0 1 2 3 15\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Use a work-tree in ../update-ignores")]),e._v("\nif [ ! -d ../update-ignores ]; then\n    [ -e ../update-ignores ] &&\n        die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"../update-ignores exists but is not a directory"')]),e._v("\n    git worktree add ../update-ignores --detach ||\n        die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to create ../update-ignores"')]),e._v("\nelse\n    # Should use git worktree list --porcelain to verify that\n    # ../update-ignores is an added, detached work-tree, but\n    # I leave that to someone else.  It might also be good to\n    # leave remote-tracking names for other added work-trees\n    # alone, but again, that's for someone else to write.\nfi\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Find upstream of current branch, if we're on a branch and there is")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# an upstream - we won't attempt to do anything to that one, so as to")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# avoid creating headaches for the main work-tree.  Note that this")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# sets UPSTREAM="" if the rev-parse fails.')]),e._v("\nUPSTREAM=$(git rev-parse --symbolic-full-name HEAD@{u} 2>/dev/null)\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now attempt to update remote-tracking names.  Update all remotes")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# first so that we are in sync, then list all names into temporary file.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# From here on, we'll work in the update-ignores work-tree.")]),e._v("\ncd ../update-ignores\nrequire_clean_work_tree "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update ignores"')]),e._v("\ngit fetch --all || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to fetch --all"')]),e._v("\ngit for-each-ref --format="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'%(refname)'")]),e._v(" refs/remotes > $TF\nREMOTE=\nUPDATED=\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Function: push UPDATED to REMOTE.  Set REMOTE to $1 and clear UPDATED.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Does nothing if UPDATED or REMOTE are empty, so safe to use an extra time.")]),e._v("\nnew_remote() {\n    local u="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$UPDATED"')]),e._v(" r="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$REMOTE"')]),e._v("\n    if [ "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$u"')]),e._v(" != "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v(" -a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$r"')]),e._v(" != "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v(" ]; then\n        git push $r $u || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"failed to push!"')]),e._v("\n    fi\n    UPDATED=\n    REMOTE=$1\n    # [ -z "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$REMOTE"')]),e._v(" ] || git fetch $REMOTE || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to fetch from $REMOTE"')]),e._v("\n}\n\nwhile read name; do\n    # skip the upstream of the main repo\n    [ $name == "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$UPSTREAM"')]),e._v(" ] && continue\n    # Update this branch's .gitignore, and remember to push this commit.\n    # If we"),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'re switching remotes, clean out what we'")]),e._v("ve done so far.\n    shortname=${name##refs/remotes/}  # e.g., origin/master or r/feature/X\n    remote=${shortname%%/*}           # e.g., origin or r\n    branch=${shortname#remote/}       # e.g., master or feature/X\n\n    # if we're changing remotes, clear out the old one\n    [ $remote != $REMOTE ] && new_remote $remote\n\n    # switch detached HEAD to commit corresponding to remote-tracking name\n    git checkout -q $name || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to check out $name"')]),e._v("\n    # update .gitignore (but skip all this if it's correct)\n    cmp -s .gitignore $IFILE 2>/dev/null && continue\n    cp $IFILE .gitignore || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to copy $IFILE to .gitignore"')]),e._v("\n    git add .gitignore || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to add .gitignore"')]),e._v("\n    # UGH: terrible commit message below, please fix\n    git commit -q -m "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update .gitignore"')]),e._v(" || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"unable to commit"')]),e._v("\n    commit=$(git rev-parse HEAD) || die "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"failed to rev-parse HEAD"')]),e._v("\n    # remember to push this commit (by hash ID) to refs/heads/$shortname\n    # on $REMOTE (which is correct because of new_remote above)\n    UPDATED="),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$UPDATED $commit:refs/heads/$shortname"')]),e._v("\ndone < $TF\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# push any accumulated commits, or do nothing if none accumulated")]),e._v("\nnew_remote\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and we're done!")]),e._v("\nexit 0\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br"),s("span",{staticClass:"line-number"},[e._v("40")]),s("br"),s("span",{staticClass:"line-number"},[e._v("41")]),s("br"),s("span",{staticClass:"line-number"},[e._v("42")]),s("br"),s("span",{staticClass:"line-number"},[e._v("43")]),s("br"),s("span",{staticClass:"line-number"},[e._v("44")]),s("br"),s("span",{staticClass:"line-number"},[e._v("45")]),s("br"),s("span",{staticClass:"line-number"},[e._v("46")]),s("br"),s("span",{staticClass:"line-number"},[e._v("47")]),s("br"),s("span",{staticClass:"line-number"},[e._v("48")]),s("br"),s("span",{staticClass:"line-number"},[e._v("49")]),s("br"),s("span",{staticClass:"line-number"},[e._v("50")]),s("br"),s("span",{staticClass:"line-number"},[e._v("51")]),s("br"),s("span",{staticClass:"line-number"},[e._v("52")]),s("br"),s("span",{staticClass:"line-number"},[e._v("53")]),s("br"),s("span",{staticClass:"line-number"},[e._v("54")]),s("br"),s("span",{staticClass:"line-number"},[e._v("55")]),s("br"),s("span",{staticClass:"line-number"},[e._v("56")]),s("br"),s("span",{staticClass:"line-number"},[e._v("57")]),s("br"),s("span",{staticClass:"line-number"},[e._v("58")]),s("br"),s("span",{staticClass:"line-number"},[e._v("59")]),s("br"),s("span",{staticClass:"line-number"},[e._v("60")]),s("br"),s("span",{staticClass:"line-number"},[e._v("61")]),s("br"),s("span",{staticClass:"line-number"},[e._v("62")]),s("br"),s("span",{staticClass:"line-number"},[e._v("63")]),s("br"),s("span",{staticClass:"line-number"},[e._v("64")]),s("br"),s("span",{staticClass:"line-number"},[e._v("65")]),s("br"),s("span",{staticClass:"line-number"},[e._v("66")]),s("br"),s("span",{staticClass:"line-number"},[e._v("67")]),s("br"),s("span",{staticClass:"line-number"},[e._v("68")]),s("br"),s("span",{staticClass:"line-number"},[e._v("69")]),s("br"),s("span",{staticClass:"line-number"},[e._v("70")]),s("br"),s("span",{staticClass:"line-number"},[e._v("71")]),s("br"),s("span",{staticClass:"line-number"},[e._v("72")]),s("br"),s("span",{staticClass:"line-number"},[e._v("73")]),s("br"),s("span",{staticClass:"line-number"},[e._v("74")]),s("br"),s("span",{staticClass:"line-number"},[e._v("75")]),s("br"),s("span",{staticClass:"line-number"},[e._v("76")]),s("br"),s("span",{staticClass:"line-number"},[e._v("77")]),s("br"),s("span",{staticClass:"line-number"},[e._v("78")]),s("br"),s("span",{staticClass:"line-number"},[e._v("79")]),s("br"),s("span",{staticClass:"line-number"},[e._v("80")]),s("br"),s("span",{staticClass:"line-number"},[e._v("81")]),s("br"),s("span",{staticClass:"line-number"},[e._v("82")]),s("br"),s("span",{staticClass:"line-number"},[e._v("83")]),s("br"),s("span",{staticClass:"line-number"},[e._v("84")]),s("br"),s("span",{staticClass:"line-number"},[e._v("85")]),s("br"),s("span",{staticClass:"line-number"},[e._v("86")]),s("br"),s("span",{staticClass:"line-number"},[e._v("87")]),s("br")])]),s("h2",{attrs:{id:"lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#lock"}},[e._v("#")]),e._v(" 🔹 lock")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("h2",{attrs:{id:"move"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#move"}},[e._v("#")]),e._v(" 🔹 move")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("h2",{attrs:{id:"prune"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#prune"}},[e._v("#")]),e._v(" 🔹 prune")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: How to work on the multiple different branches where I can switch easily between them?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 14    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/38134131",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ git worktree\ngit worktree add <second path>\n\n▲ Creating new worktree\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# create new branch inside the worktree folder ")]),e._v("\ngit worktree -b <branch name> <path>\n\n▲ Removing worktree\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# do your code and once you have done ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# commit, push and now you can delete your folder")]),e._v("\nrm -rf <path>\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Tell git to remove the workdir copy")]),e._v("\ngit worktree prune\n\n▲ Listing worktree\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[s("strong",[e._v("2. Usage scenario: Git: copy local branch into another local directory")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/51461430",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)])],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree add -b <your-new-branch-name> <your-new-directory> <your-base-branch>\n\ngit worktree add -b temp/my-copy ../MyAnotherFolder master\n\ngit worktree prune\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"remove"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#remove"}},[e._v("#")]),e._v(" 🔹 remove")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("h2",{attrs:{id:"unlock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unlock"}},[e._v("#")]),e._v(" 🔹 unlock")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Multiple working directories with Git?")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 326    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/30185564",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("▲ Git 2.5 proposes since July 2015 a replacement for contrib/workdir/git-new-workdir: git worktree\n▲ See commit 799767cc9 (Git 2.5rc2)\n▲ Note: with git 2.7rc1 (Nov 2015) you are able to list your worktrees.\nSee commit bb9c03b, commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 92718b7, commit 5193490, commit 1ceb7f9, commit 1ceb7f9 (08 Oct 2015), commit 5193490, commit 1ceb7f9 (08 Oct 2015), commit 1ceb7f9 (08 Oct 2015), and commit ac6c561 (02 Oct 2015) by Michael Rappazzo (rappazzo).\n(Merged by Junio C Hamano -- gitster -- in commit a46dcfb, 26 Oct 2015)\n"),s("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git worktree list"),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --porcelain")])]),e._v("\n\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached\n\n▲ The new doc in git 2.8 (March 2016) will include:\n▲ Be careful when deleting a branch: before git 2.9 (June 2016), you could delete one in use in another working tree.\n▲ Similarly, before git 2.9 (June 2016), renaming a branch checked out in another worktree did not adjust the symbolic HEAD in said other worktree.\n▲ The locking mechanism is officially supported with git 2.10 (Q3 2016)\ngit worktree lock [--reason <string>] <worktree>\ngit worktree unlock <worktree>\n\n▲ Git 2.13 (Q2 2017) add a lock option in commit 507e6e9 (12 Apr 2017) by Nguyễn Thái Ngọc Duy (pclouds).\nSuggested-by: David Taylor (dt).\nHelped-by: Jeff King (peff).\n(Merged by Junio C Hamano -- gitster -- in commit e311597, 26 Apr 2017)\n▲ Git 2.17+ (Q2 2018) adds git worktree move / git worktree remove: see this answer.\n▲ Git 2.19 (Q3 2018) add a "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--quiet"')]),e._v(" option to make "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v("  less\nverbose.\n▲ Note that "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git worktree add"')]),e._v(' used to do a "find an available name with stat\nand then mkdir", which is race-prone.\nThis has been fixed with Git 2.22 (Q2 2019) by using mkdir and reacting to EEXIST in a loop.\n▲ Git 2.22 (Q2 2019) fixes the logic to tell if a Git repository has a working tree protects '),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git branch -D"')]),e._v(" from removing the branch that is currently checked\nout by mistake.\nThe implementation of this logic was broken for repositories with unusual name, which unfortunately is the norm for submodules these days.\n▲ With Git 2.29 (Q4 2020), the "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"worktree"')]),e._v(" API offers a better determination of a worktree path.\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br"),s("span",{staticClass:"line-number"},[e._v("29")]),s("br"),s("span",{staticClass:"line-number"},[e._v("30")]),s("br"),s("span",{staticClass:"line-number"},[e._v("31")]),s("br"),s("span",{staticClass:"line-number"},[e._v("32")]),s("br"),s("span",{staticClass:"line-number"},[e._v("33")]),s("br"),s("span",{staticClass:"line-number"},[e._v("34")]),s("br"),s("span",{staticClass:"line-number"},[e._v("35")]),s("br"),s("span",{staticClass:"line-number"},[e._v("36")]),s("br"),s("span",{staticClass:"line-number"},[e._v("37")]),s("br"),s("span",{staticClass:"line-number"},[e._v("38")]),s("br"),s("span",{staticClass:"line-number"},[e._v("39")]),s("br")])]),s("h2",{attrs:{id:"none"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[e._v("#")]),e._v(" 🔹None")]),e._v(" "),s("p",[s("strong",[e._v("1. Usage scenario: Debugging executables across git commits")])]),e._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-bisect.html"}},[e._v("git bisect")]),e._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/50401736",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),s("OutboundLink")],1)],1)],1)]),e._v(" "),s("p",[s("strong",[e._v("Example:")])]),e._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[e._v("git worktree\n\ngit bisect run\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);