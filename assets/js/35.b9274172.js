(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{463:function(s,t,e){"use strict";e.r(t);var n=e(19),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),e("br")])]),s._v(" "),e("h1",{attrs:{id:"git-commit-tree-create-a-new-commit-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-tree-create-a-new-commit-object"}},[s._v("#")]),s._v(" 📌 git commit-tree - Create a new commit object")]),s._v(" "),e("h2",{attrs:{id:"p"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p"}},[s._v("#")]),s._v(" 🔹 -p")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I 'overwrite', rather than 'merge', a branch on another branch in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 252    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4624383",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ You can use the "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ours'")]),s._v(" merge strategy (this links to octopus merge, you have to scroll down to next option; deeplinking to the correct section is not possible):\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout staging")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours email # Merge branches, but use our (=staging) branch head")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout email")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge staging")]),s._v("\n\n▲ I thought a bit more about this question and possible solutions. If you absolutely require the merge parents in the correct order, need to perform this action with a single command line invocation, and don't mind running plumbing commands, you can do the following:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --ff")]),s._v("-only $(git commit-tree"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Throw away branch 'A'\"")]),s._v(" -p A -p B B^{tree})\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} HEAD^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'original'")]),s._v(" | tee file1 file2 file3\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'initial commit'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch A")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch B")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),s._v(" > file1\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch A'")]),s._v(" file1\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout B")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'B'")]),s._v(" > file2\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch B'")]),s._v(" file2\n\n▲ Now, let"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s try the strategy option (doesn'")]),s._v("t really matter if we use theirs or ours for this explanation):\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -X")]),s._v(" ours A")]),s._v("\n$ cat file*\nA\nB\noriginal\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours A")]),s._v("\n$ cat file*\noriginal\nB\noriginal\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} merge-strategy^{tree} strategy-option^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n5b09d34a37a183723b409d25268c8cb4d073206e\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How do I swap the order of two parents of a Git commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/36528357",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree -p HEAD^2 -p HEAD^1 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Commit message"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD^{tree}"')]),s._v(" \n\ngit reset --hard $(git commit-tree -p HEAD^2 -p HEAD^1 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"New commit message"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD^{tree}"')]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Merging two completely different repositories")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 10    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[s._v("git rm")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/35975988",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Git's commit DAGs\n        o - o - o\n      /           \\\no - o - o - o - o - X   <-- master\n      \\\n        o - o - o       <-- topic\n\no - o - o               <-- A\n       \\\n        o - o - Y       <-- B\n\no - o - o               <-- A\n       \\\n        o - o - Y       <-- B\n\n        o - o - o\n      /           \\\no - o - o - o - o - X   <-- master\n      \\\n        o - o - o       <-- topic\n\n▲ Git "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"remotes"')]),s._v("\no - o - o               <-- A\n       \\\n        o - o - Y       <-- B\n\n        o - o - o\n      /           \\\no - o - o - o - o - X   <-- hamburger/master\n      \\\n        o - o - o       <-- hamburger/topic\n\n▲ Identifying commits for merges, and --first-parent\n▲ New commits (merges or regular) go on (local) branches\ngit checkout -b for-merge hamburger/master\n\ngit checkout -b for-merge B\n\n▲ Doing the (special) merge\ngit merge --no-commit hamburger/master\n\ngit rm -rf .    # (note: this assumes you're at the top of your work tree)\n\ngit checkout HEAD -- .  # (still assumes top of work tree)\n\no - o - o               <-- A\n       \\\n        o - o - Y       <-- B\n                 \\\n                   ----- M   <-- for-merge\n                       /\n        o - o - o     /\n      /           \\  /\no - o - o - o - o - X   <-- hamburger/master\n      \\\n        o - o - o       <-- hamburger/topic\n\n▲ Doing it all the shortcut (easy) way\ngit merge --ff-only $(git commit-tree -p HEAD -p hamburger/master "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'HEAD^{tree}'")]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Redo a merge before previous commit after pushing both the merge and commit to origin?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/57314384",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree -p 9a905c0 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Undo incorrect merge; revert to bff23af'")]),s._v(" bff23af^{tree}\n\ngit merge --ff-only 16c6ef49aa4f3ea865d76e78b5306c52b14b1f0b\n\ngit diff 16c6ef4 bff23af\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse 16c6ef4^{tree} bff23af^{tree}")]),s._v("\nd9cc608eedd5d2cc63c262272b7a0f6ab6aed5dd\nd9cc608eedd5d2cc63c262272b7a0f6ab6aed5dd\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Remove commit on now deleted files")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/52522055",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ TL;DR\n▲ Long, with experiment\n          B--C\n         /    \\\n...--o--A      M--o--...\n         \\    /\n          D--E\n\n...--o--A"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-----M'")]),s._v("-o--...\n         \\    /\n          D"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-E'")]),s._v("\n\n$ mkdir mtest\n$ cd mtest\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\nInitialized empty Git repository in ...\n$ echo test commit-tree > README\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add README")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" initial")]),s._v("\n[master (root-commit) 1db1f76] initial\n 1 file changed, 1 insertion(+)\n create mode 100644 README\n$ echo log msg | git commit-tree -p HEAD -p HEAD HEAD^{tree}\nerror: duplicate parent 1db1f76a4e7217d5198c0f178464b7a087e94078 ignored\n44f91061b7bd08c39a4dc9e8ebb1f4f7c588ea9e\n\n...--o--A"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-M'")]),s._v("-o--...\n\n    for parent in $parents; do\n            for reparent in $(map "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parent"')]),s._v("); do\n                    case "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parentstr "')]),s._v(" in\n                    *"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" -p $reparent "')]),s._v("*)\n                            ;;\n                    *)\n                            parentstr="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parentstr -p $reparent"')]),s._v("\n                            ;;\n                    esac\n            done\n    done\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: How to specify one or several parents for a commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[s._v("git write-tree")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47559129",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("tree=$(git write-tree) # write updated index to new tree\ncommit=$(git commit-tree -p $firstparent -p $secondparent -F /tmp/msgfile)\n\ngit merge --ff-only $commit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#m"}},[s._v("#")]),s._v(" 🔹 -m")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I 'overwrite', rather than 'merge', a branch on another branch in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 252    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4624383",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ You can use the "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ours'")]),s._v(" merge strategy (this links to octopus merge, you have to scroll down to next option; deeplinking to the correct section is not possible):\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout staging")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours email # Merge branches, but use our (=staging) branch head")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout email")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge staging")]),s._v("\n\n▲ I thought a bit more about this question and possible solutions. If you absolutely require the merge parents in the correct order, need to perform this action with a single command line invocation, and don't mind running plumbing commands, you can do the following:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --ff")]),s._v("-only $(git commit-tree"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Throw away branch 'A'\"")]),s._v(" -p A -p B B^{tree})\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} HEAD^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'original'")]),s._v(" | tee file1 file2 file3\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'initial commit'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch A")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch B")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),s._v(" > file1\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch A'")]),s._v(" file1\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout B")]),s._v("\n$ echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'B'")]),s._v(" > file2\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch B'")]),s._v(" file2\n\n▲ Now, let"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s try the strategy option (doesn'")]),s._v("t really matter if we use theirs or ours for this explanation):\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -X")]),s._v(" ours A")]),s._v("\n$ cat file*\nA\nB\noriginal\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours A")]),s._v("\n$ cat file*\noriginal\nB\noriginal\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} merge-strategy^{tree} strategy-option^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n5b09d34a37a183723b409d25268c8cb4d073206e\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How do I swap the order of two parents of a Git commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/36528357",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree -p HEAD^2 -p HEAD^1 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Commit message"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD^{tree}"')]),s._v(" \n\ngit reset --hard $(git commit-tree -p HEAD^2 -p HEAD^1 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"New commit message"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD^{tree}"')]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to rebase entire master branch of git repo")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-mktree.html"}},[s._v("git mktree")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/58003170",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git checkout -B feature\ngit branch -f master   $(git commit-tree -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Initial commit.'")]),s._v(" `:|git mktree`)\ngit merge -s ours --allow-unrelated-histories   master\n\ngit checkout -B feature\ngit branch -f master   $(git commit-tree -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Initial commit.'")]),s._v(" `:|git mktree`)\ngit rebase --root --onto master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Redo a merge before previous commit after pushing both the merge and commit to origin?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/57314384",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree -p 9a905c0 -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Undo incorrect merge; revert to bff23af'")]),s._v(" bff23af^{tree}\n\ngit merge --ff-only 16c6ef49aa4f3ea865d76e78b5306c52b14b1f0b\n\ngit diff 16c6ef4 bff23af\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse 16c6ef4^{tree} bff23af^{tree}")]),s._v("\nd9cc608eedd5d2cc63c262272b7a0f6ab6aed5dd\nd9cc608eedd5d2cc63c262272b7a0f6ab6aed5dd\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: synchronize git branch with master, selectively")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/17552650",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree -p gh-pages -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" master:dist \\\n| xargs git update-ref refs/heads/gh-pages\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"f"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#f"}},[s._v("#")]),s._v(" 🔹 -F")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Turn a sequence of unrelated git commits into a branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/68799360",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("prev=HEAD    # could use prev=$(git rev-parse HEAD) but no need\nnewest=$prev\nwhile read hash; do\n    git log --no-walk --format=%B $hash > /tmp/commit-msg\n    newest=$(git commit-tree -F /tmp/commitmsg -p $prev $hash^{tree})\n    prev=$newest\ndone < commitlist\n\ngit checkout -b newbranch $newest\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to create copy of a snapshot (commit) in a branch onto another branch in git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[s._v("git rm")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/28590391",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("tree=$(git rev-parse B^{tree})  # or similar to find the tree ID\ncommit=$(git commit-tree -p ... -m message $tree) # or use -F, or stdin\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout Branch_A")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rm"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -rf")]),s._v(" .                # cd to top dir first if needed")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout Branch_B -- .  # index and work tree = commit P")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Can I squash a merge commit with one of its predecessors?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/61907010",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ TL;DR\nnewcommit=$(git commit-tree -p HEAD^ -p HEAD^2^ HEAD^{tree} -F /tmp/msg)\n\n▲ Long\nA--B--C--F\n \\      /\n  D----E\n\nA--B--C--G\n \\      /\n  D----'\n\n        ___\n       /   \\\nA--B--C--F  G\n \\      /  /\n  D----E  /\n   \\_____/\n\ngit reset $newcommit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to specify one or several parents for a commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[s._v("git write-tree")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47559129",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("tree=$(git write-tree) # write updated index to new tree\ncommit=$(git commit-tree -p $firstparent -p $secondparent -F /tmp/msgfile)\n\ngit merge --ff-only $commit\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"none"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[s._v("#")]),s._v(" 🔹None")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I rebase a commit made by another author without adding myself as the committer?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 31    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/5520650",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git filter-branch --commit-filter "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'export GIT_COMMITTER_NAME="$GIT_AUTHOR_NAME"; export GIT_COMMITTER_EMAIL="$GIT_AUTHOR_EMAIL"; export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"; git commit-tree "$@"\'')]),s._v(" -- basecommit..HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Remove commits before specific commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 29    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[s._v("git write-tree")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[s._v("git gc")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3063486",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git checkout -b oldroot X\nTREE=`git write-tree`\nCOMMIT=`echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Killed history"')]),s._v(" | git commit-tree "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TREE"')]),s._v("`\ngit checkout -b newroot "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$COMMIT"')]),s._v("\ngit rebase --onto newroot oldroot master\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# repeat for other branches than master that should use the new initial commit")]),s._v("\ngit checkout master\ngit branch -D oldroot\ngit branch -D newroot\ngit gc # WARNING: if everything's done right, this will actually delete your history from the repo!\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to get the tree hash of the index in git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/58674006",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Can I checkout a tree object in git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/17605087",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git commit-tree <<treeid>>\n<<type a commit message>>\n^D\n<<this will produce a hash for the new commit object>>\ngit branch newbranch <<newcommithash>>\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How to split a git repository into recent and older commits at a specific commit point, preserving branches?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/48396032",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ First create a branch for the historical commits\ngit branch history $TRUNCPOINT\ngit push project-history history:master\ngit push project-history A\n\ngit log --graph --oneline --decorate --all\n* fdc8f84 (A) branchA a1\n| * 7237a3e (HEAD -> master) fourth\n| * 55be55d third\n|/  \n* 26555d8 second\n* 5a68ca2 first\n\n▲ Create a base commit to serve as the parent for the recent commits\nMESSAGE="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Get history from historical repository"')]),s._v("\nBASECOMMIT=`echo $MESSAGE | git commit-tree ${TRUNCPARENT}^{tree}`\n\n▲ Split the repository by grafting the TRUNCPARENT onto BASECOMMIT\necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${TRUNCPOINT} ${BASECOMMIT}"')]),s._v(" > .git/info/grafts\ngit filter-branch -- --all\ngit push project-recent master\ngit push project-recent B\n\ngit log --graph --oneline --decorate --all\n* 2335aeb (B) branchB b2\n* 2bb7ea3 branchB b1\n| * 83c3ae9 (HEAD -> master) sixth\n|/  \n* 25931c5 fifth\n* 1e1e201 fourth\n* a7f3373 Get history from historical repository\n\n▲ Fully reproduced example bash script\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nWORKDIR=${PWD}\n\ncreate_repos () {\n    rm -rf repo-split-example repo-split-recent repo-split-history\n    # Create the repo to be split\n    example_repo\n\n    # Create the repo to contain the historical commits\n    HISTREPO="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"file://${WORKDIR}/repo-split-history"')]),s._v("\n    mkdir ../repo-split-history\n    cd ../repo-split-history/\n    git init --bare\n    cd ../repo-split-example\n    git remote add project-history $HISTREPO\n\n    # Create the repo to contain the recent commits\n    RECEREPO="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"file://${WORKDIR}/repo-split-recent"')]),s._v("\n    mkdir ../repo-split-recent\n    cd ../repo-split-recent/\n    git init --bare\n    cd ../repo-split-example\n    git remote add project-recent $RECEREPO\n}\n\nexample_repo () {\n    # Part I: set up a test repo with our example commits\n    mkdir repo-split-example\n    cd repo-split-example/\n    git init\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"We want to split the repository into project-recent and project-history portions, following the instructions at https://git-scm.com/book/en/v2/Git-Tools-Replace., but also including branches."')]),s._v(" > README.md\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v("\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first"')]),s._v("\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Second commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"second"')]),s._v("\n\n    git checkout -b A HEAD\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch A change."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchA a1"')]),s._v("\n\n    git checkout master\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Third commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"third"')]),s._v("\n    TRUNCPARENT=`git rev-parse HEAD`\n\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Fourth commit."')]),s._v(" >> README.md \n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fourth"')]),s._v("\n    TRUNCPOINT=`git rev-parse HEAD`\n\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Fifth commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fifth"')]),s._v("\n    FIFTH=`git rev-parse HEAD`\n\n    git checkout -b B HEAD\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch B change. b1"')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchB b1"')]),s._v("\n    B1=`git rev-parse HEAD`\n\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch B change. b2"')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchB b2"')]),s._v("\n    B2=`git rev-parse HEAD`\n\n    git checkout master\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sixth commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sixth"')]),s._v("\n\n    # Now we have a repo with the requisite structure, ready to be split\n    git log --graph --all --oneline --decorate\n}\n\n\nsplit_repo () {\n    # Part II: Split the git repo into historical and current halves at $TRUNCPOINT\n    # Following guidelines at https://git-scm.com/book/en/v2/Git-Tools-Replace\n\n    # First create a branch for the historical commits\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Branching history at $TRUNCPOINT"')]),s._v("\n    git branch history $TRUNCPOINT\n    git log --graph --oneline --decorate history A\n\n    # Now copy the history repo to the remote HISTREPO repository\n    git push project-history history:master\n    git push project-history A\n\n    # Now to split the repo to get the recent history from TRUNCPOINT to HEAD of master\n    # Create a base commit for the new new recent history\n    MESSAGE="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Get history from historical repository at $HISTREPO"')]),s._v("\n    BASECOMMIT=`echo $MESSAGE | git commit-tree ${TRUNCPARENT}^{tree}`\n\n    # Split the repository by grafting the TRUNCPARENT onto BASECOMMIT\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${TRUNCPOINT} ${BASECOMMIT}"')]),s._v(" > .git/info/grafts\n    git filter-branch -- --all\n\n    # Finally, push the current rewritten master and associated branches to a new repository\n    git push project-recent master\n    git push project-recent B\n}\n\ncreate_repos\nsplit_repo \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br"),e("span",{staticClass:"line-number"},[s._v("90")]),e("br"),e("span",{staticClass:"line-number"},[s._v("91")]),e("br"),e("span",{staticClass:"line-number"},[s._v("92")]),e("br"),e("span",{staticClass:"line-number"},[s._v("93")]),e("br"),e("span",{staticClass:"line-number"},[s._v("94")]),e("br"),e("span",{staticClass:"line-number"},[s._v("95")]),e("br"),e("span",{staticClass:"line-number"},[s._v("96")]),e("br"),e("span",{staticClass:"line-number"},[s._v("97")]),e("br"),e("span",{staticClass:"line-number"},[s._v("98")]),e("br"),e("span",{staticClass:"line-number"},[s._v("99")]),e("br"),e("span",{staticClass:"line-number"},[s._v("100")]),e("br"),e("span",{staticClass:"line-number"},[s._v("101")]),e("br"),e("span",{staticClass:"line-number"},[s._v("102")]),e("br"),e("span",{staticClass:"line-number"},[s._v("103")]),e("br"),e("span",{staticClass:"line-number"},[s._v("104")]),e("br"),e("span",{staticClass:"line-number"},[s._v("105")]),e("br"),e("span",{staticClass:"line-number"},[s._v("106")]),e("br"),e("span",{staticClass:"line-number"},[s._v("107")]),e("br"),e("span",{staticClass:"line-number"},[s._v("108")]),e("br"),e("span",{staticClass:"line-number"},[s._v("109")]),e("br"),e("span",{staticClass:"line-number"},[s._v("110")]),e("br"),e("span",{staticClass:"line-number"},[s._v("111")]),e("br"),e("span",{staticClass:"line-number"},[s._v("112")]),e("br"),e("span",{staticClass:"line-number"},[s._v("113")]),e("br"),e("span",{staticClass:"line-number"},[s._v("114")]),e("br"),e("span",{staticClass:"line-number"},[s._v("115")]),e("br"),e("span",{staticClass:"line-number"},[s._v("116")]),e("br"),e("span",{staticClass:"line-number"},[s._v("117")]),e("br"),e("span",{staticClass:"line-number"},[s._v("118")]),e("br"),e("span",{staticClass:"line-number"},[s._v("119")]),e("br"),e("span",{staticClass:"line-number"},[s._v("120")]),e("br"),e("span",{staticClass:"line-number"},[s._v("121")]),e("br"),e("span",{staticClass:"line-number"},[s._v("122")]),e("br"),e("span",{staticClass:"line-number"},[s._v("123")]),e("br"),e("span",{staticClass:"line-number"},[s._v("124")]),e("br"),e("span",{staticClass:"line-number"},[s._v("125")]),e("br"),e("span",{staticClass:"line-number"},[s._v("126")]),e("br"),e("span",{staticClass:"line-number"},[s._v("127")]),e("br"),e("span",{staticClass:"line-number"},[s._v("128")]),e("br"),e("span",{staticClass:"line-number"},[s._v("129")]),e("br"),e("span",{staticClass:"line-number"},[s._v("130")]),e("br"),e("span",{staticClass:"line-number"},[s._v("131")]),e("br"),e("span",{staticClass:"line-number"},[s._v("132")]),e("br"),e("span",{staticClass:"line-number"},[s._v("133")]),e("br"),e("span",{staticClass:"line-number"},[s._v("134")]),e("br"),e("span",{staticClass:"line-number"},[s._v("135")]),e("br"),e("span",{staticClass:"line-number"},[s._v("136")]),e("br"),e("span",{staticClass:"line-number"},[s._v("137")]),e("br"),e("span",{staticClass:"line-number"},[s._v("138")]),e("br"),e("span",{staticClass:"line-number"},[s._v("139")]),e("br"),e("span",{staticClass:"line-number"},[s._v("140")]),e("br"),e("span",{staticClass:"line-number"},[s._v("141")]),e("br"),e("span",{staticClass:"line-number"},[s._v("142")]),e("br"),e("span",{staticClass:"line-number"},[s._v("143")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Git: How to forget very old commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[s._v("git reflog")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[s._v("git gc")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/35921186",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /usr/bin/env perl")]),s._v("\n\nuse strict;\nuse warnings;\n\nmy $MAX_AGE = 30;\nmy $BRANCH  = "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(";\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# assumes linear history")]),s._v("\nmy($new_start,$rebase) = `git log --reverse --since="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$MAX_AGE days ago"')]),s._v(" --format=%H`;\ndie "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: failed to determine new root commit"')]),s._v("\n  unless defined($new_start) && $? == 0;\n\nchomp $new_start;\n\nmy $new_base = `echo Forget old commits | git commit-tree "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$new_start^{tree}"')]),s._v("`;\ndie "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: failed to orphan $new_start"')]),s._v(" unless $? == 0;\nchomp $new_base;\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# don't assume multiple commits more recent than $MAX_AGE")]),s._v("\nif (defined $rebase) {\n  system("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rebase --onto $new_base $new_start HEAD"')]),s._v(") == 0\n    or die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: git rebase failed"')]),s._v(";\n}\n\nsystem("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git branch -f $BRANCH HEAD"')]),s._v(") == 0\n  or die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: failed to move $BRANCH"')]),s._v(";\n\nsystem("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git reflog expire --expire=now --all && git gc --prune=now"')]),s._v(") == 0\n  or die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: cleanup failed"')]),s._v(";\n\ngit log --graph --decorate --pretty=oneline --abbrev-commit\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash -xe")]),s._v("\n\nMAX_AGE=${MAX_AGE:-30}\nBRANCH=${BRANCH:-master}\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# assumes linear history")]),s._v("\n{\n  read new_start\n  read rebase\n} < <(git log --reverse --since="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$MAX_AGE days ago"')]),s._v(" --format=%H)\n[ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$new_start"')]),s._v(" ]  # assertion\n\nread new_base < <(\n  echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Forget old commits"')]),s._v(" | git commit-tree "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$new_start^{tree}"')]),s._v("\n)\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# don't assume multiple commits more recent than $MAX_AGE")]),s._v("\n[ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$rebase"')]),s._v(" ] && git rebase --onto $new_base $new_start HEAD\n\ngit branch -f "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$BRANCH"')]),s._v(" HEAD\n\ngit reflog expire --expire=now --all\ngit gc --prune=now\n\ngit checkout "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$BRANCH"')]),s._v("  # avoid ending on "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"no branch"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: git edit authors name in commit range, script")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/19229925",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v('A=$(git rev-parse $3) || exit 1\nB=$(git rev-parse $4) || exit 1\ngit filter-branch --commit-filter "\n    if git merge-base --is-ancestor \\$GIT_COMMIT $B &&\n       ! git merge-base --is-ancestor \\$GIT_COMMIT $A^; then\n\n'),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\ncase $# in\n4) ;;\n*) echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"usage: $0 oldauthor newauthor firstrev lastrev"')]),s._v(' >&2; exit 1;;\nesac\n\nAuthorExpression=$1\nAuthorReplace=$2\nA=$(git rev-parse --verify $3^{commit}) || exit 1\nB=$(git rev-parse --verify $4^{commit}) || exit 1\n\ngit filter-branch --commit-filter "\n    if git merge-base --is-ancestor \\$GIT_COMMIT $B &&\n       ! git merge-base --is-ancestor \\$GIT_COMMIT $A^; then\n       if [ \\"\\$GIT_AUTHOR_NAME\\" = '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$AuthorExpression'")]),s._v(" ]; then\n       GIT_AUTHOR_NAME="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$AuthorReplace'")]),s._v("\n       fi\n    fi\ngit commit-tree \\"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\$@\\""')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);