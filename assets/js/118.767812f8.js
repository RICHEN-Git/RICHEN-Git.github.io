(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{547:function(s,t,e){"use strict";e.r(t);var n=e(19),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),e("br")])]),s._v(" "),e("h1",{attrs:{id:"git-rev-list-lists-commit-objects-in-reverse-chronological-order"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-rev-list-lists-commit-objects-in-reverse-chronological-order"}},[s._v("#")]),s._v(" 📌 git rev-list - Lists commit objects in reverse chronological order")]),s._v(" "),e("h2",{attrs:{id:"n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#n"}},[s._v("#")]),s._v(" 🔹 -n")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to tell which commit a tag points to in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 426    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[s._v("git tag")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1862542",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 $TAG")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git tagcommit $TAG")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 tags/$TAG")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How can I get the parents of a merge commit in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 193    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9059633",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Simple git log <hash> called for a merge commit shows abbreviated hashes of its parents:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v(" $ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -1")]),s._v(" 395f65d")]),s._v("\n commit 395f65d438b13fb1fded88a330dc06c3b0951046\n Merge: 9901923 d28790d\n ...\n\n▲ If all you want is just the hashes, the two equivalent choices are:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --pretty")]),s._v("=%P"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git show"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --pretty")]),s._v("=%P <commit>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --parents")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n\n▲ If you want to examine the parents, you can refer to them directly with carats as <commit>^1 and <commit>^2, e.g.:\ngit show <commit>^1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Referencing the child of a commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 18    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1762012",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nREV=$1\n\nif [[ -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV"')]),s._v(" ]]; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Usage: git-get-child  []"')]),s._v("\n    exit\nfi\n\nHASH=$(git rev-parse $REV)\n\nNUM=$2\n\nif [[ -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$NUM"')]),s._v(" ]]; then\n    NUM=1\nfi\n\ngit rev-list --all --parents | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" $HASH"')]),s._v(" | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${NUM}s/\\([^ ]*\\) .*$/\\\\1/p"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to merge head commits from another branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1358351",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git checkout working-branch\n<do some work>\ngit commit\ngit checkout master\ngit merge working-branch\ngit checkout second-branch\ngit merge working-branch\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# take two arguments:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. other branch to put commits on")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. number of commits to cherry-pick from master    ")]),s._v("\n\nif ! git checkout $1; then\n    exit\nfi\ngit rev-list --reverse -n $2 master |\nwhile read commit; do\n    if ! git cherry-pick $commit; then\n        exit\n    fi\ndone\n\ngit branch master-copy master\ngit rebase --onto <branch> master~5 master\ngit checkout <branch>\ngit merge master-copy\ngit branch -d master-copy\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How to find latest non-merge commit message in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/22247643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --no-merges -n 1 HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: prevent "),e("code",[s._v("git")]),s._v(" from pushing commits with given commit message")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/42049904",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check for foo commit")]),s._v("\n        commit=`git rev-list -n 1 --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^foo'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$range"')]),s._v("`\n        if [ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" ]\n        then\necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"ERROR: git pre-push hook found commit message starting with 'foo' in $local_ref\"")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: How to prevent git commit if specific phrase in changes is detected?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/32867139",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list\n\ngit diff $remote_sha $local_sha\n\ngit diff $remote_sha $local_sha|grep -E "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\+.*(fdescribe|fit)'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# An example hook script to verify what is about to be pushed.  Called by "git')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# push" after it has checked the remote status, but before anything has been')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pushed.  If this script exits with a non-zero status nothing will be pushed.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This hook is called with the following parameters:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $1 -- Name of the remote to which the push is being done")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $2 -- URL to which the push is being done")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If pushing without using a named remote those arguments will be equal.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Information about the commits which are being pushed is supplied as lines to")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the standard input in the form:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   <local ref> <local sha1> <remote ref> <remote sha1>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This sample shows how to prevent push of commits where the log message starts")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# with "WIP" (work in progress).')]),s._v("\n\nremote="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\nurl="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v("\n\nz40=0000000000000000000000000000000000000000\n\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n    if [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v(" = $z40 ]\n    then\n        # Handle delete\n        :\n    else\n        if [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$remote_sha"')]),s._v(" = $z40 ]\n        then\n            # New branch, examine all commits\n            range="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v("\n        else\n            # Update to existing branch, examine new commits\n            range="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$remote_sha..$local_sha"')]),s._v("\n        fi\n\n        # Check for WIP commit\n        commit=`git rev-list -n 1 --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^WIP'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$range"')]),s._v("`\n        if [ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" ]\n        then\n            echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Found WIP commit in $local_ref, not pushing"')]),s._v("\n            exit 1\n        fi\n    fi\ndone\n\nexit 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: How to grab a specific SHA from the git log output")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7519863",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("sha1=$(git rev-list --before "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Feb 01 2011"')]),s._v(" -n 1 HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("9. Usage scenario: How to find out the parent commit of new GIT branch in pre-recive hook?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13223263",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --boundary <new-commit> --not --all | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^-//p'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"max-count"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#max-count"}},[s._v("#")]),s._v(" 🔹 --max-count")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Print commit message of a given commit in git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 400    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3357357",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=%B"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=%B"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --max")]),s._v("-count=1 <commit>")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to clone the latest stable branch to a dir via github?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-describe.html"}},[s._v("git describe")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/26723343",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git clone git://github.com/WordPress/WordPress.git .\ngit checkout $(git describe --tags $(git rev-list --tags --max-count=1))\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: how to get sha hash of previous version, git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/12563274",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --tags --max-count=2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"skip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#skip"}},[s._v("#")]),s._v(" 🔹 --skip")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to get previous tag in git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-describe.html"}},[s._v("git describe")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/28818420",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v(" git describe --abbrev=0 --tags `git rev-list --tags --skip=1  --max-count=1`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#since"}},[s._v("#")]),s._v(" 🔹 --since")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Get difference in lines of code between 2 commits by date Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/31424594",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git diff <firstcommit>..<secondcommit> --shortstat\n\ngit rev-list --since="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jan 1 2014"')]),s._v(" --reverse origin/master | head -1\ngit rev-list --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dec 31 2014"')]),s._v(" -n 1 origin/master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"after"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#after"}},[s._v("#")]),s._v(" 🔹 --after")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git, find out which files have had the most commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 47    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/5670168",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2'")]),s._v(" | sort -k2 | uniq -cf1 | sort -rn | head\n\n   1058 fffcba193374a85fd6a3490f800c6901218a950b src\n    715 ffffe0f08798e95b66cc4ad4ff22cf10734d045e src/lib\n    450 ffcfe596031a5985664e35937fff4ac9ff38dcca src/zfs-fuse\n    367 ffc5d5340f95360fc9f7b739c5593dd3f92fced0 src/lib/libzpool\n    202 ff92db000792044d45eec21c57a3cd21618631e7 src/lib/libsolkerncompat\n    183 ff1a44edae3fd121ddd86864b589e5ab2f9ff99b src/lib/libzfscommon\n    178 fec6b3a789e578983c2242b3aa5adf217cb8b887 src/lib/libzfs\n    168 ffeefc9e81222d7c471bdb0911d8b98f23cff050 src/cmd\n    167 fbd60bd3430765863648c52db7ceb3ffa15d5e50 src/lib/libzfscommon/include\n    155 ff225f6b41f9557d683079c5f9276f497bcb06bd src/lib/libzfscommon/include/sys\n\n▲ E.g. if you wanted to see only file blobs:\ngit rev-list --objects --all | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2'")]),s._v(" | sort -k2 | uniq -cf1 | sort -rn |\n    while read frequency sample file\n    do \n       [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blob"')]),s._v(" == "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git cat-file -t $sample)"')]),s._v(" ] && echo -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$frequency\\t$file"')]),s._v(";\n    done\n\n135 src/zfs-fuse/zfs_operations.c\n84  src/zfs-fuse/zfs_ioctl.c\n79  src/zfs-fuse/zfs_vnops.c\n73  src/lib/libzfs/libzfs_dataset.c\n67  src/lib/libzpool/spa.c\n66  src/zfs-fuse/zfs_vfsops.c\n62  src/cmd/zdb/zdb.c\n62  CHANGES\n60  src/cmd/ztest/ztest.c\n60  src/lib/libzpool/arc.c\n\n▲ You wanted to see only specifc range of revisions\ngit rev-list --after=2011-01-01 --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'two weeks ago'")]),s._v(" \\\n     tag1...remote/hotfix ^master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h2",{attrs:{id:"until"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#until"}},[s._v("#")]),s._v(" 🔹 --until")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git, find out which files have had the most commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 47    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/5670168",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2'")]),s._v(" | sort -k2 | uniq -cf1 | sort -rn | head\n\n   1058 fffcba193374a85fd6a3490f800c6901218a950b src\n    715 ffffe0f08798e95b66cc4ad4ff22cf10734d045e src/lib\n    450 ffcfe596031a5985664e35937fff4ac9ff38dcca src/zfs-fuse\n    367 ffc5d5340f95360fc9f7b739c5593dd3f92fced0 src/lib/libzpool\n    202 ff92db000792044d45eec21c57a3cd21618631e7 src/lib/libsolkerncompat\n    183 ff1a44edae3fd121ddd86864b589e5ab2f9ff99b src/lib/libzfscommon\n    178 fec6b3a789e578983c2242b3aa5adf217cb8b887 src/lib/libzfs\n    168 ffeefc9e81222d7c471bdb0911d8b98f23cff050 src/cmd\n    167 fbd60bd3430765863648c52db7ceb3ffa15d5e50 src/lib/libzfscommon/include\n    155 ff225f6b41f9557d683079c5f9276f497bcb06bd src/lib/libzfscommon/include/sys\n\n▲ E.g. if you wanted to see only file blobs:\ngit rev-list --objects --all | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'$2'")]),s._v(" | sort -k2 | uniq -cf1 | sort -rn |\n    while read frequency sample file\n    do \n       [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"blob"')]),s._v(" == "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git cat-file -t $sample)"')]),s._v(" ] && echo -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$frequency\\t$file"')]),s._v(";\n    done\n\n135 src/zfs-fuse/zfs_operations.c\n84  src/zfs-fuse/zfs_ioctl.c\n79  src/zfs-fuse/zfs_vnops.c\n73  src/lib/libzfs/libzfs_dataset.c\n67  src/lib/libzpool/spa.c\n66  src/zfs-fuse/zfs_vfsops.c\n62  src/cmd/zdb/zdb.c\n62  CHANGES\n60  src/cmd/ztest/ztest.c\n60  src/lib/libzpool/arc.c\n\n▲ You wanted to see only specifc range of revisions\ngit rev-list --after=2011-01-01 --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'two weeks ago'")]),s._v(" \\\n     tag1...remote/hotfix ^master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Get list of files committed on git branch in last month from remote")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/33314748",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list -n1 --first-parent --until=<a date string> <a ref>\ngit rev-list -n1 --first-parent --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1 month ago"')]),s._v(" HEAD\n\ngit diff --stat $(git rev-list -n1 --first-parent --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.month.ago"')]),s._v(" HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"before"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#before"}},[s._v("#")]),s._v(" 🔹 --before")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Log commits added to master in last 24 hours")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/33166107",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --no-merges "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^<24-hour-old-commit>'")]),s._v(" HEAD\n\ngit rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD\n\ngit rev-list --no-merges HEAD \\\n             --not $(git rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to grab a specific SHA from the git log output")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7519863",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("sha1=$(git rev-list --before "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Feb 01 2011"')]),s._v(" -n 1 HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How do I checkout the snapshot of the master branch from git at a given date/time?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/25480890",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("...-A--C---E   <-- master\n   /      /\n...--B---D     <-- develop\n\n▲ using --first-parent\n...-o--K---M   <-- branch\n     \\    /\n      --L-     <-- origin/branch\n\n...-o--K---M   <-- branch, origin/branch\n     \\    /\n      --L-\n\n▲ using --not ...\ngit for-each-ref --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads | grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^master$'")]),s._v("\n\ngit rev-list --before=... -n 1 master --not $(git for-each-ref \\\n  --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads | grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^master$'")]),s._v(")\n\n...--o--o--o---o--o   <-- branch\n      \\       /\n       o--o--o\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("h2",{attrs:{id:"author"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#author"}},[s._v("#")]),s._v(" 🔹 --author")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I search for a string that someone changed with git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34056151",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --author=Doe HEAD |\nwhile read rev; do\n    if git show -p $rev | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"PATTERN"')]),s._v(" >/dev/null; then\n        echo $rev\n    fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to cherry-pick all commits made by author?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/66553096",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git cherry-pick `git rev-list --reverse --author="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"AUTHORYOUWANT"')]),s._v("  BRANCHYOUWANT | tr "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"grep"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grep"}},[s._v("#")]),s._v(" 🔹 --grep")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: prevent "),e("code",[s._v("git")]),s._v(" from pushing commits with given commit message")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/42049904",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check for foo commit")]),s._v("\n        commit=`git rev-list -n 1 --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^foo'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$range"')]),s._v("`\n        if [ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" ]\n        then\necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"ERROR: git pre-push hook found commit message starting with 'foo' in $local_ref\"")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to prevent git commit if specific phrase in changes is detected?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/32867139",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list\n\ngit diff $remote_sha $local_sha\n\ngit diff $remote_sha $local_sha|grep -E "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\+.*(fdescribe|fit)'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# An example hook script to verify what is about to be pushed.  Called by "git')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# push" after it has checked the remote status, but before anything has been')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pushed.  If this script exits with a non-zero status nothing will be pushed.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This hook is called with the following parameters:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $1 -- Name of the remote to which the push is being done")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $2 -- URL to which the push is being done")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If pushing without using a named remote those arguments will be equal.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Information about the commits which are being pushed is supplied as lines to")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the standard input in the form:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   <local ref> <local sha1> <remote ref> <remote sha1>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This sample shows how to prevent push of commits where the log message starts")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# with "WIP" (work in progress).')]),s._v("\n\nremote="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\nurl="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v("\n\nz40=0000000000000000000000000000000000000000\n\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n    if [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v(" = $z40 ]\n    then\n        # Handle delete\n        :\n    else\n        if [ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$remote_sha"')]),s._v(" = $z40 ]\n        then\n            # New branch, examine all commits\n            range="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v("\n        else\n            # Update to existing branch, examine new commits\n            range="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$remote_sha..$local_sha"')]),s._v("\n        fi\n\n        # Check for WIP commit\n        commit=`git rev-list -n 1 --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^WIP'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$range"')]),s._v("`\n        if [ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" ]\n        then\n            echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Found WIP commit in $local_ref, not pushing"')]),s._v("\n            exit 1\n        fi\n    fi\ndone\n\nexit 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: git: identify all commits not complying with a pattern")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/30801888",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" --not $(git rev-list --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\[core\\]'")]),s._v(")\n\ngit rev-list -E --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\[core\\].+'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" > core.list\ngit rev-list "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" | grep -Fxvf core.list\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"e"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#e"}},[s._v("#")]),s._v(" 🔹 -E")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: git: identify all commits not complying with a pattern")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/30801888",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" --not $(git rev-list --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\[core\\]'")]),s._v(")\n\ngit rev-list -E --grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\[core\\].+'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" > core.list\ngit rev-list "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch1...branch2"')]),s._v(" | grep -Fxvf core.list\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"f"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#f"}},[s._v("#")]),s._v(" 🔹 -F")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: List Git commits between a and b, considering only first parents of b AND only first parents of a")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/62944407",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --first-parent a > lista.txt\ngit rev-list --first-parent b > listb.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use grep, use '-f' to read patterns from 'lista.txt',")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use '-v' to say \"exclude these patterns\"")]),s._v("\ncat listb.txt | grep -v -f lista.txt\n\ngit rev-list --first-parent b | grep -v -f <(git rev-list --first-parent a)\n\ngit rev-list --first-parent b | grep -v -F -f <(git rev-list --first-parent a)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Search in all the versions of a file of git repo")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-grep.html"}},[s._v("git grep")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/52296948",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("grep-all = !"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"f() { git rev-list --all | xargs git grep \\"$@\\"; }; f"')]),s._v("\n\ngit rev-list --all | xargs -I% git --no-pager grep -F -e str % -- fileA\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"merges"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merges"}},[s._v("#")]),s._v(" 🔹 --merges")]),s._v(" "),e("p",[e("strong",[s._v('1. Usage scenario: How to find merge commits in history done using "git merge -s ours" option?')])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/48505643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ TL;DR (but untested)\ngit rev-list --merges HEAD |\nwhile read rev; do\n    thistree=$(git rev-parse $rev^{tree})\n    p1tree=$(git rev-parse $rev^1^{tree})\n    if [ $thistree = $p1tree ]; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit $rev has the effect of -s ours"')]),s._v("\n    fi\ndone\n\n▲ Long\ngit rev-list --merges HEAD\n\nwhile read rev; do ...; done\n\ngit rev-parse $rev^{tree}\n\nthistree=$(git rev-parse $rev^{tree})\n\np1tree=$(git rev-parse $rev^1^{tree})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Identify merge into master")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/39151692",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --oneline --merges -1  [<rev range>]\n\ngit merge-base --is-ancestor <commit> <commit>\n\nfor merge in $(git rev-list --reverse --first-parent --merges "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${commit}"')]),s._v("..master)\ndo if git merge-base --is-ancestor "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${commit}"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${merge}"')]),s._v("\n   then git show -s "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${merge}"')]),s._v("\n        break\n   fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Search pull requests / merges by commit message and cherry-pick all corresponding commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/66077966",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nfirst_log="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-list --reverse --merges"')]),s._v("\nfor feature in $@ \ndo\n    first_log+="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" --grep=\\"^Merge ${feature}\\""')]),s._v(" \ndone\n\nfor cmt in $(eval "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$first_log master"')]),s._v(")\ndo\n    git log --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%h: %s"')]),s._v(" --reverse ${cmt}^2 ^${cmt}^1\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to figure out a working copy contains a subtree?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/16008387",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# To separate the rev-list by newlines")]),s._v("\nIFS=$"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This rev list will return the hash and the parents, separated by spaces,")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of any merge commit found in the history of HEAD")]),s._v("\nfor hashes in $(git rev-list --merges --parents HEAD); do\n\n    # To split the commits by space\n    IFS=$"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("\n    hashList=($hashes)\n\n    # Merge base will find the most recent commit shared by all the\n    # given commits, output dumped just to not clutter\n    git merge-base ${hashList[1]} ${hashList[2]} > /dev/null\n\n    # We care only if such commit did not exist, which means each parent is\n    # in its own separate tree\n    if [[ $? != 0 ]]; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Subtree merge: ${hashList[0]}"')]),s._v("\n    fi\ndone\nunset IFS\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How can I find all the commits that have more than one parent in a Git repository?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/15638139",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v(" git rev-list --merges\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"no-merges"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#no-merges"}},[s._v("#")]),s._v(" 🔹 --no-merges")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Count the number of commits on a Git branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 442    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/11657647",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count HEAD\n\ngit rev-list --count <branch-name>\n\ngit rev-list --count HEAD ^<branch-name>\n\n▲ Examples\ngit checkout master\ngit checkout -b test\n<We do 3 commits>\ngit rev-list --count HEAD ^master\n\ngit checkout develop\ngit checkout -b test\n<We do 3 commits>\ngit rev-list --count HEAD ^develop\n\n▲ Ignoring Merges\ngit rev-list --no-merges --count HEAD ^develop\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to find all unmerged commits in master grouped by the branches they were created in?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-name-rev.html"}},[s._v("git name-rev")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/15768236",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git branch --no-merged master\n\ngit rev-list branch1 --not master --no-merges\n\ngit name-rev --name-only revisionHash1\n\ngit rev-list --all --not master --no-merges | xargs -L1 git name-rev | grep -oE "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[0-9a-f]{40}\\s[^\\~\\^]*'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to find latest non-merge commit message in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/22247643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --no-merges -n 1 HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Log commits added to master in last 24 hours")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/33166107",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --no-merges "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^<24-hour-old-commit>'")]),s._v(" HEAD\n\ngit rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD\n\ngit rev-list --no-merges HEAD \\\n             --not $(git rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Is rebase whole branch on top of master is the same as cherry picking every commit from rebased branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47757449",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --cherry-pick --right-only --no-merges upstream...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"min-parents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#min-parents"}},[s._v("#")]),s._v(" 🔹 --min-parents")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I find empty git commits?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/26691249",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("for sha in $(git rev-list --min-parents=1 --max-parents=1 --all)\ndo\n   if [ $(git rev-parse ${sha}^{tree}) == $(git rev-parse ${sha}^1^{tree} ) ]\n   then\n       echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${sha} will be pruned"')]),s._v("\n   fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Git - poor merge permanently ignores files changes in sub branches")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/35511043",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v(" isChangeInBaseChanges() {\n  for element in ${baseChanges[@]}; do \n    if [ $element == $change ]\n then \n return 1\nfi \n  done\n  return 0\n} \n\nrevopts=`git rev-parse --revs-only $*`\n\nif ! [[ $revopts ]] \nthen\n  revopts="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--all"')]),s._v("\nfi\n\nexitCode=0\n\nfor merge in `git rev-list --min-parents=2 $revopts`; do\n  mergeChanges=`git log -m -1 --name-only --pretty="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"format:"')]),s._v(" $merge | sort -u`\n  mergeBase=`git merge-base $merge^ $merge^2`  \n  baseChanges=`git diff --name-only $merge $mergeBase`\n\n  lostFiles=()\n  for change in ${mergeChanges[@]}; do\n     isChangeInBaseChanges\nif [ $? -ne 1 ]\nthen\n  lostFiles+=($change)\nfi \n  done\n\n  if [ ${#lostFiles[@]} -ne 0 ]\n  then\n    exitCode=1\n    echo -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Possible botched merge at "')]),s._v("\necho  $merge\necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"files with lost changes are: "')]),s._v("\nfor lostFile in ${lostFiles[@]}; do\n echo $lostFile\ndone\necho --------------------------------------------\n  fi\n\ndone\n\nexit $exitCode\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br")])]),e("h2",{attrs:{id:"max-parents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#max-parents"}},[s._v("#")]),s._v(" 🔹 --max-parents")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to reference the initial commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 165    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1007545",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --max")]),s._v("-parents=0 HEAD")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --parents")]),s._v(" HEAD | egrep ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^[a-f0-9]{40}$"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How can I find empty git commits?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/26691249",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("for sha in $(git rev-list --min-parents=1 --max-parents=1 --all)\ndo\n   if [ $(git rev-parse ${sha}^{tree}) == $(git rev-parse ${sha}^1^{tree} ) ]\n   then\n       echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${sha} will be pruned"')]),s._v("\n   fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Make Git repo public without revealing past commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 10    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/39337293",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git checkout <your_commit_hash>\n\ngit reset <intial_commit_hash_here> --soft\n\ngit commit --amend -m"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My new initial commit"')]),s._v("\n\ngit push <your_remote> master\n\ngit rev-list --max-parents=0 HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to view the number of DAGs in a Git Repository and the branches associated with each DAG?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/62251393",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all --max-parents=0\n\ngit log --all --ancestry-path ^$root --pretty=%D --simplify-by-decoration\n\nroots=`git rev-list --all --max-parents=0`\nfor root in $roots; do\n        git log --all --ancestry-path ^$root --pretty=%D \\\n        | awk 1 RS="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n+|, | -> '")]),s._v(" >tips-$root\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v('5. Usage scenario: How can I "splice" two (or more) completely unrelated linear branch ancestries into a new one?')])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/25930104",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("A---B------C--D [branch1]\n\n  X---Y--Z [branch2]\n\n▲ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Splicing"')]),s._v(" two unrelated branches\n▲ Generalization to more than two branches\nA ----- o ---- o [branch1]\n\n   o ----- o ---- o -- o [branch2]\n\n...\n\n o ----- o - o [branchn]\n\ngit rev-list --reverse --max-parents=0 --all\n\ngit branch -r --contains `git rev-list --reverse --max-parents=0 --all | head -1`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Get commit hash of first commit in git repository")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/61904279",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --max")]),s._v("-parents=0 HEAD")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: total original lines of code from entire git repository history")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/61220669",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git diff --shortstat $(git rev-list --max-parents=0 HEAD) @\n\ngit diff --numstat $(git rev-list --max-parents=0 HEAD) @\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"first-parent"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#first-parent"}},[s._v("#")]),s._v(" 🔹 --first-parent")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Verify if a tag was done in the master branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/49675667",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("if test $(git rev-parse master) = $(git rev-parse $tag^{commit}); then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master and $tag both identify the same commit"')]),s._v("\nelse\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master and $tag identify two different commits"')]),s._v("\nfi\n\ntagged_commit=$(git rev-parse $tag^{commit}) ||\n    fatal "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tag $tag does not exist or does not point to a commit object"')]),s._v("\nfound=false\nfor hash in $(git rev-list --first-parent master); do\n    test $hash == $tagged_commit && found=true\ndone\n\nif git rev-list --first-parent master | grep $tagged_commit >/dev/null; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$tag points to a commit reachable via first-parent from master"')]),s._v("\nelse\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$tag does not point to a commit reachable via first-parent from master"')]),s._v("\nfi\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to get commit where merged branch forked from")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/30563070",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("[alias]\n    oldest-ancestor = !bash -c "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'diff -u <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | sed -ne \\"s/^ //p\\" | head -1\'')]),s._v(" -\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: List Git commits between a and b, considering only first parents of b AND only first parents of a")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/62944407",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --first-parent a > lista.txt\ngit rev-list --first-parent b > listb.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use grep, use '-f' to read patterns from 'lista.txt',")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# use '-v' to say \"exclude these patterns\"")]),s._v("\ncat listb.txt | grep -v -f lista.txt\n\ngit rev-list --first-parent b | grep -v -f <(git rev-list --first-parent a)\n\ngit rev-list --first-parent b | grep -v -F -f <(git rev-list --first-parent a)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to detect a branch point in git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/12973656",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("diff --new-line-format=%L --old-line-format= --unchanged-line-format= \\\n    <(git rev-list --first-parent master) \\\n    <(git rev-list --first-parent feature/new-branch)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Log commits added to master in last 24 hours")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/33166107",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --no-merges "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^<24-hour-old-commit>'")]),s._v(" HEAD\n\ngit rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD\n\ngit rev-list --no-merges HEAD \\\n             --not $(git rev-list -n1 --before="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"24 hours"')]),s._v(" --first-parent HEAD)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Git find last merge from Branch A to B")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/65663989",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# two lines and a temp file :")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1. list the hashes of 'first-parent' commits from branch 'dev' :")]),s._v("\ngit rev-list --first-parent dev > /tmp/dev.log.txt\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2. in the parents of branch 'c2', look for the first line which matches a")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    first-parent of 'dev'")]),s._v("\ngit rev-list c2 | grep -f /tmp/dev.log.txt | head -1\n\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# one liner ('<(...)' works in bash and zsh) :")]),s._v("\ngit rev-list c2 | grep -f <(git rev-list --first-parent dev) | head -1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: How to programmatically find last commit before a Git merge")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/69006336",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path C..master\n\ngit rev-list --first-parent C..master\n\ngit rev-list --first-parent C..master \\\n| grep -vm1 -f <(git rev-list --ancestry-path C..master)\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --first")]),s._v("-parent :/first..| grep"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -vm1")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -f")]),s._v(" <(git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --ancestry")]),s._v("-path :/first..)")]),s._v("\ne7c863d79e8918ca947fc602ebb06266374c10e6\n$ lgdo\n*   a9546a2 (HEAD -> master, origin/master, origin/HEAD) merge from topic back to master\n|\\  \n| *   648ca35 (origin/topic) merging master onto topic\n| |\\  \n| * | 132ee2a first commit on topic branch\n* | | e7c863d commit on master after master was merged to topic\n| |/  \n|/|   \n* | 37ad159 post-branch commit on master\n|/  \n* 6aafd7f second commit on master before branching\n* 4112403 initial commit on master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: Identify merge into master")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/39151692",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --oneline --merges -1  [<rev range>]\n\ngit merge-base --is-ancestor <commit> <commit>\n\nfor merge in $(git rev-list --reverse --first-parent --merges "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${commit}"')]),s._v("..master)\ndo if git merge-base --is-ancestor "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${commit}"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${merge}"')]),s._v("\n   then git show -s "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${merge}"')]),s._v("\n        break\n   fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("h2",{attrs:{id:"not"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#not"}},[s._v("#")]),s._v(" 🔹 --not")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to find the nearest parent of a Git branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 382    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3162929",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("pushedrev=...\nbasename=develop\nif ! baserev="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_children_of_base="$(\n  git rev-list --pretty=tformat:%P '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -F "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v('\n)"\ncase '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('",$parents_of_children_of_base"')]),s._v(" in\n    ,)     echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n           exit 1 ;;\n    ,*\\ *) echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must not merge tip of '$basename' (rebase instead)\"")]),s._v("\n           exit 1 ;;\n    ,*)    exit 0 ;;\nesac\n\npushedrev=...\nbasename=develop\nif ! baserev="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_commits_beyond_base="$(\n  git rev-list --pretty=tformat:%P '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^commit '")]),s._v('\n)"\ncase '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parents_of_commits_beyond_base"')]),s._v(" in\n    *\\ *)          echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"must not push merge commits (rebase instead)"')]),s._v("\n                   exit 1 ;;\n    *"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v("*)  exit 0 ;;\n    *)             echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n                   exit 1 ;;\nesac\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to find all unmerged commits in master grouped by the branches they were created in?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-name-rev.html"}},[s._v("git name-rev")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/15768236",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git branch --no-merged master\n\ngit rev-list branch1 --not master --no-merges\n\ngit name-rev --name-only revisionHash1\n\ngit rev-list --all --not master --no-merges | xargs -L1 git name-rev | grep -oE "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[0-9a-f]{40}\\s[^\\~\\^]*'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Show commits made on branch originally (filter out merged commits)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/27901551",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ TL;DR: you want --first-parent (see git rev-list documentation) and a few other selection criteria.\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --detach")]),s._v(" B")]),s._v("\n[message about "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"detached head"')]),s._v("]\n[edit some file here, and git add result]\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" message")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -f")]),s._v(" B HEAD")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout B")]),s._v("\n\n... <- C5 <- C6 <- C7   <-- B1, B2\n\n... --X--*------*-o---o-----*--*   <-- master\n       \\       /   \\       /  /\n        A--B--C--D--E--F--G--H     <-- feature\n\n... --X---Y---*-----*-o---o---------*--*   <-- master\n       \\   \\ /     /   \\           /  /\n        \\   Z     /     \\         /  /\n         \\       /       \\       /  /\n          A--B--C--D------E--F--G--H       <-- feature\n\ngit rev-list --first-parent feature --not master --no-merges\n\n▲ Putting this together with git log\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to find out the parent commit of new GIT branch in pre-recive hook?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13223263",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --boundary <new-commit> --not --all | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^-//p'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"all"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[s._v("#")]),s._v(" 🔹 --all")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I get the Git commit count?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1341    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4061706",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count <revision>\n\ngit rev-list --all --count\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Using Git, how could I search for a string across all branches?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 211    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-grep.html"}},[s._v("git grep")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7151411",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"string/regexp"')]),s._v(" $(git rev-list --all)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to find/identify large commits in git history?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 172    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-verify-pack.html"}},[s._v("git verify-pack")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/10622293",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#set -x ")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Shows you the largest objects in your repo's pack file.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Written for osx.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# @see https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# @author Antony Stubbs")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set the internal field separator to line break, so that we can iterate easily over the verify-pack output")]),s._v("\nIFS=$"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),s._v(";\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# list all objects including their size, sort by size, take top 10")]),s._v("\nobjects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`\n \necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"All sizes are in kB\'s. The pack column is the size of the object, compressed, inside the pack file."')]),s._v("\n \noutput="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"size,pack,SHA,location"')]),s._v("\nallObjects=`git rev-list --all --objects`\nfor y in $objects\ndo\n    # extract the size in bytes\n    size=$((`echo $y | cut -f 5 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`/1024))\n    # extract the compressed size in bytes\n    compressedSize=$((`echo $y | cut -f 6 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`/1024))\n    # extract the SHA\n    sha=`echo $y | cut -f 1 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`\n    # find the objects location in the repository tree\n    other=`echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${allObjects}"')]),s._v(" | grep $sha`\n    #lineBreak=`echo -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v("`\n    output="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${output}\\n${size},${compressedSize},${other}"')]),s._v("\ndone\n \necho -e $output | column -t -s "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("', '")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to find the N largest files in a git repository?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 69    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46085465",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all \\\n| git cat-file --batch-check="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(objecttype) %(objectname) %(objectsize) %(rest)'")]),s._v(" \\\n| sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^blob //p'")]),s._v(" \\\n| sort --numeric-sort --key=2 \\\n| tail -n 10 \\\n| cut -c 1-12,41- \\\n| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Find commits that modify file names matching a pattern in a GIT repository")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 54    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6490484",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --all -- "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.wmv'")]),s._v("\n\ngit rev-list --all -- "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.wmv'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Retrieve the list of child commits of a specific commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 27    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/14247783",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all --not $COMMIT^@ --children | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^$COMMIT"')]),s._v("\n\nchildren = "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!f() { git rev-list --all --not $1^@ --children | grep $(git rev-parse $1); }; f"')]),s._v(" # reachable children of a ref\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: How to find all unmerged commits in master grouped by the branches they were created in?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-name-rev.html"}},[s._v("git name-rev")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/15768236",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git branch --no-merged master\n\ngit rev-list branch1 --not master --no-merges\n\ngit name-rev --name-only revisionHash1\n\ngit rev-list --all --not master --no-merges | xargs -L1 git name-rev | grep -oE "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[0-9a-f]{40}\\s[^\\~\\^]*'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: GIT: determine revision based on a file")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 16    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-hash-object.html"}},[s._v("git hash-object")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7387905",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git hash-object foo.c\n\nfor c in $(git rev-list --all)\ndo\n   ( git ls-tree -r $c | grep f414f31 ) && echo Found the blob in commit: $c\ndone\n\ngit branch -a --contains 1a2b3c4d\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("9. Usage scenario: Repository with submodules after rewriting history of submodule")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/37894462",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all \\\n  | while read commit\n do\n ...\n\ncd parent/repo\ncd asubmodule\ngit fetch\n\ncd parent/repo/asubmodule\ngit checkout <new SHA1>\ncd ..\ngit add .\ngit commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Record new SHA1 for asubmodule"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[e("strong",[s._v("10. Usage scenario: Git: How to treat commit so that versions of a file exist in their entirety (not just as diffs)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9166751",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all\n\n▲ Background\n▲ Data Integrity\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("11. Usage scenario: Find all the direct descendants of a given commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/27962018",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all --parents | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^.\\{40\\}.*<PARENT_SHA1>.*"')]),s._v(" | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("12. Usage scenario: Find Git Revision of a Working Directory Missing the .git Directory")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7779979",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/env python")]),s._v("\nimport subprocess\nimport shlex\nimport sys\nimport os\nimport operator\n\ngitdir,workdir=map(os.path.realpath,sys.argv[1:3])\nos.chdir(gitdir)\nproc=subprocess.Popen(shlex.split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rev-list --all'")]),s._v("),stdout=subprocess.PIPE)\nshas,err=proc.communicate()\nshas=shas.split()\nhead=shas[0]\ndata={}\nfor sha1 in shas:\n    subprocess.Popen(shlex.split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git checkout {s}'")]),s._v(".format(s=sha1)),\n                          stderr=open("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/dev/null'")]),s._v(")).wait()\n    proc=subprocess.Popen(shlex.split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'diff {g} {w}'")]),s._v(".format(g=gitdir,w=workdir)),\n                          stdout=subprocess.PIPE)\n    out,err=proc.communicate()\n    distance=len(out)\n    data[sha1]=distance\nanswer=min(data.items(),key=operator.itemgetter(1))[0]\nprint("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'closest match: {s}'")]),s._v(".format(s=answer))\nsubprocess.Popen(shlex.split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git checkout {h}'")]),s._v(".format(h=head)),\n                 stderr=open("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/dev/null'")]),s._v(")).wait()\n\n% rsync -a gitdir/ workdir/\n% cd workdir\n% git checkout HEAD~10\nHEAD is now at b9fcebf... fix foo\n\n% cd ..\n% /bin/rm -rf workdir/.git\n% find_closest_sha1.py gitdir workdir\nclosest match: b9fcebfb170785c19390ebb4a9076d11350ade79\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br")])]),e("p",[e("strong",[s._v("13. Usage scenario: How to find out the parent commit of new GIT branch in pre-recive hook?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13223263",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --boundary <new-commit> --not --all | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^-//p'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("14. Usage scenario: How do I count the number of commits made in to all repos hosted by gitosis on my server")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6713762",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("ls /path/to/repos/ | xargs -I % git --git-dir=/path/to/repos/%/.git rev-list --all 2>/dev/null | wc -l\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("15. Usage scenario: How can I reduce the size of my git repo?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-verify-pack.html"}},[s._v("git verify-pack")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[s._v("git rm")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[s._v("git gc")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34327110",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all | sort -k 2 > allfileshas.txt\n\ngit gc && git verify-pack -v .git/objects/pack/pack-*.idx | egrep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^\\w+ blob\\W+[0-9]+ [0-9]+ [0-9]+$"')]),s._v(" | sort -k 3 -n -r > bigobjects.txt\n\ngit filter-branch --prune-empty --index-filter "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rm -rf --cached --ignore-unmatch MY-BIG-DIRECTORY-OR-FILE'")]),s._v(" --tag-name-filter cat -- --all\n\ngit clone --no-hardlinks file:///Users/yourUser/your/full/repo/path repo-clone-name\n\ngit push --force\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("16. Usage scenario: How can I tell the depth of a git repository?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/38582912",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count --all\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"branches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[s._v("#")]),s._v(" 🔹 --branches")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git checkout to a commit 2 commits before hash")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41024496",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path ^1234567 --branches\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Find commit hash from individual files checked out locally")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/64548714",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --branches |\nwhile read commit; do\n    h=$(git rev-parse --quiet --verify $commit:db/db.go) || continue\n    if [ $h == be45a7eae65803df2dc31e23db7eb27bcffa17cc ]; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db/db.go hash matched in commit $commit"')]),s._v("\n    fi\ndone\n\n$ time git rev-list --tags --no-walk | while read commit; do h=$(git rev-parse --quiet --verify $commit:levenshtein.c) || continue; test $h = d2632690d5107b53ee8a7ac4832cd85eb8c7bfc1 && echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"found in $commit"')]),s._v("; done | wc -l\n     181\n\nreal    0m7.810s\nuser    0m2.449s\nsys     0m3.434s\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h2",{attrs:{id:"tags"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tags"}},[s._v("#")]),s._v(" 🔹 --tags")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How does one "),e("code",[s._v("git log")]),s._v(" tagged commits only?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/21570658",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --no-walk --tags\n\ngit rev-list --tags --no-walk > /tmp/all-tags\ngit rev-list master > /tmp/all-master\n\n(git rev-list --tags --no-walk; git rev-list master) | sort | uniq -d\n\ngit log --no-walk $(comm -12 /tmp/all-tags /tmp/all-master)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to clone the latest stable branch to a dir via github?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-describe.html"}},[s._v("git describe")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/26723343",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git clone git://github.com/WordPress/WordPress.git .\ngit checkout $(git describe --tags $(git rev-list --tags --max-count=1))\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: how to get sha hash of previous version, git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/12563274",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --tags --max-count=2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"remotes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#remotes"}},[s._v("#")]),s._v(" 🔹 --remotes")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git: list all commits on all remote branches?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 40    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7149811",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --remotes\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"glob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#glob"}},[s._v("#")]),s._v(" 🔹 --glob")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to prevent a Git object from getting garbage collected?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/52705667",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("next=$((`git rev-list --no-walk --count --glob=refs/snap/pull/137/head-v*`+1))\ngit update-ref refs/snap/pull/137/head-v$next refs/pull/137/head\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("h2",{attrs:{id:"stdin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[s._v("#")]),s._v(" 🔹 --stdin")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Cherry pick set of commits from other branch skipping empty commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/40988114",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse something-begin..something-end . | git cherry-pick --stdin\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"quiet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quiet"}},[s._v("#")]),s._v(" 🔹 --quiet")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Find commit hash from individual files checked out locally")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/64548714",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --branches |\nwhile read commit; do\n    h=$(git rev-parse --quiet --verify $commit:db/db.go) || continue\n    if [ $h == be45a7eae65803df2dc31e23db7eb27bcffa17cc ]; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"db/db.go hash matched in commit $commit"')]),s._v("\n    fi\ndone\n\n$ time git rev-list --tags --no-walk | while read commit; do h=$(git rev-parse --quiet --verify $commit:levenshtein.c) || continue; test $h = d2632690d5107b53ee8a7ac4832cd85eb8c7bfc1 && echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"found in $commit"')]),s._v("; done | wc -l\n     181\n\nreal    0m7.810s\nuser    0m2.449s\nsys     0m3.434s\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("h2",{attrs:{id:"cherry-mark"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cherry-mark"}},[s._v("#")]),s._v(" 🔹 --cherry-mark")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git log list commits excluding cherry-picked from the first branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/56298556",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --left-right --cherry-mark --abbrev-commit release2...release1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to remove duplicate commits in a rebase-fashion")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/51851109",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Cherry-mark\ngit rev-list --cherry-mark --left-right A...B\n\n...--o--*--1--2--3   <-- A\n         \\\n          4--5--6   <-- B\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --left")]),s._v("-right A...B")]),s._v("\n<3...\n<2...\n<1...\n>6...\n>5...\n>4...\n\n▲ Equality is determined by git patch-id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"cherry-pick"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick"}},[s._v("#")]),s._v(" 🔹 --cherry-pick")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Is rebase whole branch on top of master is the same as cherry picking every commit from rebased branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47757449",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --cherry-pick --right-only --no-merges upstream...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"left-only"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#left-only"}},[s._v("#")]),s._v(" 🔹 --left-only")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: List branches which have been merged by rebase")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/61400098",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("trimcommit() {\n    git cat-file -p $1 | sed -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1,/^$/{/^committer /d;/^parent /d;}'")]),s._v("\n}\ncommiteq() {\n    trimcommit $1 > /tmp/1\n    trimcommit $2 > /tmp/2\n    cmp -s /tmp/1 /tmp/2\n}\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# clean up on exit")]),s._v("\ntrap "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rm -f /tmp/left /tmp/right /tmp/1 /tmp/2"')]),s._v(" 0 1 2 3 15\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Obtain hash IDs on left (mainline) and right (feature) sides.")]),s._v("\ngit rev-list --reverse --topo-order --left-only M...F > /tmp/left\ngit rev-list --reverse --topo-order --right-only M...F > /tmp/right\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Make sure both sides are nonempty, otherwise we can't really do anything.")]),s._v("\nif [ ! -s /tmp/left -a ! -s /tmp/right ]; then\n    echo cannot help you - check your inputs\n    exit 2  # signaling failure to test\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Open the two files for input, and grab the first hash ID from each.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The reads should succeed because the files are nonempty.")]),s._v("\nexec 3< /tmp/left 4< /tmp/right\nread l <&3\nread r <&4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Look for a mainline commit that matches the topmost feature commit.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This is our starting point to decide whether F is "almost merged" into M.')]),s._v("\nwhile ! commiteq $l $r; do\n    # Drop the top-most left-side commit by reading another.\n    if ! read l <&3; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not almost-merged: right-side commits are missing"')]),s._v("\n        exit 1\n    fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("h2",{attrs:{id:"right-only"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#right-only"}},[s._v("#")]),s._v(" 🔹 --right-only")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Is rebase whole branch on top of master is the same as cherry picking every commit from rebased branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47757449",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --cherry-pick --right-only --no-merges upstream...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: List branches which have been merged by rebase")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/61400098",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("trimcommit() {\n    git cat-file -p $1 | sed -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1,/^$/{/^committer /d;/^parent /d;}'")]),s._v("\n}\ncommiteq() {\n    trimcommit $1 > /tmp/1\n    trimcommit $2 > /tmp/2\n    cmp -s /tmp/1 /tmp/2\n}\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# clean up on exit")]),s._v("\ntrap "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rm -f /tmp/left /tmp/right /tmp/1 /tmp/2"')]),s._v(" 0 1 2 3 15\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Obtain hash IDs on left (mainline) and right (feature) sides.")]),s._v("\ngit rev-list --reverse --topo-order --left-only M...F > /tmp/left\ngit rev-list --reverse --topo-order --right-only M...F > /tmp/right\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Make sure both sides are nonempty, otherwise we can't really do anything.")]),s._v("\nif [ ! -s /tmp/left -a ! -s /tmp/right ]; then\n    echo cannot help you - check your inputs\n    exit 2  # signaling failure to test\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Open the two files for input, and grab the first hash ID from each.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The reads should succeed because the files are nonempty.")]),s._v("\nexec 3< /tmp/left 4< /tmp/right\nread l <&3\nread r <&4\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Look for a mainline commit that matches the topmost feature commit.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This is our starting point to decide whether F is "almost merged" into M.')]),s._v("\nwhile ! commiteq $l $r; do\n    # Drop the top-most left-side commit by reading another.\n    if ! read l <&3; then\n        echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"not almost-merged: right-side commits are missing"')]),s._v("\n        exit 1\n    fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])]),e("h2",{attrs:{id:"cherry"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cherry"}},[s._v("#")]),s._v(" 🔹 --cherry")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git log list commits excluding cherry-picked from the first branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/56298556",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --left-right --cherry-mark --abbrev-commit release2...release1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Is rebase whole branch on top of master is the same as cherry picking every commit from rebased branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/47757449",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --cherry-pick --right-only --no-merges upstream...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to remove duplicate commits in a rebase-fashion")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/51851109",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Cherry-mark\ngit rev-list --cherry-mark --left-right A...B\n\n...--o--*--1--2--3   <-- A\n         \\\n          4--5--6   <-- B\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --left")]),s._v("-right A...B")]),s._v("\n<3...\n<2...\n<1...\n>6...\n>5...\n>4...\n\n▲ Equality is determined by git patch-id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"g"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#g"}},[s._v("#")]),s._v(" 🔹 -g")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Find and extract file from Git stash")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13692875",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --walk-reflogs stash # (long option)\ngit rev-list -g stash # (short option)\n\nfor sha in $(git rev-list -g stash); \ndo \n     git ls-tree -r $sha:; \ndone |\n   grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$SOMEFILENAME"')]),s._v(" | \n   sort --unique\n\n$ for sha in $(git rev-list -g stash); do git ls-tree -r $sha:; done | grep numeric.js | sort -u\n100644 blob f1c9a61910ae1bbd562615444a45688b93e9d808    LSPO.Web/DaVinci/JScript/numeric.js\n\nkompare numeric.js <(git cat-file -p f1c9a61910ae1bbd562615444a45688b93e9d808)\n\ngit diff stash@{3} -- numeric.js \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Git: get all blobs with pattern")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-fsck.html"}},[s._v("git fsck")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/37199329",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("{\n    git rev-list --objects --all --grep="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text"')]),s._v("\n    git rev-list --objects -g --no-walk --all --grep="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text"')]),s._v("\n    git rev-list --objects --no-walk --grep="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"text"')]),s._v(" \\\n        $(git fsck --unreachable |\n          grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^unreachable commit'")]),s._v(" |\n          cut -d"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" -f3)\n} | sort | uniq\n\ngit log --reflog -Stext\n\ngit log --reflog --grep=pattern\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("h2",{attrs:{id:"walk-reflogs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#walk-reflogs"}},[s._v("#")]),s._v(" 🔹 --walk-reflogs")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Find and extract file from Git stash")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13692875",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --walk-reflogs stash # (long option)\ngit rev-list -g stash # (short option)\n\nfor sha in $(git rev-list -g stash); \ndo \n     git ls-tree -r $sha:; \ndone |\n   grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$SOMEFILENAME"')]),s._v(" | \n   sort --unique\n\n$ for sha in $(git rev-list -g stash); do git ls-tree -r $sha:; done | grep numeric.js | sort -u\n100644 blob f1c9a61910ae1bbd562615444a45688b93e9d808    LSPO.Web/DaVinci/JScript/numeric.js\n\nkompare numeric.js <(git cat-file -p f1c9a61910ae1bbd562615444a45688b93e9d808)\n\ngit diff stash@{3} -- numeric.js \n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("h2",{attrs:{id:"boundary"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boundary"}},[s._v("#")]),s._v(" 🔹 --boundary")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: git: programmatically know by how much the branch is ahead/behind a remote branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/gitk.html"}},[s._v("gitk")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/2970101",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list @{u}..\ngit rev-list --left-right --boundary @{u}...\ngitk @{u}...\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# work out the current branch name")]),s._v("\ncurrentbranch=$(expr $(git symbolic-ref HEAD) : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/\\(.*\\)'")]),s._v(")\n[ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$currentbranch"')]),s._v(" ] || die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You don\'t seem to be on a branch"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# look up this branch in the configuration")]),s._v("\nremote=$(git config branch.$currentbranch.remote)\nremote_ref=$(git config branch.$currentbranch.merge)\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# convert the remote ref into the tracking ref... this is a hack")]),s._v("\nremote_branch=$(expr $remote_ref : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/\\(.*\\)'")]),s._v(")\ntracking_branch=refs/remotes/$remote/$remote_branch\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now $tracking_branch should be the local ref tracking HEAD")]),s._v("\ngit rev-list $tracking_branch..HEAD\n\ngit rev-list HEAD --not --remotes\n\ngit rev-list --left-right $tracking_branch...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: In git, how can I find the revision at which a branch was created?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6059774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" -B1 |\n    head -1 |\n    cut -c2-\n\ngit rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" |\n    head -1 |\n    cut -c2-\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Pull only latest commits to shallow clone")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46057596",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("...--o--*--o--o   <-- yourbranch (HEAD)\n         \\\n          o--o--o   <-- other\n\n...--o--*--o--...--o   <-- yours (HEAD)\n         \\\n          \\      o--o--o\n           \\    /       \\\n            o--o         o--o   <-- other\n                \\       /\n                 o-----o\n\n▲ Where to do this counting\ngit push $remote HEAD:for-blitz-count-trick\n\nbase=$(git merge-base for-blitz-count-trick other)\ngit rev-list --count --ancestry-path $base^@..for-blitz-count-trick\ngit rev-list --count --ancestry-path $base^@..other\n\ngit rev-list --count --left-right --boundary for-blitz-count-trick...other\n\n▲ If that's impossible (or even just too annoying)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to find out the parent commit of new GIT branch in pre-recive hook?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13223263",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --boundary <new-commit> --not --all | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^-//p'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"full-history"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#full-history"}},[s._v("#")]),s._v(" 🔹 --full-history")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I count the number of git commits affecting a given subtree?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/2026690",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --full-history v0.1.. -- src | wc -l\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"ancestry-path"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ancestry-path"}},[s._v("#")]),s._v(" 🔹 --ancestry-path")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git checkout to a commit 2 commits before hash")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41024496",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path ^1234567 --branches\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to programmatically find last commit before a Git merge")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/69006336",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path C..master\n\ngit rev-list --first-parent C..master\n\ngit rev-list --first-parent C..master \\\n| grep -vm1 -f <(git rev-list --ancestry-path C..master)\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --first")]),s._v("-parent :/first..| grep"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -vm1")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -f")]),s._v(" <(git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --ancestry")]),s._v("-path :/first..)")]),s._v("\ne7c863d79e8918ca947fc602ebb06266374c10e6\n$ lgdo\n*   a9546a2 (HEAD -> master, origin/master, origin/HEAD) merge from topic back to master\n|\\  \n| *   648ca35 (origin/topic) merging master onto topic\n| |\\  \n| * | 132ee2a first commit on topic branch\n* | | e7c863d commit on master after master was merged to topic\n| |/  \n|/|   \n* | 37ad159 post-branch commit on master\n|/  \n* 6aafd7f second commit on master before branching\n* 4112403 initial commit on master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How do I query if a commit lies between two known commits?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/39135029",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path A..B\n\n▲ Discussion\n     o--o--o--o\n    /\no--o--o---o--o--o\n    \\    /       \\\n     o--o         o\n                 /\no--o--o         o\n\n     o--o--o--o\n    /\no--o--o---o--B--o\n    \\    /       \\\n     o--o         o\n                 /\nA--o--o         o\n\n     o--o--B--o\n    /\no--o--o---o--A--o\n    \\    /       \\\n     o--o         o\n                 /\n                o\n\n     *--*--B--o\n    /\no--o--o---o--A--o\n    \\    /       \\\n     o--o         o\n                 /\n                o\n\n     o--o--o--o\n    /\no--B--o---o--A--o\n    \\    /       \\\n     o--o         o\n                 /\n                o\n\n     o--o--o--o\n    /\no--A--*---*--B--o\n    \\    /       \\\n     *--*         o\n                 /\n                o\n\ngit rev-list A..B    # or: git log --format=%H A..B\n\n     o--o--o--o\n    /\no--o--A---*--B--o\n    \\    /       \\\n     *--*         o\n                 /\n                o\n\ngit rev-list --ancestry-path A..B\n\n     o--o--o--o\n    /\no--o--A---*--B--o\n    \\    /       \\\n     o--o         o\n                 /\n                o\n\n▲ Using git merge-base --is-ancestor\nif git-merge-base is-ancestor $C $B && git merge-base is-ancestor $A $C; then\n    ... $C is "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"between"')]),s._v(" $A and $B\nfi\n\n▲ Corner cases to beware of: #1\n...--A--o--o--B--...\n      \\      /\n       o----o\n\ngit rev-list --ancestry-path ^A B^@\n\n▲ Corner cases to beware of: #2\n          o-----o\n         /       \\\n...--o--A--o--o--B\n      \\   / \\    /\n       o-o---o--o\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br"),e("span",{staticClass:"line-number"},[s._v("57")]),e("br"),e("span",{staticClass:"line-number"},[s._v("58")]),e("br"),e("span",{staticClass:"line-number"},[s._v("59")]),e("br"),e("span",{staticClass:"line-number"},[s._v("60")]),e("br"),e("span",{staticClass:"line-number"},[s._v("61")]),e("br"),e("span",{staticClass:"line-number"},[s._v("62")]),e("br"),e("span",{staticClass:"line-number"},[s._v("63")]),e("br"),e("span",{staticClass:"line-number"},[s._v("64")]),e("br"),e("span",{staticClass:"line-number"},[s._v("65")]),e("br"),e("span",{staticClass:"line-number"},[s._v("66")]),e("br"),e("span",{staticClass:"line-number"},[s._v("67")]),e("br"),e("span",{staticClass:"line-number"},[s._v("68")]),e("br"),e("span",{staticClass:"line-number"},[s._v("69")]),e("br"),e("span",{staticClass:"line-number"},[s._v("70")]),e("br"),e("span",{staticClass:"line-number"},[s._v("71")]),e("br"),e("span",{staticClass:"line-number"},[s._v("72")]),e("br"),e("span",{staticClass:"line-number"},[s._v("73")]),e("br"),e("span",{staticClass:"line-number"},[s._v("74")]),e("br"),e("span",{staticClass:"line-number"},[s._v("75")]),e("br"),e("span",{staticClass:"line-number"},[s._v("76")]),e("br"),e("span",{staticClass:"line-number"},[s._v("77")]),e("br"),e("span",{staticClass:"line-number"},[s._v("78")]),e("br"),e("span",{staticClass:"line-number"},[s._v("79")]),e("br"),e("span",{staticClass:"line-number"},[s._v("80")]),e("br"),e("span",{staticClass:"line-number"},[s._v("81")]),e("br"),e("span",{staticClass:"line-number"},[s._v("82")]),e("br"),e("span",{staticClass:"line-number"},[s._v("83")]),e("br"),e("span",{staticClass:"line-number"},[s._v("84")]),e("br"),e("span",{staticClass:"line-number"},[s._v("85")]),e("br"),e("span",{staticClass:"line-number"},[s._v("86")]),e("br"),e("span",{staticClass:"line-number"},[s._v("87")]),e("br"),e("span",{staticClass:"line-number"},[s._v("88")]),e("br"),e("span",{staticClass:"line-number"},[s._v("89")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: List of all commits between 2 commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/54992168",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --ancestry-path A..B\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How to find merged branch a commit came from?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/24442239",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("merges-introducing() {\n    local introducing;\n    if introducing=`git rev-parse $1`; then \n        shift\n        git rev-list --ancestry-path --parents --reverse ^$introducing ${@-HEAD} \\\n        | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{seen[$1]=1} NR>1 && !seen[$2] {print $1}'")]),s._v(" \\\n        | xargs git show --oneline --no-patch\n     fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"date-order"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date-order"}},[s._v("#")]),s._v(" 🔹 --date-order")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Apply a command to all commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9140237",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\n\nwhile read co dt ; do\n    git checkout $co > /dev/null 2>&1\n    size=$(du -hs --exclude=.git|cut -f1)\n    echo $co $size $dt\ndone < <(git rev-list --pretty=format:"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%H %ci"')]),s._v(" --all --date-order |grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^commit"')]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Combine parallel branches into linear git history")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/54974806",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --date-order --reverse J ^A | xargs git cherry-pick\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"topo-order"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#topo-order"}},[s._v("#")]),s._v(" 🔹 --topo-order")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: In git, how can I find the revision at which a branch was created?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6059774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" -B1 |\n    head -1 |\n    cut -c2-\n\ngit rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" |\n    head -1 |\n    cut -c2-\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How can I sort a set of git commit IDs in topological order?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/22714774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --topo-order $(cat SET_OF_SHA1S) \\\n   | grep --file SET_OF_SHA1S --max-count $(wc -l SET_OF_SHA1S)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Git move n commits forward")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41907603",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("C > git checkout $(git rev-list --topo-order HEAD..master | tail -20 | head -1)\n\n> ➦ b17c0a7 > git rev-list --topo-order HEAD..master          \n3c5b47003a5bc576d6c5d13b065bb70aef28828f\n306fee6443d0e2ebb0a5372dfdff0d55728950f3\n02acfd4b6987dfc8bc689a18d21ee82ad8132839\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to find whether a given commit is on the first-parent chain of a branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/43080559",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ The fancy way\n...o--o--A--o--o--o--T\n    \\            /\n ...-o--*--B----o\n         \\\n          C\n\n         o--o--*--T\n\n               *--T\n              /\n             o\n\n       o--o\n      /    \\\n...--A      o--T\n      \\    /\n       o--o\n\nTF=$(mktemp) || exit 1\ntrap "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rm -f $TF"')]),s._v(" 0 1 2 3 15\ngit rev-list --ancestry-path $testcommit..$branch > $TF\ntest -s $TF || exit 1  # not ancestor\ngit rev-list --stdin --merges < $TF | while read hash; do\n    parent1=$(git rev-parse ${hash}^1)\n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parent1"')]),s._v(" $TF >/dev/null || exit 1 # on wrong path\ndone\nexit 0 # on correct path\n\n▲ The brute-force way\ngit rev-list --first-parent ${testcommit}^@..$branch\n\nhash=$(git rev-parse "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$testcommit"')]),s._v(") || exit 1\nt=$(git rev-list --first-parent --topo-order $branch --not ${hash}^@ | tail -1)\ntest $hash = "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$t"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How to copy files with their history among different git repositories?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/37472798",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Basic setup and finding interesting commits\ngit rev-list --topo-order --reverse latest ^stopat -- path1 path2 ... pathN\n\n▲ Method: literal copy\nwhile read rev; do\n    (cd src &&\n     git checkout -q $rev &&\n     git log -1 --pretty=format:%B > ../commit-msg) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to check out $rev in src"')]),s._v("\n\n    (cd src && cp -R $(cat ../list-of-paths) ../dst/) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to copy files from src to dst"')]),s._v("\n\n    (cd dst &&\n     git add -- $(cat ../list-of-paths) &&\n     git commit -q -F ../commit-msg) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to commit $rev in dst"')]),s._v("\ndone < interesting\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h2",{attrs:{id:"reverse"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[s._v("#")]),s._v(" 🔹 --reverse")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: git move directory to another repository while keeping the history")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 24    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41814257",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("cd repo-2\ngit remote add source ../repo-1\ngit fetch source\n\ncd repo-2\ngit checkout -b source-master source/master\nCMD="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rm -rf dir1 dir2 dir3 dir5"')]),s._v("\ngit filter-branch --tree-filter "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$CMD"')]),s._v("\n\ncd repo-2\ngit checkout master\ngit cherry-pick `git rev-list --reverse source-master -- dir-to-move`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: In git, how can I find the revision at which a branch was created?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6059774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" -B1 |\n    head -1 |\n    cut -c2-\n\ngit rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" |\n    head -1 |\n    cut -c2-\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v('3. Usage scenario: How can I "splice" two (or more) completely unrelated linear branch ancestries into a new one?')])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/25930104",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("A---B------C--D [branch1]\n\n  X---Y--Z [branch2]\n\n▲ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Splicing"')]),s._v(" two unrelated branches\n▲ Generalization to more than two branches\nA ----- o ---- o [branch1]\n\n   o ----- o ---- o -- o [branch2]\n\n...\n\n o ----- o - o [branchn]\n\ngit rev-list --reverse --max-parents=0 --all\n\ngit branch -r --contains `git rev-list --reverse --max-parents=0 --all | head -1`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Checking out a project's first commit with git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3270712",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse HEAD | head -1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Get difference in lines of code between 2 commits by date Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/31424594",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git diff <firstcommit>..<secondcommit> --shortstat\n\ngit rev-list --since="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jan 1 2014"')]),s._v(" --reverse origin/master | head -1\ngit rev-list --until="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dec 31 2014"')]),s._v(" -n 1 origin/master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Show only commits that don't affect any of the specified paths")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6650886",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pick %h %s"')]),s._v(" --reverse -- dir1/ dir2/\n\ngit log --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pick %h %s"')]),s._v(" --no-walk \\\n    $(git rev-list --reverse -- dir1/ dir2/)\n\ngit rev-list HEAD -- dir1/ dir2/\n\nsort  <(git rev-list HEAD) <(git rev-list HEAD -- dir1/ dir2/) | uniq -u\n\n▲ Integrating it all\ngit log --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"pick %h %s"')]),s._v(" --no-walk \\\n    $(git rev-list --no-walk --reverse \\\n       $(sort <(git rev-list HEAD) \\\n               <(git rev-list HEAD -- dir1/ dir2/) | \n          uniq -u))\n\n▲ Recommendations\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: Cherry pick set of commits from other branch skipping empty commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/40988114",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse something-begin..something-end . | git cherry-pick --stdin\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: Find Git commits that contain multiple specific commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13972018",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/python -O")]),s._v("\nimport os\nimport sys\n\nif len(sys.argv) < 2:\n    print ("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"USAGE: {0} <list-of-revs>"')]),s._v(".format([sys.argv[0]]))\n    exit(1)\n\nrev_list = os.popen("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rev-list --parents --reverse --all'")]),s._v(")\n\nlooking_for = os.popen("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rev-parse {0}'")]),s._v("\n                       .format("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(".join(sys.argv[1:]))).read().splitlines()\nsolutions = set()\ncommits = {}\n\nfor line in rev_list:\n    line = line.strip().split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(")\n    commit = set()\n    sha = line[0]\n    for parent in line[1:]:\n        if not parent in commits:\n            continue\n        commit.update(commits[parent])\n        if parent in solutions:\n            commit.add("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dead"')]),s._v(")\n    if sha in looking_for:\n        commit.add(sha)\n    if not "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dead"')]),s._v(" in commit and commit.issuperset(looking_for):\n        solutions.add(sha)\n    # only keep commit if it's a child of looking_for\n    if len(commit) > 0:\n        commits[sha] = commit\n\nprint "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v(".join(solutions)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("strong",[s._v("9. Usage scenario: How to copy files with their history among different git repositories?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/37472798",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Basic setup and finding interesting commits\ngit rev-list --topo-order --reverse latest ^stopat -- path1 path2 ... pathN\n\n▲ Method: literal copy\nwhile read rev; do\n    (cd src &&\n     git checkout -q $rev &&\n     git log -1 --pretty=format:%B > ../commit-msg) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to check out $rev in src"')]),s._v("\n\n    (cd src && cp -R $(cat ../list-of-paths) ../dst/) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to copy files from src to dst"')]),s._v("\n\n    (cd dst &&\n     git add -- $(cat ../list-of-paths) &&\n     git commit -q -F ../commit-msg) ||\n    die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed to commit $rev in dst"')]),s._v("\ndone < interesting\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br")])]),e("h2",{attrs:{id:"objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[s._v("#")]),s._v(" 🔹 --objects")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to find/identify large commits in git history?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 172    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-verify-pack.html"}},[s._v("git verify-pack")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/10622293",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#set -x ")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Shows you the largest objects in your repo's pack file.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Written for osx.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# @see https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# @author Antony Stubbs")]),s._v("\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set the internal field separator to line break, so that we can iterate easily over the verify-pack output")]),s._v("\nIFS=$"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),s._v(";\n \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# list all objects including their size, sort by size, take top 10")]),s._v("\nobjects=`git verify-pack -v .git/objects/pack/pack-*.idx | grep -v chain | sort -k3nr | head`\n \necho "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"All sizes are in kB\'s. The pack column is the size of the object, compressed, inside the pack file."')]),s._v("\n \noutput="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"size,pack,SHA,location"')]),s._v("\nallObjects=`git rev-list --all --objects`\nfor y in $objects\ndo\n    # extract the size in bytes\n    size=$((`echo $y | cut -f 5 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`/1024))\n    # extract the compressed size in bytes\n    compressedSize=$((`echo $y | cut -f 6 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`/1024))\n    # extract the SHA\n    sha=`echo $y | cut -f 1 -d "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("`\n    # find the objects location in the repository tree\n    other=`echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${allObjects}"')]),s._v(" | grep $sha`\n    #lineBreak=`echo -e "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n"')]),s._v("`\n    output="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${output}\\n${size},${compressedSize},${other}"')]),s._v("\ndone\n \necho -e $output | column -t -s "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("', '")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to find the N largest files in a git repository?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 69    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46085465",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all \\\n| git cat-file --batch-check="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(objecttype) %(objectname) %(objectsize) %(rest)'")]),s._v(" \\\n| sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^blob //p'")]),s._v(" \\\n| sort --numeric-sort --key=2 \\\n| tail -n 10 \\\n| cut -c 1-12,41- \\\n| $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Git: How to treat commit so that versions of a file exist in their entirety (not just as diffs)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9166751",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all\n\n▲ Background\n▲ Data Integrity\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How can I reduce the size of my git repo?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-verify-pack.html"}},[s._v("git verify-pack")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[s._v("git rm")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[s._v("git gc")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34327110",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --objects --all | sort -k 2 > allfileshas.txt\n\ngit gc && git verify-pack -v .git/objects/pack/pack-*.idx | egrep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^\\w+ blob\\W+[0-9]+ [0-9]+ [0-9]+$"')]),s._v(" | sort -k 3 -n -r > bigobjects.txt\n\ngit filter-branch --prune-empty --index-filter "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rm -rf --cached --ignore-unmatch MY-BIG-DIRECTORY-OR-FILE'")]),s._v(" --tag-name-filter cat -- --all\n\ngit clone --no-hardlinks file:///Users/yourUser/your/full/repo/path repo-clone-name\n\ngit push --force\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("h2",{attrs:{id:"no-walk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#no-walk"}},[s._v("#")]),s._v(" 🔹 --no-walk")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How does one "),e("code",[s._v("git log")]),s._v(" tagged commits only?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/21570658",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --no-walk --tags\n\ngit rev-list --tags --no-walk > /tmp/all-tags\ngit rev-list master > /tmp/all-master\n\n(git rev-list --tags --no-walk; git rev-list master) | sort | uniq -d\n\ngit log --no-walk $(comm -12 /tmp/all-tags /tmp/all-master)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Show history of a single file across all branches")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/24877406",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --no")]),s._v("-walk HEAD")]),s._v("\nd1574b852963482d4b482992ad6343691082412f\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list HEAD")]),s._v("\nd1574b852963482d4b482992ad6343691082412f\nb9491ea160d12ddfd69a9ddc79ebd264cda20679\n676699a0e0cdfd97521f3524c763222f1c30a094\n[snip]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h2",{attrs:{id:"pretty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pretty"}},[s._v("#")]),s._v(" 🔹 --pretty")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to find the nearest parent of a Git branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 382    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3162929",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("pushedrev=...\nbasename=develop\nif ! baserev="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_children_of_base="$(\n  git rev-list --pretty=tformat:%P '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -F "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v('\n)"\ncase '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('",$parents_of_children_of_base"')]),s._v(" in\n    ,)     echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n           exit 1 ;;\n    ,*\\ *) echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must not merge tip of '$basename' (rebase instead)\"")]),s._v("\n           exit 1 ;;\n    ,*)    exit 0 ;;\nesac\n\npushedrev=...\nbasename=develop\nif ! baserev="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_commits_beyond_base="$(\n  git rev-list --pretty=tformat:%P '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^commit '")]),s._v('\n)"\ncase '),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parents_of_commits_beyond_base"')]),s._v(" in\n    *\\ *)          echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"must not push merge commits (rebase instead)"')]),s._v("\n                   exit 1 ;;\n    *"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v("*)  exit 0 ;;\n    *)             echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n                   exit 1 ;;\nesac\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Apply a command to all commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9140237",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\n\nwhile read co dt ; do\n    git checkout $co > /dev/null 2>&1\n    size=$(du -hs --exclude=.git|cut -f1)\n    echo $co $size $dt\ndone < <(git rev-list --pretty=format:"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%H %ci"')]),s._v(" --all --date-order |grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^commit"')]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to make sure fixup commits are not merged into master branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/54911698",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /usr/bin/perl")]),s._v("\n\nuse strict;\nuse warnings;\n\nuse constant Z40 => "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'0'")]),s._v(" x 40;\n\nmy($remote,$url) = @ARGV;\n\nmy $abort_push = 0;\nwhile (<STDIN>) {\n  # <local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF\n  my($lref,$lsha,$rref,$rsha) = split;\n\n  if ($lsha eq Z40) {} # ignore deletes\n  else {\n    my $commit_range =\n      $rsha eq Z40\n        ? $lsha            # new branch: check all commits\n        : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$rsha..$lsha"')]),s._v(";  # existing: check new commits since $rsha\n    my @cmd = (qw/ git rev-list --pretty=oneline --grep ^fixup! /, $commit_range);\n\n    open my $fh, "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-|"')]),s._v(", @cmd or die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0: failed to start git rev-list: $!"')]),s._v(";\n    my @fixup_commits;\n    while (<$fh>) { push @fixup_commits, "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"  - $_"')]),s._v(" }\n    close $fh;\n\n    if (@fixup_commits) {\n      my $s = @fixup_commits == 1 ? "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s"')]),s._v(";\n      warn "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Remove fixup$s from $lref:\\n"')]),s._v(", @fixup_commits;\n      $abort_push = 1;\n    }\n  }\n}\n\ndie "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Push aborted.\\n"')]),s._v(" if $abort_push;\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git push origin master feature/foo")]),s._v("\nRemove fixups from refs/heads/master:\n  - 1d572d32f963d6218ed3b92f69d58a8ec790d7ea fixup! sdlkf\n  - f9a55ee14f28f9496e2aea1bc400ca65ae150f4b fixup! yo\nRemove fixup from refs/heads/feature/foo:\n  - 4a732d4601012246986037437ac0c0bab39dd0a9 fixup! fsdkfj\nPush aborted.\nerror: failed to push some refs to [...]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br")])]),e("h2",{attrs:{id:"format"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#format"}},[s._v("#")]),s._v(" 🔹 --format")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Print commit message of a given commit in git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 400    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3357357",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=%B"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=%B"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --max")]),s._v("-count=1 <commit>")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"abbrev-commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#abbrev-commit"}},[s._v("#")]),s._v(" 🔹 --abbrev-commit")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Git log list commits excluding cherry-picked from the first branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/56298556",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --left-right --cherry-mark --abbrev-commit release2...release1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#date"}},[s._v("#")]),s._v(" 🔹 --date")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Apply a command to all commits")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9140237",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\n\nwhile read co dt ; do\n    git checkout $co > /dev/null 2>&1\n    size=$(du -hs --exclude=.git|cut -f1)\n    echo $co $size $dt\ndone < <(git rev-list --pretty=format:"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%H %ci"')]),s._v(" --all --date-order |grep -v "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^commit"')]),s._v(")\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Combine parallel branches into linear git history")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/54974806",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --date-order --reverse J ^A | xargs git cherry-pick\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"parents"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parents"}},[s._v("#")]),s._v(" 🔹 --parents")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I get the parents of a merge commit in Git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 193    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/9059633",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Simple git log <hash> called for a merge commit shows abbreviated hashes of its parents:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v(" $ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -1")]),s._v(" 395f65d")]),s._v("\n commit 395f65d438b13fb1fded88a330dc06c3b0951046\n Merge: 9901923 d28790d\n ...\n\n▲ If all you want is just the hashes, the two equivalent choices are:\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --pretty")]),s._v("=%P"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git show"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --pretty")]),s._v("=%P <commit>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --parents")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1 <commit>")]),s._v("\n\n▲ If you want to examine the parents, you can refer to them directly with carats as <commit>^1 and <commit>^2, e.g.:\ngit show <commit>^1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How to reference the initial commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 165    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1007545",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --max")]),s._v("-parents=0 HEAD")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --parents")]),s._v(" HEAD | egrep ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^[a-f0-9]{40}$"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Referencing the child of a commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 18    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/1762012",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nREV=$1\n\nif [[ -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV"')]),s._v(" ]]; then\n    echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Usage: git-get-child  []"')]),s._v("\n    exit\nfi\n\nHASH=$(git rev-parse $REV)\n\nNUM=$2\n\nif [[ -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$NUM"')]),s._v(" ]]; then\n    NUM=1\nfi\n\ngit rev-list --all --parents | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" $HASH"')]),s._v(" | sed -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${NUM}s/\\([^ ]*\\) .*$/\\\\1/p"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How can I uniquely identify a git repository")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 12    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34874932",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --parents HEAD | egrep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^[a-f0-9]{40}$"')]),s._v("\n\ngit rev-list --parents HEAD | tail -1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: Have remote git repository refuse merge commits on push")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/2081349",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/usr/bin/ruby -w")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A pre-receive hook that should refuse any pushes that would update")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# master in such a way that a non-linear history would be created,")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# except where it involves a merge from another branch in this")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# repository.  This has only had very cursory testing.")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is a suggested answer to:")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   http://stackoverflow.com/questions/2039773/have-remote-git-repository-refuse-local-branch-merge-commits-on-push")]),s._v("\n\nref_to_check = "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/master"')]),s._v("\n\nrev_old, rev_new, ref = STDIN.read.split("),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(")\n\nif ref == ref_to_check\n  merge_bases = `git merge-base #{rev_old} #{rev_new}`.strip.split(/\\s+/)\n  unless $?.success? and merge_bases.length == 1\n    STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No unique merge base found between #{rev_old} and #{rev_new}"')]),s._v("\n    exit(1)\n  end\n  rev_list_output = `git rev-list --parents #{merge_bases[0]}..#{rev_new}`\n  list_of_revs_with_parents = rev_list_output.strip.split(/[\\r\\n]+/)\n  list_of_revs_with_parents.each do |line|\n    rev_with_parents = line.strip.split(/\\s+/)\n    if rev_with_parents.length > 2      \n      parents = rev_with_parents.slice(1,rev_with_parents.length)\n      # The question says to permit non-linear history if the merge is\n      # from another branch in the central repository, so check\n      # whether that's the case.  (If you just want to prevent all\n      # pushes that add non-linear history, just exit with error\n      # here.)\n      any_parent_not_on_any_branch = false\n      parents.each do |p|\n        branches = `git branch --contains #{p} 2> /dev/null`\n        if $?.success? and ! branches.strip.empty?\n          STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"More than one parent of commit #{rev_with_parents[0]}"')]),s._v("\n          STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"... but parent #{p} is on branches:"')]),s._v("\n          STDERR.puts branches\n        else\n          STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Parent #{p} not found on any other"')]),s._v("\n          STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch in this repository"')]),s._v("\n          any_parent_not_on_any_branch = true\n          break\n        end\n      end\n      if any_parent_not_on_any_branch\n        STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Refusing push, since it would create non-linear history"')]),s._v("\n        STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"for #{ref} and the merges don\'t just involve commits on"')]),s._v("\n        STDERR.puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"other branches in this repository."')]),s._v("\n        exit(2)\n      end\n    end\n  end\nend\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Find all the direct descendants of a given commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/27962018",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all --parents | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^.\\{40\\}.*<PARENT_SHA1>.*"')]),s._v(" | awk "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"children"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#children"}},[s._v("#")]),s._v(" 🔹 --children")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Retrieve the list of child commits of a specific commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 27    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/14247783",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --all --not $COMMIT^@ --children | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^$COMMIT"')]),s._v("\n\nchildren = "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!f() { git rev-list --all --not $1^@ --children | grep $(git rev-parse $1); }; f"')]),s._v(" # reachable children of a ref\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: git log reverse and then limit the results to one")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/30833101",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --children HEAD...origin/master^ | tail -2 | head -1 | cut -d"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(" -f 2-\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Find commits after a commit")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34704250",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log --reverse --pretty=format:%H --ancestry-path 3...master | head -3\n\ngit rev-list HEAD..3 | tail -3\n\ngit rev-list --children --all | grep ^${COMMIT}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"timestamp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#timestamp"}},[s._v("#")]),s._v(" 🔹 --timestamp")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I use git to provide a word count graph?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/17067045",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list HEAD -- file.txt |\n    while read c; do git show "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$c:file.txt"')]),s._v(" | wc -w; done\n\ngit rev-list --timestamp HEAD -- file.txt |\n    while read t c; do echo -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$t "')]),s._v("; git show "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$c:file.txt"')]),s._v(" | wc -w; done\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"left-right"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#left-right"}},[s._v("#")]),s._v(" 🔹 --left-right")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: git: programmatically know by how much the branch is ahead/behind a remote branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/gitk.html"}},[s._v("gitk")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/2970101",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list @{u}..\ngit rev-list --left-right --boundary @{u}...\ngitk @{u}...\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# work out the current branch name")]),s._v("\ncurrentbranch=$(expr $(git symbolic-ref HEAD) : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/\\(.*\\)'")]),s._v(")\n[ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$currentbranch"')]),s._v(" ] || die "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You don\'t seem to be on a branch"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# look up this branch in the configuration")]),s._v("\nremote=$(git config branch.$currentbranch.remote)\nremote_ref=$(git config branch.$currentbranch.merge)\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# convert the remote ref into the tracking ref... this is a hack")]),s._v("\nremote_branch=$(expr $remote_ref : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/\\(.*\\)'")]),s._v(")\ntracking_branch=refs/remotes/$remote/$remote_branch\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now $tracking_branch should be the local ref tracking HEAD")]),s._v("\ngit rev-list $tracking_branch..HEAD\n\ngit rev-list HEAD --not --remotes\n\ngit rev-list --left-right $tracking_branch...HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: In git, how can I find the revision at which a branch was created?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/6059774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" -B1 |\n    head -1 |\n    cut -c2-\n\ngit rev-list --reverse --topo-order --left-right --boundary 1.0...master | \n    grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^>"')]),s._v(" |\n    head -1 |\n    cut -c2-\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: Git log list commits excluding cherry-picked from the first branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/56298556",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --left-right --cherry-mark --abbrev-commit release2...release1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: Pull only latest commits to shallow clone")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46057596",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("...--o--*--o--o   <-- yourbranch (HEAD)\n         \\\n          o--o--o   <-- other\n\n...--o--*--o--...--o   <-- yours (HEAD)\n         \\\n          \\      o--o--o\n           \\    /       \\\n            o--o         o--o   <-- other\n                \\       /\n                 o-----o\n\n▲ Where to do this counting\ngit push $remote HEAD:for-blitz-count-trick\n\nbase=$(git merge-base for-blitz-count-trick other)\ngit rev-list --count --ancestry-path $base^@..for-blitz-count-trick\ngit rev-list --count --ancestry-path $base^@..other\n\ngit rev-list --count --left-right --boundary for-blitz-count-trick...other\n\n▲ If that's impossible (or even just too annoying)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How to list branches in git with the number of commits ahead or behind master?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/64938133",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git for-each-ref refs/heads/ --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" |\nwhile read branch; do\n    echo -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch: "')]),s._v("\n    git rev-list --left-right --count master..$branch\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: How to remove duplicate commits in a rebase-fashion")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/51851109",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Cherry-mark\ngit rev-list --cherry-mark --left-right A...B\n\n...--o--*--1--2--3   <-- A\n         \\\n          4--5--6   <-- B\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --left")]),s._v("-right A...B")]),s._v("\n<3...\n<2...\n<1...\n>6...\n>5...\n>4...\n\n▲ Equality is determined by git patch-id\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: Enforce rebase before each commit (git)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46425698",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("if git rev-list --left-right --count mainbranch...@ | cut -f1 > 0\n\nif [[ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-list --left-right --count mainbranch...@ | cut -f1)"')]),s._v(" > 0 ]]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("h2",{attrs:{id:"count"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#count"}},[s._v("#")]),s._v(" 🔹 --count")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I get the Git commit count?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1341    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4061706",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count <revision>\n\ngit rev-list --all --count\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Count the number of commits on a Git branch")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 442    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/11657647",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count HEAD\n\ngit rev-list --count <branch-name>\n\ngit rev-list --count HEAD ^<branch-name>\n\n▲ Examples\ngit checkout master\ngit checkout -b test\n<We do 3 commits>\ngit rev-list --count HEAD ^master\n\ngit checkout develop\ngit checkout -b test\n<We do 3 commits>\ngit rev-list --count HEAD ^develop\n\n▲ Ignoring Merges\ngit rev-list --no-merges --count HEAD ^develop\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to see how many commits a local branch is ahead/behind another local branch in git?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/27408246",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Listing and counting commits: git rev-list\n              L - L - L   <-- foo\n            /\n... - C - C\n            \\\n              U           <-- origin/foo\n\n▲ Using rev-list on local branches, vs using git cherry\ngit rev-list --count master..feature\n\n              D - E - F - G - H   <-- feature\n            /\n... - C - C\n            \\\n              F'                  <-- master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How can I find out how many commits in master are not in my branch?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/38535133",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count master..feature\n\ngit rev-list --count feature..master\n\necho feature is $(git rev-list --count master..feature) commits ahead of master\necho and $(git rev-list --count feature..master) commits behind master\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: How do we run git status for a specific remote?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/25278918",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git symbolic-ref"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --short")]),s._v(" HEAD")]),s._v("\n1.8.x\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name HEAD")]),s._v("\nrefs/heads/1.8.x\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'@{upstream}'")]),s._v("\nrefs/remotes/origin/1.8.x\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --get")]),s._v(" branch.1.8.x.remote")]),s._v("\norigin\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --get")]),s._v(" branch.1.8.x.merge")]),s._v("\nrefs/heads/1.8.x\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --get")]),s._v(" remote.origin.fetch")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+refs/heads/*:refs/remotes/origin/*")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --count")]),s._v(" origin/1.8.x..1.8.x")]),s._v("\n4\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --count")]),s._v(" 1.8.x..origin/1.8.x")]),s._v("\n0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: How to output the number of commits with a bash script?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/52284985",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count master..HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: How to apply patch without knowing the original version the diff file comes from?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/53136774",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse 91919ad")]),s._v("\n91919adb4a289234062a27bed0276cb098d1e5d5\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --oneline")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --find")]),s._v("-object=91919adb4a289234062a27bed0276cb098d1e5d5")]),s._v("\ne0597baed57 Remove Carve boolean\ne8daf2e3ea1 CMake: cleanup\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --oneline")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --find")]),s._v("-object=91919ad")]),s._v("\ne0597baed57 Remove Carve boolean\ne8daf2e3ea1 CMake: cleanup\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --count")]),s._v(" e8daf2e3ea1..e0597baed57")]),s._v("\n752\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git show e8daf2e3ea1 -- extern/CMakeLists.txt")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token commit-sha1"}},[s._v("commit e8daf2e3ea17c2e9569e6fc9b49879c74d9a8c22")]),s._v("\nAuthor: Campbell Barton [snip]\n\ndiff --git a/extern/CMakeLists.txt b/extern/CMakeLists.txt\nindex f7e98525b8b..91919adb4a2 100644\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--- a/extern/CMakeLists.txt")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+++ b/extern/CMakeLists.txt")]),s._v("\n[snip]\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git show e0597baed57 -- extern/CMakeLists.txt")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token commit-sha1"}},[s._v("commit e0597baed57fa7a9dfaf6dff6d0fa120784d21ea")]),s._v("\nAuthor: Sergey Sharybin [snip]\n\ndiff --git a/extern/CMakeLists.txt b/extern/CMakeLists.txt\nindex 91919adb4a2..2e8589ffd17 100644\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--- a/extern/CMakeLists.txt")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+++ b/extern/CMakeLists.txt")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: How do I list git branches with commits only to a specific directory?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/65039297",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ If you have a reference branch (say master or develop), you can check if a branch has modified this directory since it forked from that branch :\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will give view an understandable view of what commits are part of this branch :")]),s._v("\ngit log --graph --oneline master..$branch -- framework/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will give you an int as output (easier to use in a script) :")]),s._v("\ngit rev-list --count master..$branch -- framework/\n\n▲ You can use an alternative syntax to a..b if you want to exclude several "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"reference branches"')]),s._v(" :\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# count commits from $branch that modified 'framework/' since it forked")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# either from master or from develop :")]),s._v("\ngit rev-list --count ^master ^develop $branch -- framework/\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[e("strong",[s._v("9. Usage scenario: Pull only latest commits to shallow clone")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46057596",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("...--o--*--o--o   <-- yourbranch (HEAD)\n         \\\n          o--o--o   <-- other\n\n...--o--*--o--...--o   <-- yours (HEAD)\n         \\\n          \\      o--o--o\n           \\    /       \\\n            o--o         o--o   <-- other\n                \\       /\n                 o-----o\n\n▲ Where to do this counting\ngit push $remote HEAD:for-blitz-count-trick\n\nbase=$(git merge-base for-blitz-count-trick other)\ngit rev-list --count --ancestry-path $base^@..for-blitz-count-trick\ngit rev-list --count --ancestry-path $base^@..other\n\ngit rev-list --count --left-right --boundary for-blitz-count-trick...other\n\n▲ If that's impossible (or even just too annoying)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("10. Usage scenario: Git log merge commits with more than 1 commit merged")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41948589",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count M^@ ^M^1\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("11. Usage scenario: Enforce rebase before each commit (git)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/46425698",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("if git rev-list --left-right --count mainbranch...@ | cut -f1 > 0\n\nif [[ "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-list --left-right --count mainbranch...@ | cut -f1)"')]),s._v(" > 0 ]]\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("12. Usage scenario: How can I tell the depth of a git repository?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/38582912",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list --count --all\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h2",{attrs:{id:"none"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[s._v("#")]),s._v(" 🔹None")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to list commits since certain commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 216    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7693298",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list <since_hash>..HEAD\n\ngit rev-list <since_hash>^..HEAD\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Show sha1 only with git log")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 40    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/20874123",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("for sha1 in $(git rev-list HEAD) ; do\n    : # Do something with $sha1\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to detect a forced update")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 27    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/12258773",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Conclusion\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list oldrev ^newrev")]),s._v("\n\n▲ How to test\n$ rake -T\nrake forced_push  # git hooks test detect forced update\nrake normal_push  # git hooks test\n\n▲ Step-by-Step introduction\n1 --- 2 --- O --- X --- 3 --- 4 --- N\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list N")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list N O")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list N ^O")]),s._v("\n\n* --- B --- * --- O ($oldrev)\n       \\\n        * --- X --- * --- N ($newrev)\n\n▲ See Also\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br")])]),e("p",[e("strong",[s._v("4. Usage scenario: How to rebase many branches (with the same base commit) at once?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 22    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/866353",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git for-each-ref "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/*'")]),s._v(" | \\\n  while read rev type ref; do\n    branch=$(expr "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/heads/\\(.*\\)'")]),s._v(" )\n    revs=$(git rev-list $rev..master)\n    if [ -n "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$revs"')]),s._v(" ]; then\n      echo $branch needs update\n      git diff --summary --shortstat -M -C -C $rev master\n    fi\n  done\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("p",[e("strong",[s._v("5. Usage scenario: find out if a git commit was checked in before or after another commit given the hashes")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/14233620",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git log -1 --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%ci'")]),s._v(" <commit>\n\ngit rev-list <commitA> | grep $(git rev-parse <commitB>)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[e("strong",[s._v("6. Usage scenario: Show all commits whose diff contain specific string")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/18365134",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list HEAD -- path |\nwhile read rev; do\n    if git show -p $rev | grep pattern >/dev/null; then\n        echo $rev\n    fi\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("p",[e("strong",[s._v("7. Usage scenario: How could I commit to remote branch one by one automatically")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/34199528",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git push origin 17081fa:branchname\ngit push origin 30854d2:branchname\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# etc")]),s._v("\n\nfor hash in $(git rev-list 17081fa^..12ba64e); do\n  read -p "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Pushing $hash. Press return to continue."')]),s._v(";\n  git push origin $hash:branchname;\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("p",[e("strong",[s._v("8. Usage scenario: How to list the change history of the directory tree in git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/7093873",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("for rev in $(git rev-list FIRST_REV..LAST_REV)\ndo\n  git ls-tree -r -t $rev | grep tree | cut -f 2\ndone\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nfor r in $(git rev-list FIRST_REV..LAST_REV) \ndo \n    git ls-tree -r -t $r | grep tree | cut -f 2\ndone | sort -u\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("p",[e("strong",[s._v("9. Usage scenario: Git: how to get a list of all revisions since some commit?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4340736",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list ^bbbbbbb branches...\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("chris@zack:~/git-test$ git log"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --all")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --graph")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --oneline")])]),s._v("\n* 8daff2c f      <-- test\n* 5f57b15 d\n| * 764a725 e    <-- master\n| * 5889800 c\n|/\n* 294908b b\n* 975d652 a\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("chris@zack:~/git-test$ git rev-list ^294908b master test")]),s._v("\n8daff2c59d8cb966bf399de5027fae85ee016081\n5f57b1524afeafbf37984f84fa5fe24ee0ac8501\n764a7256d40dbefdb6278443fb80266f00358a37\n58898005214607e5c53b45954a98891ea599c037\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[e("strong",[s._v("10. Usage scenario: Git rebase a local branch that doesn't have a remote")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/32832088",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -b")]),s._v(" new-my-feature")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git cherry-pick <id of commit C>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git cherry-pick <id of commit D>")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git cherry-pick <id of commit E>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list master..my-feature")]),s._v("\ne59f6c2d348d465e3147b11098126d3965686098\n8413a79e67177d026d2d8e1ac66451b80bb25d62\n1f9e0a53489aaca7859722e037a47e93858cbc42\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git cherry-pick <id> <id> <id>")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git cherry-pick my-feature~3..my-feature")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br")])]),e("p",[e("strong",[s._v("11. Usage scenario: Bash function to search git repository for a filename that matches regex")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/28095750",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("for branch in `git for-each-ref --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" $LOC`; \ndo\n    for commit in `git rev-list $branch | grep -oP ^.\\{7\\}`; \n    do\n        found=$(git ls-tree -r --name-only $commit | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$param"')]),s._v(")\n        if [ $? -eq 0 ]; \n        then\n            echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${branch#$LOC/}: $commit:"')]),s._v("; echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('" $found"')]),s._v("\n            wasFound="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v(";\n        fi\n    done\ndone\n\nfor branch in `git for-each-ref --format="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" $LOC`; \ndo\n    for commit in `git rev-list $branch | grep -oP ^.\\{7\\}`; \n    do\n        found=$(git ls-tree -r --name-only $commit | grep "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$param"')]),s._v(")\n        if [ $? -eq 0 ]; \n        then\n            echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${branch#$LOC/}: $commit:"')]),s._v("\n            while read line;\n            do\n                echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"  $line"')]),s._v("\n            done < <(echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$found"')]),s._v(")\n            wasFound="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v(";\n        fi\n    done\ndone\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br")])]),e("p",[e("strong",[s._v("12. Usage scenario: Correctly merging a feature into master")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/45354720",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ The mechanics of a complex rebase\nmaster ---A---B---C\n           \\\nfeature1    D---E---F\n                     \\\nfeature2              G---H\n\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--A--B--C   <-- master")]),s._v("\n   \\\n    D--E--F   <-- feature1\n           \\\n            G--H  <-- feature2\n\n          D"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-E'")]),s._v("-F'   <-- feature1\n         /\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--A--B--C   <-- master")]),s._v("\n   \\\n    D--E--F   [reflog: feature1@{1}]\n           \\\n            G--H  <-- feature2\n\ngit rev-list <argument>..<current-branch>\n\n                  G"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-H'")]),s._v("   <-- feature2\n                 /\n          D"),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'-E'")]),s._v("-F'   <-- feature1\n         /\n"),e("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--A--B--C   <-- master")]),s._v("\n   \\\n    D--E--F   [reflog: feature1@{1}]\n           \\\n            G--H  [reflog: feature2@{1}]\n\n▲ Rebase vs merge\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[e("strong",[s._v("13. Usage scenario: git rebase with branches (whole tree)")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-show-ref.html"}},[s._v("git show-ref")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/17107452",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("$ echo `git rev-list [E] -1` `git rev-list master1 -1` > .git/info/grafts\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git filter-branch"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --tag")]),s._v("-name-filter cat master2 [other branches]")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git filter-branch"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --tag")]),s._v("-name-filter cat `git show-ref"),e("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --heads")]),s._v(" | awk ")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $2}'")]),s._v("`\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[e("strong",[s._v("14. Usage scenario: Find new commit ids on a git tag")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/25770625",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list Tag.1.15.50.31..Tag.1.15.50.32\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("15. Usage scenario: Make sure that the Git push is from the same tree")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/23320737",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list $new-ref\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("strong",[s._v("16. Usage scenario: Imposing a Partial Ordering on Git Commit IDs")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/2239686",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)])],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git rev-list old-revision..new-revision\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);t.default=a.exports}}]);