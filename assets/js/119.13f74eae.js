(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{546:function(s,e,t){"use strict";t.r(e);var n=t(19),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),t("br")])]),s._v(" "),t("h1",{attrs:{id:"git-rev-parse-pick-out-and-massage-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-rev-parse-pick-out-and-massage-parameters"}},[s._v("#")]),s._v(" 📌 git rev-parse - Pick out and massage parameters")]),s._v(" "),t("h2",{attrs:{id:"revs-only"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#revs-only"}},[s._v("#")]),s._v(" 🔹 --revs-only")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Git - poor merge permanently ignores files changes in sub branches")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/35511043",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v(" isChangeInBaseChanges() {\n  for element in ${baseChanges[@]}; do \n    if [ $element == $change ]\n then \n return 1\nfi \n  done\n  return 0\n} \n\nrevopts=`git rev-parse --revs-only $*`\n\nif ! [[ $revopts ]] \nthen\n  revopts="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--all"')]),s._v("\nfi\n\nexitCode=0\n\nfor merge in `git rev-list --min-parents=2 $revopts`; do\n  mergeChanges=`git log -m -1 --name-only --pretty="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"format:"')]),s._v(" $merge | sort -u`\n  mergeBase=`git merge-base $merge^ $merge^2`  \n  baseChanges=`git diff --name-only $merge $mergeBase`\n\n  lostFiles=()\n  for change in ${mergeChanges[@]}; do\n     isChangeInBaseChanges\nif [ $? -ne 1 ]\nthen\n  lostFiles+=($change)\nfi \n  done\n\n  if [ ${#lostFiles[@]} -ne 0 ]\n  then\n    exitCode=1\n    echo -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Possible botched merge at "')]),s._v("\necho  $merge\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"files with lost changes are: "')]),s._v("\nfor lostFile in ${lostFiles[@]}; do\n echo $lostFile\ndone\necho --------------------------------------------\n  fi\n\ndone\n\nexit $exitCode\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br")])]),t("h2",{attrs:{id:"verify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#verify"}},[s._v("#")]),s._v(" 🔹 --verify")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to retrieve the hash for the current commit in Git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3319    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/949391",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n\ngit rev-parse --verify HEAD\n\ngit rev-parse --short HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to find the nearest parent of a Git branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 382    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3162929",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("pushedrev=...\nbasename=develop\nif ! baserev="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_children_of_base="$(\n  git rev-list --pretty=tformat:%P '),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -F "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v('\n)"\ncase '),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('",$parents_of_children_of_base"')]),s._v(" in\n    ,)     echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n           exit 1 ;;\n    ,*\\ *) echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must not merge tip of '$basename' (rebase instead)\"")]),s._v("\n           exit 1 ;;\n    ,*)    exit 0 ;;\nesac\n\npushedrev=...\nbasename=develop\nif ! baserev="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --verify refs/heads/"')]),s._v("$basename"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" 2>/dev/null)"')]),s._v("; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"'$basename' is missing, call for help!\"")]),s._v('\n    exit 1\nfi\nparents_of_commits_beyond_base="$(\n  git rev-list --pretty=tformat:%P '),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$pushedrev"')]),s._v(" --not "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v(" |\n  grep -v "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^commit '")]),s._v('\n)"\ncase '),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$parents_of_commits_beyond_base"')]),s._v(" in\n    *\\ *)          echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"must not push merge commits (rebase instead)"')]),s._v("\n                   exit 1 ;;\n    *"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$baserev"')]),s._v("*)  exit 0 ;;\n    *)             echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"must descend from tip of '$basename'\"")]),s._v("\n                   exit 1 ;;\nesac\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: Git: How to find out on which branch a tag is?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 140    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15806668",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git branch --contains tags/<tag>\n\n git rev-parse --verify tags/<tag>^{commit}\n # or, shorter:\n git rev-parse tags/<tag>~0\n\ngit branch --contains <commit>\n\ngit branch -a --contains tags/<tag>\ngit branch -a --contains <commit>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: bypass pre-commit hook for merge commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 31    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/27800562",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v(" git rev-parse -q --verify MERGE_HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: How to print the latest commit ID from the git repo using shell script")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/55861051",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("COMMIT_ID=$(git rev-parse --verify HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: Merging without changing the working directory")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3409382",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nbranch=master\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or take an argument:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if [ $@ eq 1 ];")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#      branch="$1";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure the branch exists")]),s._v("\nif ! git rev-parse --verify --quiet --heads "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" > /dev/null; then\n     echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: branch $branch does not exist"')]),s._v("\n     exit 1\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure this could be a fast-forward   ")]),s._v("\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git merge-base HEAD $branch)"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse $branch)"')]),s._v(" ]; then\n    # find the branch name associated with HEAD\n    currentbranch=$(git symbolic-ref HEAD | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s@.*/@@'")]),s._v(")\n    # make the commit\n    newcommit=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Merge branch '$currentbranch'\"")]),s._v(" | git commit-tree $(git log -n 1 --pretty=%T HEAD) -p $branch -p HEAD)\n    # move the branch to point to the new commit\n    git update-ref -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"merge $currentbranch: Merge made by simulated no-ff"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/$branch"')]),s._v(" $newcommit\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: merging $currentbranch into $branch would not be a fast-forward"')]),s._v("\n    exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to detect if a branch exists using git command?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/31914717",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --quiet --verify $REVISION\n\nif git rev-parse --quiet --verify $REVISION > /dev/null; then\n    # whatever\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: Git pre-commit hook: Prevent commits that change particular files")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/57962307",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# full paths from the repo root separated by newlines")]),s._v("\nMUST_NOT_CHANGE='dir/key1.json\nkey2.json'\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n  against=HEAD\nelse\n  # Initial commit: diff against an empty tree object\n  against=4b825dc642cb6eb9a060e54bf8d69288fbee4904\nfi\n\nexec 1>&2\n\nif git diff --cached --name-only $against |\n   grep --quiet --line-regexp --fixed-strings "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$MUST_NOT_CHANGE"')]),s._v("\nthen\n  echo Commit would modify one or more files that must not change.\n  exit 1\nelse\n  exit 0\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# full paths from the repo root separated by newlines")]),s._v("\nMUST_NOT_CHANGE='dir/key1.json\nkey2.json'\n\nz40=0000000000000000000000000000000000000000\n\nwhile read old_value new_value ref_name\ndo\n  if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$old_value"')]),s._v(" = $z40 ]; then\n    # New branch: diff against an empty tree object\n    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904\n  else\n    against=$old_value\n  fi\n\n  if git diff --name-only $against..$new_value |\n     grep --quiet --line-regexp --fixed-strings "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$MUST_NOT_CHANGE"')]),s._v("\n  then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref_name"')]),s._v(" may commit key, rejected ... >&2\n    exit 1\n  fi\ndone\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git push origin master")]),s._v("\nCounting objects: 10, done.\nDelta compression using up to 40 threads.\nCompressing objects: 100% (6/6), done.\nWriting objects: 100% (10/10), 820 bytes | 410.00 KiB/s, done.\nTotal 10 (delta 1), reused 0 (delta 0)\nremote: refs/heads/master may commit key, rejected ...\nTo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<URL>'")]),s._v("\n ! [remote rejected] master -> master (pre-receive hook declined)\nerror: failed to push some refs to "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'<URL>'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: How to bypass pre-commit hooks after fixing merge conflicts?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/61239779",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse -q --verify MERGE_HEAD && false\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: Check if my current branch on local fork exists on remote upstream")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/66698435",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ While git rev-parse is great for things that do work, there are things that don"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t work.  For instance, here is what happens if I try to rev-parse a name that doesn'")]),s._v("t exist:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/upstream/foobranch")]),s._v("\nrefs/remotes/upstream/foobranch\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\n▲ If all works, we get this:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/origin/master")]),s._v("\n225365fb5195e804274ab569ac3cc4919451dc7f\n\n$ result=`git rev-parse refs/remotes/origin/master`\n$\n\n$ result=`git rev-parse refs/remotes/upstream/foobranch`\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\nvar=`cmd`\n\nvar=$(cmd)\n\nvar=`cmd1 `cmd2` -- `cmd3``\n\nvar=$(cmd1 $(cmd2) -- $(cmd3))\n\nvar=$(cmd) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unable to run the given command"')]),s._v("\n    exit 1\n}\n\n▲ for instance.  So with git rev-parse, if the upstream doesn't exist, we might want:\nresult=$(git rev-parse refs/remotes/upstream/$MY_BRANCH) || exit\n\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--quiet --verify")]),s._v("\n\nMY_BRANCH=$(git rev-parse --abbrev-ref HEAD) || exit\nhash=$(git rev-parse --quiet --verify refs/remotes/upstream/$MY_BRANCH) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"upstream/$MY_BRANCH does not exist"')]),s._v("\n    exit 1\n}\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do whatever you like with upstream/$MY_BRANCH here")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("h2",{attrs:{id:"q"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q"}},[s._v("#")]),s._v(" 🔹 -q")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: bypass pre-commit hook for merge commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 31    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/27800562",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v(" git rev-parse -q --verify MERGE_HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: allow new branch only from master")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24703329",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch foo main~1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are we on a branch, or do we have a detached HEAD?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If detached HEAD, just exit 0 = ok to commit.  Otherwise")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set $branch to the short name of the branch.")]),s._v("\nbranch=$(git symbolic-ref -q --abbrev-ref HEAD) || exit 0\n\ncase "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" in\nmaster) exit 0;;   # branch master, just allow (or deny=exit 1)\npreprod) exit 0;;  # branch preprod, just allow\nesac               # all others: fall through to next checks\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Must be a ticket branch.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If there are no branches named preprod and master, skip all this.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Otherwise, get their SHA-1 values.")]),s._v("\nmaster=$(git rev-parse -q --verify preprod) || exit 0\npreprod=$(git rev-parse -q --verify master) || exit 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ensure that the new commit, once made, will not be a descendant")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of branch preprod, and will be a descendent of master.  That is,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if we add a new commit node to the graph, ancestors(new) will")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NOT include the commit labeled preprod but WILL include the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# commit labeled master.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note that if preprod and master point to the *same* commit,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this condition can never be satisfied.  In this particular")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# case (preprod == master) just allow the commit.  (We're not")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# committing *on* master or preprod -- we checked that above --")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# so this commit will not move either of *those* two labels.)")]),s._v("\n[ $master = $preprod ] && exit 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A new commit's immediate parent will be whatever the SHA-1 of HEAD")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is, so we simply check whether HEAD satisfies our conditions.")]),s._v("\nif git merge-base --is-ancestor $preprod HEAD; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ERROR: new commit will be a descendent of"')]),s._v(" 1>&2\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    branch preprod (commit $preprod)"')]),s._v(" 1>&2\n    exit 0\nfi\nif ! git merge-base --is-ancestor $master HEAD; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ERROR: new commit will not be a descendent of"')]),s._v(" 1>&2\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    branch master (commit $master)"')]),s._v(" 1>&2\n    exit 0\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How to identify merge commit in jenkins pipeline?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64080225",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ One simple way is : check if this commit has a second parent\nif git rev-parse --verify -q $commitid^2 > /dev/null; then\n   echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit $commitid is a merge commit"')]),s._v("\nelse\n   echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit $commitid is a simple commit"')]),s._v("\nfi\n\n▲ You can use that to find out if the current commit is the head of a pull request :\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fetch references starting with 'refs/pull/...',")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# store them locally next to the remote branches : 'refs/remotes/origin/pull/...'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   (note: you can choose whatever pattern you want to store these references locally)")]),s._v("\ngit fetch origin "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"+refs/pull/*:refs/remotes/origin/pull/*"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# check if one of these refs point to $commitid :")]),s._v("\ngit for-each-ref --points-at "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commitid"')]),s._v(" refs/remotes/orign/pull\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# you can use '--format' to customize the output :")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# for example you can remove the leading 'refs/remotes/origin/pull' to have a shorter output :")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git for-each-ref"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%(refname:lstrip=4)"')]),s._v(" --points-at "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commitid"')]),s._v(" refs/remotes/orign/pull\n42/head    # <- this means it is the current head of PR #42\n\ncurl \\\n  -H "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Accept: application/vnd.github.v3+json"')]),s._v(" \\\n  https://api.github.com/repos/{myuser}/{myrepo}/pulls/42\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: How to bypass pre-commit hooks after fixing merge conflicts?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/61239779",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse -q --verify MERGE_HEAD && false\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"quiet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quiet"}},[s._v("#")]),s._v(" 🔹 --quiet")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Merging without changing the working directory")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3409382",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nbranch=master\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or take an argument:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if [ $@ eq 1 ];")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#      branch="$1";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure the branch exists")]),s._v("\nif ! git rev-parse --verify --quiet --heads "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" > /dev/null; then\n     echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: branch $branch does not exist"')]),s._v("\n     exit 1\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure this could be a fast-forward   ")]),s._v("\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git merge-base HEAD $branch)"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse $branch)"')]),s._v(" ]; then\n    # find the branch name associated with HEAD\n    currentbranch=$(git symbolic-ref HEAD | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s@.*/@@'")]),s._v(")\n    # make the commit\n    newcommit=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Merge branch '$currentbranch'\"")]),s._v(" | git commit-tree $(git log -n 1 --pretty=%T HEAD) -p $branch -p HEAD)\n    # move the branch to point to the new commit\n    git update-ref -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"merge $currentbranch: Merge made by simulated no-ff"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/$branch"')]),s._v(" $newcommit\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: merging $currentbranch into $branch would not be a fast-forward"')]),s._v("\n    exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to detect if a branch exists using git command?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/31914717",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --quiet --verify $REVISION\n\nif git rev-parse --quiet --verify $REVISION > /dev/null; then\n    # whatever\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: Check if my current branch on local fork exists on remote upstream")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/66698435",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ While git rev-parse is great for things that do work, there are things that don"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t work.  For instance, here is what happens if I try to rev-parse a name that doesn'")]),s._v("t exist:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/upstream/foobranch")]),s._v("\nrefs/remotes/upstream/foobranch\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\n▲ If all works, we get this:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/origin/master")]),s._v("\n225365fb5195e804274ab569ac3cc4919451dc7f\n\n$ result=`git rev-parse refs/remotes/origin/master`\n$\n\n$ result=`git rev-parse refs/remotes/upstream/foobranch`\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\nvar=`cmd`\n\nvar=$(cmd)\n\nvar=`cmd1 `cmd2` -- `cmd3``\n\nvar=$(cmd1 $(cmd2) -- $(cmd3))\n\nvar=$(cmd) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unable to run the given command"')]),s._v("\n    exit 1\n}\n\n▲ for instance.  So with git rev-parse, if the upstream doesn't exist, we might want:\nresult=$(git rev-parse refs/remotes/upstream/$MY_BRANCH) || exit\n\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--quiet --verify")]),s._v("\n\nMY_BRANCH=$(git rev-parse --abbrev-ref HEAD) || exit\nhash=$(git rev-parse --quiet --verify refs/remotes/upstream/$MY_BRANCH) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"upstream/$MY_BRANCH does not exist"')]),s._v("\n    exit 1\n}\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do whatever you like with upstream/$MY_BRANCH here")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: List branches not merged to their upstream")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33946569",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Script\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git-bbu.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# List the local Branches Behind their Upstream branch, if any.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Usage: git bbu")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# To make a Git alias called 'bbu' out of this script,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# put the latter on your search path, and run")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   git config --global alias.bbu \\")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       '!sh git-bbu.sh'")]),s._v("\n\nif [ $# -ne 0 ]; then\n    printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s\\n\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"usage: git bbu"')]),s._v("\n    exit 1\nfi\n\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads | \\\n    while read ref; do\n      if (git rev-parse --verify --quiet "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("@{upstream} &&\n          ! git diff --quiet "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("..."),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("@{upstream}) \\\n              >/dev/null 2>&1; then\n        printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s\\n"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("\n      fi\n    done\n\n▲ Explanation\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads\n\n▲ References\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("h2",{attrs:{id:"short"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short"}},[s._v("#")]),s._v(" 🔹 --short")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to retrieve the hash for the current commit in Git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3319    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/949391",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n\ngit rev-parse --verify HEAD\n\ngit rev-parse --short HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Git command to display HEAD commit id?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 556    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1968001",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n\ngit rev-parse --short HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How to get the short sha for the github workflow?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59819441",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("      - name: Set outputs\n        id: vars\n        run: echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"::set-output name=sha_short::$(git rev-parse --short HEAD)"')]),s._v("\n      - name: Check outputs\n        run: echo ${{ steps.vars.outputs.sha_short }}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: How to increment docker tag automatically?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 19    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41098637",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v('docker tag <image> <image>:$(git rev-parse --short HEAD)"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: How do I find out which version I've got checked out in git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-describe.html"}},[s._v("git describe")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/9141541",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n\ngit rev-parse --short HEAD\n\ngit describe --long\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: How can I create a Docker image based on a git tag in the public Registry?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41098579",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v('docker tag <image> <image>:$(git rev-parse --short HEAD)"\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to extract columns about current commit in git local and remote repos")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49618817",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Name of current branch\ngit rev-parse --abbrev-ref HEAD\n\n▲ Hash of currently checked out commit (branch)\ngit rev-parse HEAD          # full hash\ngit rev-parse --short HEAD  # short hash\n\n▲ Remote tracking branch (upstream) of current branch\ngit rev-parse --abbrev-ref @{upstream}\n\n▲ Commit message subject of currently checked out commit\ngit log -1 --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h2",{attrs:{id:"not"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#not"}},[s._v("#")]),s._v(" 🔹 --not")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Find first ancestor commit in another branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13461275",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ To do this, take a look at the post-receive-email script that comes with your Git distribution (should be installed somewhere like /usr/share/doc/git-core/contrib/hooks/post-receive-email if you want a local copy). This has a long comment that describes how to find only commits that are new in a given branch, and haven't been seen in any others before:\n    # Consider this:\n    #   1 --- 2 --- O --- X --- 3 --- 4 --- N\n    #\n    # O is $oldrev for $refname\n    # N is $newrev for $refname\n    # X is a revision pointed to by some other ref, for which we may\n    #   assume that an email has already been generated.\n    # In this case we want to issue an email containing only revisions\n    # 3, 4, and N.  Given (almost) by\n    #\n    #  git rev-list N ^O --not --all\n    #\n    # The reason for the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"almost"')]),s._v(", is that the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--not --all"')]),s._v(" will take\n    # precedence over the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"N"')]),s._v(", and effectively will translate to\n    #\n    #  git rev-list N ^O ^X ^N\n    #\n    # So, we need to build up the list more carefully.  git rev-parse\n    # will generate a list of revs that may be fed into git rev-list.\n    # We can get it to make the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--not --all"')]),s._v(" part and then filter out\n    # the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^N"')]),s._v(" with:\n    #\n    #  git rev-parse --not --all | grep -v N\n    #\n    # Then, using the --stdin switch to git rev-list we have effectively\n    # manufactured\n    #\n    #  git rev-list N ^O ^X\n\n▲ There are more details to handle corner cases in the comment, and the rest of the script; but if the basic case is all you care about, this should give you the answer:\ngit rev-parse --not --all | grep -v I | git rev-list --stdin I\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("h2",{attrs:{id:"abbrev-ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#abbrev-ref"}},[s._v("#")]),s._v(" 🔹 --abbrev-ref")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Show just the current branch in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 754    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1418022",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref HEAD")]),s._v("\nmaster\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Prevent commits in master branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 191    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40465455",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\nbranch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --abbrev-ref HEAD)"')]),s._v("\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You can\'t commit directly to master branch"')]),s._v("\n  exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How can I sync documentation with Github Pages?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/16389663",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('### The following block runs after commit to "master" branch')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("###")]),s._v("\nif [ `git rev-parse --abbrev-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" ]; then\n\n    # Layout prefix is prepended to each markdown file synced\n    ###################################################################\n    LAYOUT_PREFIX="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'---\\r\\nlayout: index\\r\\n---\\r\\n\\r\\n'")]),s._v("\n\n    # Switch to gh-pages branch to sync it with master\n    ###################################################################\n    git checkout gh-pages\n\n    # Sync the README.md in master to index.md adding jekyll header\n    ###################################################################\n    git checkout master -- README.md\n    echo -e $LAYOUT_PREFIX > index.md\n    cat README.md >> index.md\n    rm README.md\n    git add index.md\n    git commit -a -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sync README.md in master branch to index.md in gh-pages"')]),s._v("\n\n    # Sync the markdown files in the docs/* directory\n    ###################################################################\n    git checkout master -- docs\n    FILES=docs/*\n    for file in $FILES\n    do\n        echo -e $LAYOUT_PREFIX | cat - "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$file"')]),s._v(" > temp && mv temp "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$file"')]),s._v("\n    done\n\n    git add docs\n    git commit -a -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sync docs from master branch to docs gh-pages directory"')]),s._v("\n\n    # Uncomment the following push if you want to auto push to\n    # the gh-pages branch whenever you commit to master locally.\n    # This is a little extreme. Use with care!\n    ###################################################################\n    # git push origin gh-pages\n\n    # Finally, switch back to the master branch and exit block\n    git checkout master\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: Git commit hooks per branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6376054",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("if [ `git rev-parse --abbrev-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"development"')]),s._v(" ]; then\n   echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"development-script"')]),s._v("\nelif [ `git rev-parse --abbrev-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"staging"')]),s._v(" ]; then\n   echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"staging-script"')]),s._v("\nelif [ `git rev-parse --abbrev-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"production"')]),s._v(" ]; then\n   echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"production-script"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: How to find the last branch checked out in git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 13    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40291733",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{-1}")]),s._v("\nrefs/heads/stash-exp\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-1}")]),s._v("\nstash-exp\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-2} && echo ok || echo fail")]),s._v("\nmaster\nok\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-3} && echo ok || echo fail")]),s._v("\nok\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: Avoiding merge conflicts when merging master into per-host customized branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39762768",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nbranch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: Git: how to check out the currently pushed branch in the pre-push hook?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/20047273",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("Information about what is to be pushed is provided on the hook's standard input\nwith lines of the form:\n\n   <local ref> SP <local sha1> SP <remote ref> SP <remote sha1> LF\n\nFor instance, if the command git push origin master:foreign were run the hook would\nreceive a line like the following:\n\n   refs/heads/master 67890 refs/heads/foreign 12345\n\nalthough the full, 40-character SHA-1s would be supplied.\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\nz40=0000000000000000000000000000000000000000\n\nIFS="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v("\nwhile read local_ref local_sha remote_ref remote_sha\ndo\n    current_sha1=$(git rev-parse HEAD)\n    current_branch=$(git rev-parse --abbrev-ref HEAD)\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v(" != $z40 ] && [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$local_sha"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_sha1"')]),s._v(" ]; then\n        git checkout $local_sha\n\n        # do unit testing...\n\n        git checkout $current_branch\n    fi\ndone\n\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: find active git branch of all 1st level subdirectories under a directory")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49282554",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("for i in */; do \\\n     (cd $i && echo -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${i}: "')]),s._v(" && git rev-parse --abbrev-ref HEAD); \\\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: Turning a git branch name into a valid docker image tag")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62906041",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("docker build . -t image_name:$(git rev-parse --abbrev-ref HEAD | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/[^a-zA-Z0-9]/-/g'")]),s._v(") \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: How to prevent direct commits to master branch using husky?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64060996",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\nbranch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --abbrev-ref HEAD)"')]),s._v("\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You can\'t commit directly to master branch"')]),s._v("\n  exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: How to push a file to past time?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24722927",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# commit")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# date YYYY-mm-dd HH:MM:SS")]),s._v("\n\ncommit="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" datecal="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v("\ntemp_branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"temp-rebasing-branch"')]),s._v("\ncurrent_branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --abbrev-ref HEAD)"')]),s._v("\n\ndate_timestamp=$(date -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$datecal"')]),s._v(" +%s)\ndate_r=$(date -R -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$datecal"')]),s._v(")\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"datecal=$datecal => date_timestamp=$date_timestamp date_r=$date_r"')]),s._v("\n\nif [[ -z "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" ]]; then\n    exit 0\nfi\n\ngit checkout -b "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$temp_branch"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v("\nGIT_COMMITTER_DATE="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$date_timestamp"')]),s._v(" GIT_AUTHOR_DATE="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$date_timestamp"')]),s._v(" git commit --amend --no-edit --date "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$date_r"')]),s._v("\ngit checkout "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_branch"')]),s._v("\ngit rebase --autostash --committer-date-is-author-date "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commit"')]),s._v(" --onto "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$temp_branch"')]),s._v("\ngit branch -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$temp_branch"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[t("strong",[s._v("12. Usage scenario: How to update a file across all branches in a Git repository")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45075092",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nif [ $# != 1 ]; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"usage: $0 <filename>"')]),s._v("\n    exit;\nfi\n\nbranches=`git for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads/\\*`\ncurr_branch=`git rev-parse --abbrev-ref HEAD`\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# echo "curr_branch:"$curr_branch')]),s._v("\n\nfilename=$1\nfile_in_repo=`git ls-files ${filename}`\n\nif [ ! "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$file_in_repo"')]),s._v(" ]; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"file not added in current branch"')]),s._v("\n    exit\nfi\n\nfor branch in ${branches[@]}; do\n    if [[ ${branch} != ${curr_branch} ]]; then\n        git checkout "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${branch}"')]),s._v("\n        git checkout "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${curr_branch}"')]),s._v(" -- "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$filename"')]),s._v("\n        git commit -am "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Added $filename in $branch from $curr_branch"')]),s._v("\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n    fi\ndone\ngit checkout "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${curr_branch}"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[t("strong",[s._v("13. Usage scenario: how to check a local branch tracking which remote branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/8831204",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout test_branch")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{u}")]),s._v("\norigin/remote_project001\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("14. Usage scenario: How to make jenkins build status badge dynamically show the branch of the its file is in")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/65493847",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("15. Usage scenario: GIT merge -keep specific parts of one branch and everything else of the other")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48449663",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("16. Usage scenario: Prepend partial branch name to commit message")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/67581619",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# get the current branch name")]),s._v("\ngit_branch_command = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse --abbrev-ref HEAD"')]),s._v("\nbranch_name, error, result = Open3.capture3(git_branch_command)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("17. Usage scenario: Convert full GIT ref to unambiguous short ref")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49054947",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git for-each-ref refs --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname)'")]),s._v(" | xargs git rev-parse --abbrev-ref\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("18. Usage scenario: How to get the full path of a file in a Git remote repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/47526678",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("is_git=false\nrelative_to_git="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ncheck="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ninitial=$(pwd)\ncurrent_dir="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ncount=0\n\nif [ ! $(git rev-parse --is-inside-work-tree 2> /dev/null) ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NOT INSIDE A VALID GIT REPOSITORY"')]),s._v("\n  return\nfi\n\ngit_remote=$(git config --get remote.origin.url)\ngit_remote=${git_remote%.git}\ngit_branch=$(git rev-parse --abbrev-ref HEAD)\n\nwhile [ $is_git=true ]\ndo\n  if [ -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".git"')]),s._v(" ]; then\n    break\n  fi\n  current_dir=${PWD##*/}\n  relative_to_git="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_dir/$relative_to_git"')]),s._v("\n  cd ../\ndone\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# echo "$git_remote/+/$git_branch/$relative_to_git"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# For andoid.googlesource.com uncomment the above and comment the below lines")]),s._v("\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$git_remote/tree/$git_branch/$relative_to_git"')]),s._v("\n\ncd $initial\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("p",[t("strong",[s._v("19. Usage scenario: Getting commit history from multiple repositories for some period")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/51412293",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("curl -s "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://api.github.com/search/repositories?q=org%3Agoogle%20test&per_page=100"')]),s._v(" | \\\n    jq -r "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.items[] | select(.name | startswith(\"test\")) | .clone_url'")]),s._v(" | \\\n    xargs -I{} git clone {}\n\nfor d in */; \ndo \n    ( cd $d && \\\n      echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"repo ${d::-1}"')]),s._v(" && \\\n      echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch $(git rev-parse --abbrev-ref HEAD)"')]),s._v(" && \\\n      git --no-pager log --oneline --before 2018-07-1 --after 2012-06-10; )\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("20. Usage scenario: How can I view the pull request URL for the current branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49198073",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("@echo off\n\nsetlocal \nfor /f "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tokens=*"')]),s._v(" %%a in ( \n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rev-parse --abbrev-ref HEAD'")]),s._v("\n) do ( \n    set branch=%%a\n    set url=https://bitbucket.org/my-company/repo/pull-requests/new?source=%%a^^^&t=1\n) \n\necho %url%\nendlocal \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("21. Usage scenario: Merge upstream without specifying branch name")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29598752",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name --abbrev-ref @{u}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("22. Usage scenario: Formal notation for Git (repository, branch, commit) tuple")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48738861",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git branch --contains <commit>\n\ngit rev-parse --abbrev-ref <branch>@{upstream}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("23. Usage scenario: How to get ALL hashes that are being committed in a pre-receive hook?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39006825",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("chomp(my @commits = `git rev-list $old..$new`);\nif ($?) {\n  warn "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-list $old..$new failed\\n"')]),s._v(";\n  ++$errors, next;\n}\n\nforeach my $sha1 (@commits) {\n  // validate some policy\n}\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nwhile read oldrev newrev refname\ndo\n    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" ]; then\n        # Do something\n    fi\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("24. Usage scenario: Check if my current branch on local fork exists on remote upstream")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/66698435",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ While git rev-parse is great for things that do work, there are things that don"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t work.  For instance, here is what happens if I try to rev-parse a name that doesn'")]),s._v("t exist:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/upstream/foobranch")]),s._v("\nrefs/remotes/upstream/foobranch\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\n▲ If all works, we get this:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse refs/remotes/origin/master")]),s._v("\n225365fb5195e804274ab569ac3cc4919451dc7f\n\n$ result=`git rev-parse refs/remotes/origin/master`\n$\n\n$ result=`git rev-parse refs/remotes/upstream/foobranch`\nfatal: ambiguous argument "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'refs/remotes/upstream/foobranch'")]),s._v(": unknown revision or path not in the working tree.\nUse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--'")]),s._v(" to separate paths from revisions, like this:\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git <command> [<revision>...] -- [<file>...]'")]),s._v("\n\nvar=`cmd`\n\nvar=$(cmd)\n\nvar=`cmd1 `cmd2` -- `cmd3``\n\nvar=$(cmd1 $(cmd2) -- $(cmd3))\n\nvar=$(cmd) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unable to run the given command"')]),s._v("\n    exit 1\n}\n\n▲ for instance.  So with git rev-parse, if the upstream doesn't exist, we might want:\nresult=$(git rev-parse refs/remotes/upstream/$MY_BRANCH) || exit\n\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--quiet --verify")]),s._v("\n\nMY_BRANCH=$(git rev-parse --abbrev-ref HEAD) || exit\nhash=$(git rev-parse --quiet --verify refs/remotes/upstream/$MY_BRANCH) || {\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"upstream/$MY_BRANCH does not exist"')]),s._v("\n    exit 1\n}\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do whatever you like with upstream/$MY_BRANCH here")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])]),t("p",[t("strong",[s._v('25. Usage scenario: How do I prevent git push-to-deploy from creating "refs" folder above working tree?')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36685964",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("26. Usage scenario: Github - Cleaning up branches after they're merged as part of a pull request")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show-ref.html"}},[s._v("git show-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/55864954",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git branch -d <branch-name>\ngit push origin :<branch-name>\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#---------------------------------")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Delete branch merged into master")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#---------------------------------")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Define your master branch name")]),s._v("\nmaster="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v("\n\ncurrentBranch=$(git branch | grep \\* | cut -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" -f2)\n\nif [ $currentBranch = $master ]; then\n    branchToDelete=$(git rev-parse --abbrev-ref $(git show-ref | grep $(git rev-parse HEAD^2)| cut -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' '")]),s._v(" -f 2))\n    if [ $branchToDelete != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" ]; then\n        git branch -d $branchToDelete\n        git push origin :$branchToDelete\n    fi \nfi\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[t("strong",[s._v("27. Usage scenario: How to extract columns about current commit in git local and remote repos")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49618817",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Name of current branch\ngit rev-parse --abbrev-ref HEAD\n\n▲ Hash of currently checked out commit (branch)\ngit rev-parse HEAD          # full hash\ngit rev-parse --short HEAD  # short hash\n\n▲ Remote tracking branch (upstream) of current branch\ngit rev-parse --abbrev-ref @{upstream}\n\n▲ Commit message subject of currently checked out commit\ngit log -1 --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("28. Usage scenario: How to auto include the newest git commit metadata into the commited files?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62813028",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("%% ------------------------------------------------  \n%  \n% Created on:       <date_of_creation>  \n% Author:           <author>  \n%  \n% Last modifier:    <modifier>  \n% Last modified:    <date_of_last_mod>  \n% On Branch:        <branch>  \n%  \n%%-------------------------------------------------\n\n▲ insert_changelog.sh:\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#If there are no .m files for which this would apply, suppress the this notification (If i get that right)")]),s._v("\nshopt -s nullglob\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Act on untracked files ")]),s._v("\nfiles=($(git ls-files --others --exclude-standard))\nfor item in ${files[*]}\ndo\n    #For time being, only consider matlab files\n    if [[ $item == *.m ]]\n    then\n        #Check whether the header already exists\n        read -r first_line < $item \n        first_cl_line="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%% ------------------------------------------------"')]),s._v("\n        if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$first_line"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$first_cl_line"')]),s._v(" ]\n        then\n            continue\n        else\n            #Include Changelog into file\n            cat changelog_template.txt > tempfile\n            cat $item >> tempfile \n            mv tempfile $item\n\n            #Fill in static fields of inception date and author\n            sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3,4d"')]),s._v(" $item\n            sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2 a % Created on:       $(date)"')]),s._v(" $item\n            sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"3 a % Author:           $(git config user.name)"')]),s._v(" $item\n\n            #Update current changelog\n            ./update_changelog.sh $item\n        fi\n    fi\ndone;\n\n▲ update_changelog.sh:\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nUSER=$(git config user.name)  \nBRANCH=$(git rev-parse --abbrev-ref HEAD)  \n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#Remove outdated lines and replace with updated ones.  ")]),s._v("\n   for item in $(git ls-files -m)  \n   do  \n       sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"5,8d"')]),s._v(" $item  \n       sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"5 a % Last Modifier:    $USER"')]),s._v(" $item  \n       sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"6 a % Last Modified:    $(date)"')]),s._v(" $item  \n       sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"7 a % On Branch:        $BRANCH"')]),s._v(" $item  \n       sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8 a %"')]),s._v(" $item  \n   done;\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br")])]),t("p",[t("strong",[s._v("29. Usage scenario: Finding un-pushed commits on current branch through a function")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64175175",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("notpushed = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!f() { branch=$(git rev-parse --abbrev-ref HEAD); git diff --stat --cached origin/$branch; }; f"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("30. Usage scenario: apply hook for a specific branch in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36131730",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ncurrent_branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_branch"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_branch"')]),s._v(" ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wrong branch"')]),s._v("\n  exit\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("31. Usage scenario: Remove files and code in dev branch only but keep them in master when merging")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48037148",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nbranch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("32. Usage scenario: Getting git pull request number from git hash?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62009399",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("$ hub pr list -f "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%I%n"')]),s._v(" -h "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --abbrev-ref HEAD)"')]),s._v("\n12345\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("33. Usage scenario: How to prevent developers to push on a particular branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36909229",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nlocked_branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'feature/foo'")]),s._v("\npush_branch=$(git rev-parse --abbrev-ref HEAD)\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$locked_branch"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$push_branch"')]),s._v(" ]\nthen\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Do not push this branch! Use feature/bar instead"')]),s._v("\n    exit 1\nfi\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("34. Usage scenario: Ignore files when merging branches")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41945090",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"symbolic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symbolic"}},[s._v("#")]),s._v(" 🔹 --symbolic")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: command to determine the upstream ref of the current HEAD?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15284176",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name @{u}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to find the last branch checked out in git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 13    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40291733",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{-1}")]),s._v("\nrefs/heads/stash-exp\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-1}")]),s._v("\nstash-exp\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-2} && echo ok || echo fail")]),s._v("\nmaster\nok\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-3} && echo ok || echo fail")]),s._v("\nok\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How read the current upstream for a git branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/46516201",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ TL;DR: use git rev-parse\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref master@{u}")]),s._v("\nweird/master\n\nfatal: no upstream configured for branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),s._v("\n\nif master_upstream=$(git rev-parse --abbrev-ref master@{u} 2>/dev/null); then\n    master_has_upstream=true\nelse\n    master_has_upstream=false\nfi\n\n▲ Explanation\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\nInitialized empty Git repository in .../tmp/tt/.git/\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git remote add origin git://github.com/git/git")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config remote.origin.fetch ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+refs/heads/*:refs/remotes/weird/*'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fetch")]),s._v("\nremote: Counting objects: 231294, done.\nremote: Compressing objects: 100% (663/663), done.\nremote: Total 231294 (delta 0), reused 662 (delta 0), pack-reused 230631\nReceiving objects: 100% (231294/231294), 93.03 MiB | 3.54 MiB/s, done.\nResolving deltas: 100% (170261/170261), done.\nFrom git://github.com/git/git\n * [new branch]          maint      -> weird/maint\n * [new branch]          master     -> weird/master\n * [new branch]          next       -> weird/next\n * [new branch]          pu         -> weird/pu\n * [new branch]          todo       -> weird/todo\n * [new tag]             v2.14.2    -> v2.14.2\n[lots more tags snipped]\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\nBranch master set up to track remote branch master from origin.\nAlready on "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status")]),s._v("\nOn branch master\nYour branch is up-to-date with "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'weird/master'")]),s._v(".\n\nnothing to commit, working tree clean\n\n[branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v("]\n    remote = origin\n    merge = refs/heads/master\n\n branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"$(git branch | grep '\\*' | cut -d' ' -f2-)\"")]),s._v("\n\nremote="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config "')]),s._v("branch.${branch}.remote"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\nremote_branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config "')]),s._v("branch.${branch}.merge"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" | cut -d/ -f3-)"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name master@{u}")]),s._v("\nrefs/remotes/weird/master\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --detach")])]),s._v("\nHEAD is now at ea220ee40... The eleventh batch for 2.15\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref HEAD")]),s._v("\nHEAD\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name HEAD")]),s._v("\nHEAD\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git symbolic-ref HEAD")]),s._v("\nfatal: ref HEAD is not a symbolic ref\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: Avoiding merge conflicts when merging master into per-host customized branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39762768",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nbranch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: how to check a local branch tracking which remote branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/8831204",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout test_branch")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{u}")]),s._v("\norigin/remote_project001\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: How do Git's @{upstream} and @{push} differ?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-switch.html"}},[s._v("git switch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59970785",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config push.default current")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config remote.pushdefault myfork")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git switch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -c")]),s._v(" mybranch origin/master")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{upstream}")]),s._v("\nrefs/remotes/origin/master\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{push}")]),s._v("\nrefs/remotes/myfork/mybranch\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to make jenkins build status badge dynamically show the branch of the its file is in")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/65493847",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: GIT merge -keep specific parts of one branch and everything else of the other")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48449663",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: Temporarily clearing untracked files before commit in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4108042",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Via: http://github.com/jwiegley/git-scripts/blob/master/pre-commit.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nif [ ! $(git rev-parse --symbolic-full-name HEAD) = refs/heads/master ]; then\n    exit 0\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These are the locations I keep my temporary source and build trees in")]),s._v("\nTMPDIR=$HOME/code/myproject-pre-commit\nMIRROR=$HOME/code/myproject-pre-commit-mirror\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exit with status 1 if any command below fails")]),s._v("\nset -e\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checkout a copy of the current index into MIRROR")]),s._v("\ngit checkout-index --prefix=$MIRROR/ -af\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove files from MIRROR which are no longer present in the index")]),s._v("\ngit diff-index --cached --name-only --diff-filter=D -z HEAD | \\\n    (cd $MIRROR && xargs -0 rm -f --)\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy only _changed files_ from MIRROR to TMPDIR, without copying timestamps.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This includes copying over new files, and deleting removed ones.  This way,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "make check" will only rebuild what is necessary to validate the commit.')]),s._v("\nrsync -rlpgoDOc --delete --exclude-from=.git-hooks/excludes $MIRROR/ $TMPDIR/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Everything else happens in the temporary build tree")]),s._v("\ncd $TMPDIR\n\nnosetests\n\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: How do I tell on GIT whether a reference is a branch or a tag?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21610463",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name v1.9-rc2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: Git: want to know whether a given string refers to a commit-ish or a (possibly remote) branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62340432",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("fullspell=`git rev-parse --symbolic-full-name $specifier --`\n\nif fullspell=`git rev-parse --symbolic-full-name $specifier --`; then\ncase $fullspell in\nrefs/heads/* | refs/remotes/*)\n        # it's a remote-tracking branch or a local branch\n        ;;\n?*)\n        # it"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s something else, but it'")]),s._v("s a legit refname\n        ;;\n*)\n        # there"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s no full spelling but the command succeeded. It'")]),s._v("s not a bare refname,\n        # but it does resolve to something (so e.g. master~3 would get here)\n        ;;\nesac\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("strong",[s._v("12. Usage scenario: Merge upstream without specifying branch name")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29598752",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name --abbrev-ref @{u}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("13. Usage scenario: how to maintain a production and development branches in git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/67898483",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("14. Usage scenario: How to get ALL hashes that are being committed in a pre-receive hook?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39006825",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("chomp(my @commits = `git rev-list $old..$new`);\nif ($?) {\n  warn "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-list $old..$new failed\\n"')]),s._v(";\n  ++$errors, next;\n}\n\nforeach my $sha1 (@commits) {\n  // validate some policy\n}\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nwhile read oldrev newrev refname\ndo\n    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" ]; then\n        # Do something\n    fi\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v('15. Usage scenario: How do I prevent git push-to-deploy from creating "refs" folder above working tree?')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36685964",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("    branch=$(git rev-parse --symbolic --abbrev-ref $refname)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("16. Usage scenario: How to make git merge's default --no-ff only for remotes?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21666573",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ The simplest test is to run git rev-parse --symbolic-full-name on it.  If the resulting name starts with refs/remotes/, the name is symbolic and names a remote branch:\nname_is_remote_branch() {\n    local full\n\n    full=$(git rev-parse --symbolic-full-name $1)\n    case $full in\n    refs/remotes/*) return 0;;\n    *) return 1;;\n    esac\n}\n\nif name_is_remote_branch origin/master; then\n    echo seems to work\nelse\n    echo oops\nfi\n\nname_is_remote_branch master || echo ok # master should not be "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"remote branch"')]),s._v("\n\n▲ What happens if we apply this test to a raw SHA-1 ID?\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -1")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --decorate")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --oneline")])]),s._v("\n676699a (origin/master, master) commit subject here\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[t("strong",[s._v("17. Usage scenario: apply hook for a specific branch in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36131730",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ncurrent_branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_branch"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_branch"')]),s._v(" ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wrong branch"')]),s._v("\n  exit\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("18. Usage scenario: Remove files and code in dev branch only but keep them in master when merging")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48037148",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\nbranch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("19. Usage scenario: Ignore files when merging branches")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41945090",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch=$(git rev-parse --symbolic --abbrev-ref HEAD)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"symbolic-full-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#symbolic-full-name"}},[s._v("#")]),s._v(" 🔹 --symbolic-full-name")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: command to determine the upstream ref of the current HEAD?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15284176",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name @{u}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to find the last branch checked out in git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 13    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40291733",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{-1}")]),s._v("\nrefs/heads/stash-exp\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-1}")]),s._v("\nstash-exp\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-2} && echo ok || echo fail")]),s._v("\nmaster\nok\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref @{-3} && echo ok || echo fail")]),s._v("\nok\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How read the current upstream for a git branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/46516201",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ TL;DR: use git rev-parse\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref master@{u}")]),s._v("\nweird/master\n\nfatal: no upstream configured for branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),s._v("\n\nif master_upstream=$(git rev-parse --abbrev-ref master@{u} 2>/dev/null); then\n    master_has_upstream=true\nelse\n    master_has_upstream=false\nfi\n\n▲ Explanation\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\nInitialized empty Git repository in .../tmp/tt/.git/\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git remote add origin git://github.com/git/git")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config remote.origin.fetch ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'+refs/heads/*:refs/remotes/weird/*'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fetch")]),s._v("\nremote: Counting objects: 231294, done.\nremote: Compressing objects: 100% (663/663), done.\nremote: Total 231294 (delta 0), reused 662 (delta 0), pack-reused 230631\nReceiving objects: 100% (231294/231294), 93.03 MiB | 3.54 MiB/s, done.\nResolving deltas: 100% (170261/170261), done.\nFrom git://github.com/git/git\n * [new branch]          maint      -> weird/maint\n * [new branch]          master     -> weird/master\n * [new branch]          next       -> weird/next\n * [new branch]          pu         -> weird/pu\n * [new branch]          todo       -> weird/todo\n * [new tag]             v2.14.2    -> v2.14.2\n[lots more tags snipped]\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\nBranch master set up to track remote branch master from origin.\nAlready on "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'master'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status")]),s._v("\nOn branch master\nYour branch is up-to-date with "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'weird/master'")]),s._v(".\n\nnothing to commit, working tree clean\n\n[branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v("]\n    remote = origin\n    merge = refs/heads/master\n\n branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"$(git branch | grep '\\*' | cut -d' ' -f2-)\"")]),s._v("\n\nremote="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config "')]),s._v("branch.${branch}.remote"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\nremote_branch="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config "')]),s._v("branch.${branch}.merge"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" | cut -d/ -f3-)"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name master@{u}")]),s._v("\nrefs/remotes/weird/master\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --detach")])]),s._v("\nHEAD is now at ea220ee40... The eleventh batch for 2.15\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref HEAD")]),s._v("\nHEAD\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name HEAD")]),s._v("\nHEAD\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git symbolic-ref HEAD")]),s._v("\nfatal: ref HEAD is not a symbolic ref\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: How do Git's @{upstream} and @{push} differ?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-switch.html"}},[s._v("git switch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59970785",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config push.default current")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config remote.pushdefault myfork")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git switch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -c")]),s._v(" mybranch origin/master")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{upstream}")]),s._v("\nrefs/remotes/origin/master\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{push}")]),s._v("\nrefs/remotes/myfork/mybranch\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: how to check a local branch tracking which remote branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/8831204",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout test_branch")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --abbrev")]),s._v("-ref"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --symbolic")]),s._v("-full-name @{u}")]),s._v("\norigin/remote_project001\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: Git: want to know whether a given string refers to a commit-ish or a (possibly remote) branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62340432",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("fullspell=`git rev-parse --symbolic-full-name $specifier --`\n\nif fullspell=`git rev-parse --symbolic-full-name $specifier --`; then\ncase $fullspell in\nrefs/heads/* | refs/remotes/*)\n        # it's a remote-tracking branch or a local branch\n        ;;\n?*)\n        # it"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s something else, but it'")]),s._v("s a legit refname\n        ;;\n*)\n        # there"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s no full spelling but the command succeeded. It'")]),s._v("s not a bare refname,\n        # but it does resolve to something (so e.g. master~3 would get here)\n        ;;\nesac\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: Temporarily clearing untracked files before commit in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4108042",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Via: http://github.com/jwiegley/git-scripts/blob/master/pre-commit.sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nif [ ! $(git rev-parse --symbolic-full-name HEAD) = refs/heads/master ]; then\n    exit 0\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These are the locations I keep my temporary source and build trees in")]),s._v("\nTMPDIR=$HOME/code/myproject-pre-commit\nMIRROR=$HOME/code/myproject-pre-commit-mirror\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exit with status 1 if any command below fails")]),s._v("\nset -e\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checkout a copy of the current index into MIRROR")]),s._v("\ngit checkout-index --prefix=$MIRROR/ -af\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove files from MIRROR which are no longer present in the index")]),s._v("\ngit diff-index --cached --name-only --diff-filter=D -z HEAD | \\\n    (cd $MIRROR && xargs -0 rm -f --)\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy only _changed files_ from MIRROR to TMPDIR, without copying timestamps.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This includes copying over new files, and deleting removed ones.  This way,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "make check" will only rebuild what is necessary to validate the commit.')]),s._v("\nrsync -rlpgoDOc --delete --exclude-from=.git-hooks/excludes $MIRROR/ $TMPDIR/\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Everything else happens in the temporary build tree")]),s._v("\ncd $TMPDIR\n\nnosetests\n\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: How do I tell on GIT whether a reference is a branch or a tag?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21610463",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name v1.9-rc2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: Merge upstream without specifying branch name")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29598752",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --symbolic-full-name --abbrev-ref @{u}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: apply hook for a specific branch in Git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36131730",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ncurrent_branch=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_branch"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_branch"')]),s._v(" ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wrong branch"')]),s._v("\n  exit\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: How to make git merge's default --no-ff only for remotes?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21666573",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ The simplest test is to run git rev-parse --symbolic-full-name on it.  If the resulting name starts with refs/remotes/, the name is symbolic and names a remote branch:\nname_is_remote_branch() {\n    local full\n\n    full=$(git rev-parse --symbolic-full-name $1)\n    case $full in\n    refs/remotes/*) return 0;;\n    *) return 1;;\n    esac\n}\n\nif name_is_remote_branch origin/master; then\n    echo seems to work\nelse\n    echo oops\nfi\n\nname_is_remote_branch master || echo ok # master should not be "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"remote branch"')]),s._v("\n\n▲ What happens if we apply this test to a raw SHA-1 ID?\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git log"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -1")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --decorate")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --oneline")])]),s._v("\n676699a (origin/master, master) commit subject here\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("h2",{attrs:{id:"all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[s._v("#")]),s._v(" 🔹 --all")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Find first ancestor commit in another branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13461275",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ To do this, take a look at the post-receive-email script that comes with your Git distribution (should be installed somewhere like /usr/share/doc/git-core/contrib/hooks/post-receive-email if you want a local copy). This has a long comment that describes how to find only commits that are new in a given branch, and haven't been seen in any others before:\n    # Consider this:\n    #   1 --- 2 --- O --- X --- 3 --- 4 --- N\n    #\n    # O is $oldrev for $refname\n    # N is $newrev for $refname\n    # X is a revision pointed to by some other ref, for which we may\n    #   assume that an email has already been generated.\n    # In this case we want to issue an email containing only revisions\n    # 3, 4, and N.  Given (almost) by\n    #\n    #  git rev-list N ^O --not --all\n    #\n    # The reason for the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"almost"')]),s._v(", is that the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--not --all"')]),s._v(" will take\n    # precedence over the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"N"')]),s._v(", and effectively will translate to\n    #\n    #  git rev-list N ^O ^X ^N\n    #\n    # So, we need to build up the list more carefully.  git rev-parse\n    # will generate a list of revs that may be fed into git rev-list.\n    # We can get it to make the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--not --all"')]),s._v(" part and then filter out\n    # the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^N"')]),s._v(" with:\n    #\n    #  git rev-parse --not --all | grep -v N\n    #\n    # Then, using the --stdin switch to git rev-list we have effectively\n    # manufactured\n    #\n    #  git rev-list N ^O ^X\n\n▲ There are more details to handle corner cases in the comment, and the rest of the script; but if the basic case is all you care about, this should give you the answer:\ngit rev-parse --not --all | grep -v I | git rev-list --stdin I\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("h2",{attrs:{id:"git-dir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-dir"}},[s._v("#")]),s._v(" 🔹 --git-dir")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Git submodule commit hooks")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 34    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15146529",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ If you have Git 2.10+ you can get the hooks directory by running:\n`git rev-parse --git-path hooks`\n\n▲ Pre Git 2.10+ you would want something like:\n`git rev-parse --git-dir`/hooks\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: git: changing an old commit message without creating conflicts")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 16    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/27699824",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\nREV=$1\nMESSAGE=$2\nFILTER="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"test $(echo '$GIT_COMMIT') = $(git rev-parse $REV) && echo $MESSAGE || cat\"")]),s._v("\ngit filter-branch --msg-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$FILTER"')]),s._v(" -- --all\n\ngit config alias.undo-filter-branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'! DIR=$(git rev-parse --git-dir); cp -r $DIR/refs/original/refs/ .git/; rm -r $DIR/refs/original/'")]),s._v("\ngit config alias.confirm-filter-branch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'! DIR=$(git rev-parse --git-dir); rm -r $DIR/refs/original/'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: Missing commits in repo on CircleCI container")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/44188746",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[[ ! -s \\"$(git rev-parse --git-dir)/shallow\\" ]] || git fetch --unshallow"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: How can I get git's "),t("code",[s._v(".git")]),s._v(" path from git itself?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48992724",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Use git rev-parse, which has options specifically for this:\ngit rev-parse --git-dir\n\ngit rev-parse --absolute-git-dir\n\n▲ (new in Git version 2.13.0), and:\ngit rev-parse --show-toplevel\n\ngit rev-parse --show-cdup\n\n▲ (note that its output is empty if you are already in the top level of the repository).  View your own documentation to find out which options your Git supports; most of these have been around since Git 1.7, though.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v('5. Usage scenario: how to sync a "shadow" git repository with a main repository "secretly"')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39369847",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("rem set Git to use the sub-developer's git repository\nset GIT_DIR=/path/to/sub/repository.com\n\nrem verify which repository that you are on\ngit rev-parse --git-dir\n\nrem pull the sub-developer's latest\ngit pull\n\nrem merge, commit, change, push, change branches, whatever\nrem ... when the code is the way you want it\n\nrem switch to client repository\nset GIT_DIR=/path/to/client/repository.com\n\nrem bring main repository up to date\ngit commit -m"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"changes brought over from sub-developer"')]),s._v("\n\nrem push the updated code to the client repository\ngit push\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: Exclude remotes from git log --graph")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23547914",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("temp=`mktemp -u`\ngit clone -s --bare `git rev-parse --git-dir` $temp\ngit --git-dir=$temp log --graph --decorate --oneline --branches --simplify-by-decoration\nrm -rf $temp\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to simulantenously work on multiple branches while waiting for tests to to run?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/19115378",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("sh -c 't=$(git rev-parse --git-dir) && export GIT_DIR=$(readlink -f $t) && \\\n    cd /tmp && mkdir test-xx && cd test-xx && git checkout -- . || \\\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"unable to check out copy into test dir"')]),s._v("'\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"git-path"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-path"}},[s._v("#")]),s._v(" 🔹 --git-path")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Git submodule commit hooks")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 34    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15146529",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ If you have Git 2.10+ you can get the hooks directory by running:\n`git rev-parse --git-path hooks`\n\n▲ Pre Git 2.10+ you would want something like:\n`git rev-parse --git-dir`/hooks\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Command to assert the current HEAD points to master?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/51727582",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("test "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(cat "')]),s._v("$(git rev-parse --git-path HEAD)"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ref: refs/heads/master"')]),s._v("\n\ntest "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(cat "')]),s._v("$(git rev-parse --git-path HEAD)"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ref: refs/heads/master"')]),s._v(" && echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD points to master"')]),s._v(" || echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HEAD does not point to master"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: Git: Preventing Commit During a Rebase")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49039695",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nset -e\nshopt -s extglob\n\nif [[ -d `git rev-parse --git-path rebase-merge` \\\n   || -d `git rev-parse --git-path rebase-apply` ]]; then\n  read -p "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Rebase in progress, continue? '")]),s._v("\n  [[ ${REPLY,,} == @(y|yes) ]]\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: Viewing the current commit's message during git rebase")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-am.html"}},[s._v("git am")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-worktree.html"}},[s._v("git worktree")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/53982686",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ TL;DR: check for git rev-parse --git-path rebase-merge/message and git rev-parse --git-path rebase-apply/msg in case you are in an added worktree.\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --git")]),s._v("-path HEAD")]),s._v("\n.git/HEAD\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git worktree add ../git2"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --detach")])]),s._v("\nPreparing worktree (detached HEAD 5d826e9729)\nHEAD is now at 5d826e9729 Git 2.20\n$ (cd ../git2; git rev-parse --git-path HEAD)\n[redacted]/git/.git/worktrees/git2/HEAD\n\nrebase-apply\nrebase-merge\n\n▲ (as always, use the git-path trick to locate the actual directories or individual files in them).  The files therein are initially symmetric, as the code just sets up a state directory and then drops files into it as needed.  The set of files may change in any future Git release; however, there's at least some hope of consistency due to contrib/completion/git-prompt.sh.  This looks inside rebase-merge first, if it exists, for:\nhead-name    the branch you were on when you started the rebase\nmsgnum       how many commits are already done (how far along are you)\nend          the total number of commits to do\ninteractive  if exists, means this is git rebase -i (vs git rebase -m)\n\n▲ If rebase-merge does not exist, it looks inside rebase-apply (if that exists) for:\nnext         how many commits are already done (how far along are you)\nlast         the total number of commits to do\nrebasing     if exists, means this is an ordinary git rebase, in which case:\n  head-name    the branch you were on when you started rebasing\napplying     if exists, means this is a git am without rebase\n\nMERGE_HEAD        a merge is in progress\nCHERRY_PICK_HEAD  a cherry-pick is in progress\nREVERT_HEAD       a revert is in progress\nBISECT_LOG        a bisect is in progress\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h2",{attrs:{id:"show-toplevel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-toplevel"}},[s._v("#")]),s._v(" 🔹 --show-toplevel")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How do you get the Git repository's name in some Git repository?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 202    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15716016",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("basename `git rev-parse --show-toplevel`\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Putting git hooks into repository")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 159    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3464399",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nHOOK_NAMES="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"applypatch-msg pre-applypatch post-applypatch pre-commit prepare-commit-msg commit-msg post-commit pre-rebase post-checkout post-merge pre-receive update post-receive post-update pre-auto-gc"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# assuming the script is in a bin directory, one level into the repo")]),s._v("\nHOOK_DIR=$(git rev-parse --show-toplevel)/.git/hooks\n\nfor hook in $HOOK_NAMES; do\n    # If the hook already exists, is executable, and is not a symlink\n    if [ ! -h $HOOK_DIR/$hook -a -x $HOOK_DIR/$hook ]; then\n        mv $HOOK_DIR/$hook $HOOK_DIR/$hook.local\n    fi\n    # create the symlink, overwriting the file if it exists\n    # probably the only way this would happen is if you're using an old version of git\n    # -- back when the sample hooks were not executable, instead of being named ____.sample\n    ln -s -f ../../bin/hooks-wrapper $HOOK_DIR/$hook\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How do I find out what Git thinks the top-level working directory is?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 49    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6748135",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --show-toplevel\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: How do I cd to the closest parent folder that has a .git folder with bash?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/44310225",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("gr() {\n    cd "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --show-toplevel)"')]),s._v("\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: How to set the root of git repository to vi/vim find path?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30171876",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("let &path .= "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('","')]),s._v(" . system("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"git rev-parse --show-toplevel | tr -d '\\\\n'\"")]),s._v(")\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: How can I get git's "),t("code",[s._v(".git")]),s._v(" path from git itself?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48992724",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Use git rev-parse, which has options specifically for this:\ngit rev-parse --git-dir\n\ngit rev-parse --absolute-git-dir\n\n▲ (new in Git version 2.13.0), and:\ngit rev-parse --show-toplevel\n\ngit rev-parse --show-cdup\n\n▲ (note that its output is empty if you are already in the top level of the repository).  View your own documentation to find out which options your Git supports; most of these have been around since Git 1.7, though.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to know all Bazel targets affected by a git commit?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64559165",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Under Apache 2.0 licence")]),s._v("\nCOMMIT_RANGE=${COMMIT_RANGE:-$(git merge-base origin/master HEAD)"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".."')]),s._v("}\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Go to the root of the repo")]),s._v("\ncd "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --show-toplevel)"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get a list of the current files in package form by querying Bazel.")]),s._v("\nfiles=()\nfor file in $(git diff --name-only ${COMMIT_RANGE} ); do\n  files+=($(bazel query $file))\n  echo $(bazel query $file)\ndone\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Query for the associated buildables")]),s._v("\nbuildables=$(bazel query \\\n    --keep_going \\\n    --noshow_progress \\\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kind(.*_binary, rdeps(//..., set(${files[*]})))"')]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Run the tests if there were results")]),s._v("\nif [[ ! -z $buildables ]]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Building binaries"')]),s._v("\n  bazel build $buildables\nfi\n\ntests=$(bazel query \\\n    --keep_going \\\n    --noshow_progress \\\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"kind(test, rdeps(//..., set(${files[*]}))) except attr('tags', 'manual', //...)\"")]),s._v(")\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Run the tests if there were results")]),s._v("\nif [[ ! -z $tests ]]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Running tests"')]),s._v("\n  bazel test $tests\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: How can I play a sound whenever I commit to Git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/17219541",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ntoplevel_path=`git rev-parse --show-toplevel`\nafplay -v 0.1 $toplevel_path/.git/hooks/happykids.wav > /dev/null 2>&1 &\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ntoplevel_path=`git rev-parse --show-toplevel`\n$toplevel_path/.git/hooks/post-commit.tweet\n$toplevel_path/.git/hooks/post-commit.playsound\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: How to create tag automatically in SourceTree")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[s._v("git tag")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33890643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/bash")]),s._v("\nversion=`git diff HEAD^..HEAD -- "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --show-toplevel)"')]),s._v("/package.json | grep "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^\\+.*version'")]),s._v(" | sed -s "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/[^0-9\\.]//g'")]),s._v("`\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$version"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" ]; then\n    git tag -a "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"v$version"')]),s._v(" -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"`git log -1 --format=%s`"')]),s._v("\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Created a new tag, v$version"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: How to browse back (cd ..) to parent until find a specific folder?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/56048850",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("cd `git rev-parse --show-toplevel`\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: howto find out which git submodule current directory belongs to")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-submodule.html"}},[s._v("git submodule")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/54637531",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("mytoplevel=`git rev-parse --show-toplevel`\nabovethat=`git -C "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$mytoplevel"')]),s._v("/.. rev-parse --show-toplevel`\n\ngit init git_repo; cd $_\nmkdir a/b; git init a/b/c; cd $_\nmkdir something; touch something/somefile;\ngit add .; git commit -m-\ncd `git -C .. rev-parse --show-toplevel`\ngit submodule add --name foo/bar ./a/b/c -- a/b/c\ngit add .; git commit -m-\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("12. Usage scenario: Show parents of uncommitted merge in git")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13844768",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\ngit --no-pager log -1\n\nWORKDIR=`git rev-parse --show-toplevel`\nif [ -f "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${WORKDIR}/.git/MERGE_HEAD"')]),s._v(" ]; then\n    for a in `cat "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${WORKDIR}/.git/MERGE_HEAD"')]),s._v(" | xargs` ; do\n        git --no-pager log -1 $a\n    done\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("13. Usage scenario: how can I find out if I'm inside a git submodule?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59019026",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("top=`git rev-parse --show-toplevel 2>&-` || exit\nif up=`git -C "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$top/.."')]),s._v(" rev-parse --show-toplevel 2>&-` \nthen    echo work tree is at ${top#$up/} in another work tree\n        at=`git -C "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$up"')]),s._v(" rev-parse :${top#$up/}` && echo ... which thinks $(git cat-file -t $at) $at should be checked out there\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("14. Usage scenario: How to check if the current repository is the top level git repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/52047313",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("toplevel=$(git rev-parse --show-toplevel)\nsuperproject=$(git rev-parse --show-superproject-working-tree)\n\nif [[ -z "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$superproject"')]),s._v(" ]]; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"submodule in $superproject"')]),s._v("\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"toplevel is $toplevel"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("15. Usage scenario: Git: Preserving current code state and last four commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[s._v("git tag")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/51501904",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nfunction gitConsolidation() {\n\n    # Default settings\n    numCommitsToKeep=4\n    branchName="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v("\n    path="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/home/steve/test/testgit"')]),s._v("\n\n    # Set working directory\n    cd $path\n\n    # Get git repo name\n    gitRepoName=$(basename `git rev-parse --show-toplevel`)\n\n    # Print default message\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"** Prepairing to consolidate current Git Repo: $gitRepoName **"')]),s._v("\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Branch: $branchName"')]),s._v("\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Path: $path"')]),s._v("\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Total past commits to keep: $numCommitsToKeep\\n"')]),s._v("\n\n    # Get required branch\n    git checkout $branchName\n\n    # Get size before consolidation\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Repo size before consolidation: $(du -hs)"')]),s._v(" \n\n    # Print current log list\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n* Git commits prior to consolidation *"')]),s._v("  \n    git log --pretty="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%H - %s"')]),s._v("\n\n    # Get initial commit hash\n    initialCommitHash=$(git rev-list --max-parents=0 HEAD)\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n* Found initial commit hash: $initialCommitHash *"')]),s._v("\n\n    # Get hash for commit to be consolidated with intiial commit\n    consCommitHash=$(git log --format=%H | head -$numCommitsToKeep | tail     -1)\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"* Found hash for commit to consolidate with initial commit: $consCommitHash *"')]),s._v("\n\n    # Get hash for latest commit\n    latestCommitHash=$(git log --format=%H | head -1)\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"* Found hash for latest commit $latestCommitHash *\\n"')]),s._v("\n\n    # Begin consolidation\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"* BEGIN: Git repo consolidation *"')]),s._v("\n\n    # Checkout commit to consolidate with initial commit\n    git checkout $consCommitHash\n\n    # Soft reset initial commit\n    git reset --soft $initialCommitHash\n\n    # Commit changes\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Consolidated commit $initialCommitHash -> $consCommitHash"')]),s._v("\n\n    # Set tag\n    git tag new_base\n\n    # Checkout\n    git checkout -b consolidated $latestCommitHash\n\n    # Rebase\n    git rebase --onto new_base $consCommitHash\n\n    # Get size after consolidation\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Repo size after consolidation: $(du -hs)"')]),s._v("\n\n    # Print current log list\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n * Git commits after consolidation *"')]),s._v("    \n    git log --pretty="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%H - %s"')]),s._v("\n\n    echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\n* END: Git repo consolidation *"')]),s._v("\n}\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Call function")]),s._v("\ngitConsolidation\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br")])]),t("p",[t("strong",[s._v("16. Usage scenario: How do I get a list of files that have changed in a git commit, but with an absolute path?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff-tree.html"}},[s._v("git diff-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36769557",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git diff --name-only <commit-ish>^! | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s|^|$(git rev-parse --show-toplevel)/|"')]),s._v("\n\ngit diff-tree --no-commit-id --name-only -r <commit-ish> | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"s|^|$(git rev-parse --show-toplevel)/|"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"show-superproject-working-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-superproject-working-tree"}},[s._v("#")]),s._v(" 🔹 --show-superproject-working-tree")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Git: Automatically commit submodule with the same message")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64110853",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("COMMIT_MSG=$(git log -1 --pretty="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'format:%B'")]),s._v(" HEAD)\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# I use zsh so $0 works for me. In bash BASH_SOURCE is correct")]),s._v("\nTOP=$(realpath $(dirname $0)/../../../..)\n\nGIT_INDEX_FILE_SAV=$GIT_INDEX_FILE\nunset GIT_INDEX_FILE\ngit --git-dir .git --work-tree . -C ${TOP} commit sub -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${COMMIT_MSG}"')]),s._v("\nGIT_INDEX_FILE=$GIT_INDEX_FILE_SAV\n\nTOP=$(git rev-parse --show-superproject-working-tree)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to check if the current repository is the top level git repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/52047313",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("toplevel=$(git rev-parse --show-toplevel)\nsuperproject=$(git rev-parse --show-superproject-working-tree)\n\nif [[ -z "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$superproject"')]),s._v(" ]]; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"submodule in $superproject"')]),s._v("\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"toplevel is $toplevel"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h2",{attrs:{id:"absolute-git-dir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#absolute-git-dir"}},[s._v("#")]),s._v(" 🔹 --absolute-git-dir")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How can I get git's "),t("code",[s._v(".git")]),s._v(" path from git itself?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48992724",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Use git rev-parse, which has options specifically for this:\ngit rev-parse --git-dir\n\ngit rev-parse --absolute-git-dir\n\n▲ (new in Git version 2.13.0), and:\ngit rev-parse --show-toplevel\n\ngit rev-parse --show-cdup\n\n▲ (note that its output is empty if you are already in the top level of the repository).  View your own documentation to find out which options your Git supports; most of these have been around since Git 1.7, though.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"is-inside-work-tree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-inside-work-tree"}},[s._v("#")]),s._v(" 🔹 --is-inside-work-tree")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to get the full path of a file in a Git remote repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/47526678",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("is_git=false\nrelative_to_git="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ncheck="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ninitial=$(pwd)\ncurrent_dir="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\ncount=0\n\nif [ ! $(git rev-parse --is-inside-work-tree 2> /dev/null) ]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"NOT INSIDE A VALID GIT REPOSITORY"')]),s._v("\n  return\nfi\n\ngit_remote=$(git config --get remote.origin.url)\ngit_remote=${git_remote%.git}\ngit_branch=$(git rev-parse --abbrev-ref HEAD)\n\nwhile [ $is_git=true ]\ndo\n  if [ -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".git"')]),s._v(" ]; then\n    break\n  fi\n  current_dir=${PWD##*/}\n  relative_to_git="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$current_dir/$relative_to_git"')]),s._v("\n  cd ../\ndone\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# echo "$git_remote/+/$git_branch/$relative_to_git"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# For andoid.googlesource.com uncomment the above and comment the below lines")]),s._v("\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$git_remote/tree/$git_branch/$relative_to_git"')]),s._v("\n\ncd $initial\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br")])]),t("h2",{attrs:{id:"is-bare-repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-bare-repository"}},[s._v("#")]),s._v(" 🔹 --is-bare-repository")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Is the clone repository created by "),t("code",[s._v("git clone")]),s._v(" without "),t("code",[s._v("--bare")]),s._v(" a repository with a working directory?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/38234945",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse --is-bare-repository \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"show-cdup"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-cdup"}},[s._v("#")]),s._v(" 🔹 --show-cdup")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How can I get git's "),t("code",[s._v(".git")]),s._v(" path from git itself?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48992724",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Use git rev-parse, which has options specifically for this:\ngit rev-parse --git-dir\n\ngit rev-parse --absolute-git-dir\n\n▲ (new in Git version 2.13.0), and:\ngit rev-parse --show-toplevel\n\ngit rev-parse --show-cdup\n\n▲ (note that its output is empty if you are already in the top level of the repository).  View your own documentation to find out which options your Git supports; most of these have been around since Git 1.7, though.\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"show-prefix"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#show-prefix"}},[s._v("#")]),s._v(" 🔹 --show-prefix")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to get the path of the current directory relative to root of the git repository?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 40    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39923104",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --show")]),s._v("-prefix")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[s._v("#")]),s._v(" 🔹None")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How do I 'overwrite', rather than 'merge', a branch on another branch in Git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 252    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4624383",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ You can use the "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ours'")]),s._v(" merge strategy (this links to octopus merge, you have to scroll down to next option; deeplinking to the correct section is not possible):\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout staging")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours email # Merge branches, but use our (=staging) branch head")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout email")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge staging")]),s._v("\n\n▲ I thought a bit more about this question and possible solutions. If you absolutely require the merge parents in the correct order, need to perform this action with a single command line invocation, and don't mind running plumbing commands, you can do the following:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --ff")]),s._v("-only $(git commit-tree"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Throw away branch 'A'\"")]),s._v(" -p A -p B B^{tree})\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} HEAD^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\n$ echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'original'")]),s._v(" | tee file1 file2 file3\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'initial commit'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch A")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch B")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout A")]),s._v("\n$ echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'A'")]),s._v(" > file1\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch A'")]),s._v(" file1\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout B")]),s._v("\n$ echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'B'")]),s._v(" > file2\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'change on branch B'")]),s._v(" file2\n\n▲ Now, let"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s try the strategy option (doesn'")]),s._v("t really matter if we use theirs or ours for this explanation):\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -X")]),s._v(" ours A")]),s._v("\n$ cat file*\nA\nB\noriginal\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")]),s._v(" ours A")]),s._v("\n$ cat file*\noriginal\nB\noriginal\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse A^{tree} B^{tree} merge-strategy^{tree} strategy-option^{tree}")]),s._v("\n3859ea064e85b2291d189e798bfa1bff87f51f3e\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n0389f8f2a3e560b639d82597a7bc5489a4c96d44\n5b09d34a37a183723b409d25268c8cb4d073206e\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: How to find the hash of branch in Git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 173    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/9110527",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse development")]),s._v("\n17f2303133734f4b9a9aacfe52209e04ec11aff4\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse origin/master")]),s._v("\nda1ec1472c108f52d4256049fe1f674af69e785d\n\ngit rev-parse master~3\ngit rev-parse HEAD@{2.days.ago}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: How do I get the commit id of the head of master in git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 113    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/5025316",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: Get hash of most recent git commit in Node")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 80    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/34518749",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("require("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'child_process'")]),s._v(").exec("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git rev-parse HEAD'")]),s._v(", function(err, stdout) {\n    console.log("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Last commit hash on this branch is:'")]),s._v(", stdout);\n});\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: git rebase interactive: squash merge commits together")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 55    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4138485",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git checkout my-feature\ngit reset --soft Y\ngit rev-parse f > .git/MERGE_HEAD\ngit commit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: How to find the current git branch in detached HEAD state")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 51    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6064223",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git log -n 1 --pretty=%d HEAD\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or equivalently:")]),s._v("\ngit show -s --pretty=%d HEAD\n\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(objectname) %(refname:short)'")]),s._v(" refs/heads | awk "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/^$(git rev-parse HEAD)/ {print \\$2}"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How do I read tagger information from a GIT tag?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 40    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cat-file.html"}},[s._v("git cat-file")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/22975719",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git cat-file tag <tagname>\n\nif git rev-parse $TAG^{tag} -- &>/dev/null\nthen\n    # Annotated tag\n    COMMIT=$(git rev-parse $TAG^{commit})\n    TAGGER=($(git cat-file tag $TAG | grep "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^tagger'")]),s._v("))\n    N=${#TAGGER} # Number of fields\n    DATE=${TAGGER[@]:$N-2:2} # Last two fields\n    AUTHOR=${TAGGER[@]:1:$N-3} # Everything but the first and last two\n    MESSAGE=$(git cat-file tag $TAG | tail -n+6)\nelif git rev-parse refs/tags/$TAG -- &>/dev/null\nthen\n    # Lightweight tag - just a commit, basically\n    COMMIT=$(git rev-parse $TAG^{commit})\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TAG: not a tag"')]),s._v(" >&2\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: How do I react to new tags in git hooks?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 37    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/5810488",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\n. $(dirname $0)/functions\n\nprocess_ref() {\n    oldrev=$(git rev-parse $1)\n    newrev=$(git rev-parse $2)\n    refname="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$3"')]),s._v("\n\n    set_change_type\n    set_rev_types\n    set_describe_tags\n\n    case "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$refname"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$rev_type"')]),s._v(" in\n      refs/tags/*,tag)\n        # annotated tag\n        refname_type="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"annotated tag"')]),s._v("\n        function="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"atag"')]),s._v("\n        short_refname=${refname##refs/tags/}\n        # change recipients\n        if [ -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$announcerecipients"')]),s._v(" ]; then\n          recipients="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$announcerecipients"')]),s._v("\n        fi\n      ;;\n    esac \n}\n\nwhile read REF; do process_ref $REF; done\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: Get SHA1 of latest remote commit")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-remote.html"}},[s._v("git ls-remote")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14135272",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse HEAD")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git ls-remote <url> <refs>")]),s._v("\n\n$ cd ~/github/scrapy/scrapy\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse HEAD")]),s._v("\n9f003a73daec59a73c23a2214b1b8d15a4391a2f\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git ls-remote git://github.com/scrapy/scrapy.git HEAD")]),s._v("\n9f003a73daec59a73c23a2214b1b8d15a4391a2f\n\n$ diff <(git ls-remote git://github.com/scrapy/scrapy.git HEAD) \\\n       <(git rev-parse HEAD) \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: find out if a git commit was checked in before or after another commit given the hashes")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14233620",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git log -1 --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%ci'")]),s._v(" <commit>\n\ngit rev-list <commitA> | grep $(git rev-parse <commitB>)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: Include Git commit hash and/or branch name in C/C++ source")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 17    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/44038455",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("GIT_HASH=`git rev-parse HEAD`\nCOMPILE_TIME=`date -u +"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%Y-%m-%d %H:%M:%S UTC'")]),s._v("`\nGIT_BRANCH=`git branch | grep "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"^\\*"')]),s._v(" | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^..//'")]),s._v("`\nexport VERSION_FLAGS=-DGIT_HASH="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\"$(GIT_HASH)\\""')]),s._v(" -DCOMPILE_TIME="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\"$(COMPILE_TIME)\\""')]),s._v(" -DGIT_BRANCH="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\"$(GIT_BRANCH)\\""')]),s._v("\n\nall:\n    g++ main.cpp $(VERSION_FLAGS)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("12. Usage scenario: How to get information where branch starts?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 12    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[s._v("git reflog")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4481159",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git reflog show <branch>\n\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname)'")]),s._v(" refs/heads/* | while read b; do\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse $b@{$date_time})"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$target_commit"')]),s._v(" ]; then\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branch $b contained commit $target_commit at $date_time"')]),s._v("\n    fi\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("13. Usage scenario: How to concatenate two git histories?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 12    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fast-import.html"}},[s._v("git fast-import")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fast-export.html"}},[s._v("git fast-export")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3219820",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git fetch ../old master:ancient_history\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-list master | tail"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 1")]),s._v("\nd7737bffdad86dc05bbade271a9c16f8f912d3c6\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse ancient_history")]),s._v("\n463d0401a3f34bd381c456c6166e514564289ab2\n\n$ echo d7737bffdad86dc05bbade271a9c16f8f912d3c6 \\\n       463d0401a3f34bd381c456c6166e514564289ab2 \\\n       > .git/info/grafts\n\necho $(git rev-list master | tail -n 1) $(git rev-parse ancient_history) > .git/info/grafts \n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fast-export"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --all")]),s._v(" > ../export")]),s._v("\n\n$ mkdir ../nuevo-complete\n\n$ cd ../nuevo-complete\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fast-import < ../export")]),s._v("\ngit-fast-import statistics: [...]\n\ngit filter-branch $(git rev-parse ancient_history)..HEAD \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("14. Usage scenario: How to get the tree hash for a given directory name?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/52656910",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD:path/to/directory/in/my/git\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("15. Usage scenario: How can I find empty git commits?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 11    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26691249",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("for sha in $(git rev-list --min-parents=1 --max-parents=1 --all)\ndo\n   if [ $(git rev-parse ${sha}^{tree}) == $(git rev-parse ${sha}^1^{tree} ) ]\n   then\n       echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${sha} will be pruned"')]),s._v("\n   fi\ndone\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("16. Usage scenario: How to get sha of current git commit from R")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/46377001",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("system("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse HEAD"')]),s._v(", intern=TRUE)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("17. Usage scenario: How to find commit hash from within a running docker image")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63178429",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("docker build --build-arg GIT_COMMIT=$(git rev-parse HEAD) -t my_image:$(git rev-parse HEAD) .\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("18. Usage scenario: How to get a commit id after a branch creation?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45461258",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Suppose you have the following situation:\nC0 --- C4 --- C5          <= master\n   \\\n    \\--- C1 --- C2 --- C3 <= B1\n\n▲ If you execute:\ngit log --oneline master..B1\n\nC3 COMMIT3-MESSAGE\nC2 COMMIT2-MESSAGE\nC1 COMMIT1-MESSAGE\n\n▲ Then if you execute:\ngit rev-parse C1^\n\nC0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("p",[t("strong",[s._v("19. Usage scenario: How do I check in files for building with git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[s._v("git stash")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/2164243",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This hook does two things:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  1. update the "info" files that allow the list of references to be')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     queries over dumb transports such as http")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  2. if this repository looks like it is a non-bare repository, and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     the checked-out branch is pushed to, then update the working copy.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     This makes "push" function somewhat similarly to darcs and bzr.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# To enable this hook, make this file executable by "chmod +x post-update".')]),s._v("\n\ngit-update-server-info\n\nis_bare=$(git-config --get --bool core.bare)\n\nif [ -z "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" ]\nthen\n    # for compatibility's sake, guess\n    git_dir_full=$(cd $GIT_DIR; pwd)\n    case $git_dir_full in */.git) is_bare=false;; *) is_bare=true;; esac\nfi\n\nupdate_wc() {\n    ref=$1\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Push to checked out branch $ref"')]),s._v(" >&2\n    if [ ! -f $GIT_DIR/logs/HEAD ]\n    then\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E:push to non-bare repository requires a HEAD reflog"')]),s._v(" >&2\n        exit 1\n    fi\n    if (cd $GIT_WORK_TREE; git-diff-files -q --exit-code >/dev/null)\n    then\n        wc_dirty=0\n    else\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:unstaged changes found in working copy"')]),s._v(" >&2\n        wc_dirty=1\n        desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"working copy"')]),s._v("\n    fi\n    if git diff-index --cached HEAD@{1} >/dev/null\n    then\n        index_dirty=0\n    else\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:uncommitted, staged changes found"')]),s._v(" >&2\n        index_dirty=1\n        if [ -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc"')]),s._v(" ]\n        then\n            desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc and index"')]),s._v("\n        else\n            desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"index"')]),s._v("\n        fi\n    fi\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$wc_dirty"')]),s._v(" -ne 0 -o "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$index_dirty"')]),s._v(" -ne 0 ]\n    then\n        new=$(git rev-parse HEAD)\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:stashing dirty $desc - see git-stash(1)"')]),s._v(" >&2\n        ( trap "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo trapped $$; git symbolic-ref HEAD \"'")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),s._v(" 2 3 13 15 ERR EXIT\n        git-update-ref --no-deref HEAD HEAD@{1}\n        cd $GIT_WORK_TREE\n        git stash save "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dirty $desc before update to $new"')]),s._v(";\n        git-symbolic-ref HEAD "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("\n        )\n    fi\n\n    # eye candy - show the WC updates :)\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Updating working copy"')]),s._v(" >&2\n    (cd $GIT_WORK_TREE\n    git-diff-index -R --name-status HEAD >&2\n    git-reset --hard HEAD)\n}\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),s._v(" ]\nthen\n    active_branch=`git-symbolic-ref HEAD`\n    export GIT_DIR=$(cd $GIT_DIR; pwd)\n    GIT_WORK_TREE=${GIT_WORK_TREE-..}\n    for ref\n    do\n        if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$active_branch"')]),s._v(" ]\n        then\n            update_wc $ref\n        fi\n    done\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br")])]),t("p",[t("strong",[s._v("20. Usage scenario: How to pull into not-the-current-branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/9747958",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch | grep ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'^*'")]),s._v("\n* SOMEBRANCH\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse OTHER_BRANCH origin/OTHER_BRANCH")]),s._v("\n7b9b8e57cf19964b60ebda0f03a1d5da3de9e2fe\n7b9b8e57cf19964b60ebda0f03a1d5da3de9e2fe\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fetch")]),s._v("\n7b9b8e5..1efca56  OTHER_BRANCH -> origin/OTHER_BRANCH\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse OTHER_BRANCH origin/OTHER_BRANCH")]),s._v("\n7b9b8e57cf19964b60ebda0f03a1d5da3de9e2fe\n1efca56c08b7a0f511a3951195656a798c56aa62\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v('21. Usage scenario: How to use the "colon slash" revision short form and still refer to a commit\'s parent?')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/37004618",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse $(git rev-parse :/<text>)^\n\ngit rev-parse HEAD^{/<text>}^\n\ngit rev-parse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"@^{/<text>}^"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or, more complex, as ^ is the windows escape sign:")]),s._v("\ngit rev-parse ^@^^{/<text>}^^\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("22. Usage scenario: Git lost track of the fact that I was merging")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63578457",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git update-ref MERGE_HEAD $(git rev-parse <target-branch>)\ngit merge --continue\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("23. Usage scenario: Jenkins + Git: Only build if PR introduced changes in subdirectory")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/58384666",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("> git fetch --no-tags --progress -- http://bitbucket.ccm.com:7990/scm/JUP/jt.git +refs/pull-requests/9/from:refs/remotes/origin/PR-9 \n> git fetch --no-tags --progress -- http://bitbucket.ccm.com:7990/scm/JUP/jt.git +refs/heads/master:refs/remotes/upstream/master\n\n> git fetch the PR ref, store it as "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'origin/PR-9'")]),s._v("\n> git fetch master ref, store it as "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'upstream/master'")]),s._v("\n\ndef boolean sourceChanged(String module) {\n    def target_branch = env.CHANGE_TARGET;\n    def pr_ref        = env.BRANCH_NAME;\n\n    if (target_branch == null) {\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No target branch defined..."')]),s._v(";\n        return true;\n    }\n\n    def TARGET = sh(returnStdout: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse upstream/${target_branch}"')]),s._v(").trim()\n    def HEAD   = sh(returnStdout: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse origin/${pr_ref}"')]),s._v(").trim()\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Checking for source changes between ${TARGET} (${target_branch}) and ${HEAD} (${pr_ref})..."')]),s._v(";\n    return sh(returnStatus: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git diff --exit-code --name-only ${TARGET}...${HEAD} {module}"')]),s._v(") == 1;\n}\n\ndef SOURCE_DIRS = [\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"A/"')]),s._v(",\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"X/"')]),s._v("\n];\n...\nwhen { expression { return sourceChanged(SOURCE_DIRS) } }\n...\ndef sourceChanged(ArrayList<String> source_dirs) {\n    def target_branch = env.CHANGE_TARGET;\n    def pr_ref        = env.BRANCH_NAME;\n\n    if (target_branch == null) {\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No target branch defined..."')]),s._v(";\n        return true;\n    }\n\n    def TARGET = sh(returnStdout: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse upstream/${target_branch}"')]),s._v(").trim()\n    def HEAD   = sh(returnStdout: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse origin/${pr_ref}"')]),s._v(").trim()\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Checking for source changes between ${TARGET} (${target_branch}) and ${HEAD} (${pr_ref})..."')]),s._v(";\n    for (String dir : source_dirs) {\n        def rc = sh(returnStatus: true, script: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git diff --name-only --exit-code ${TARGET}...${HEAD} ${dir}"')]),s._v(");\n        if (rc == 1) {\n            echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Changes detected in ${dir}!"')]),s._v(";\n            return true;\n        }\n    }\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No changes detected."')]),s._v(";\n    return false;\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br")])]),t("p",[t("strong",[s._v("24. Usage scenario: Get hash of submodule at previous version of main repo without checking out")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/50395503",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse some_tag:submodule\n\ntree=$(git rev-parse some_tag^{tree})\ngit ls-tree -r $tree\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("25. Usage scenario: How to properly commit in repository with Github Pages branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26120283",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Commit the generated HTML pages to the branch gh-pages.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Will not push them to GitHub.")]),s._v("\n\nset -e -v\n\ntreehash=$(./hash-tree.py "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${1:-_build/html}"')]),s._v(")\nparent=$(git rev-parse gh-pages)\n\nmsg="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Regenerated docs for $(git rev-parse HEAD)"')]),s._v("\ncommithash=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$msg"')]),s._v(" | git commit-tree $treehash -p $parent)\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Updating gh-pages to $commithash"')]),s._v("\ngit update-ref refs/heads/gh-pages "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$commithash"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("26. Usage scenario: How do I get the ID of the last push in git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/9653843",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v(" git rev-parse origin/master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("27. Usage scenario: How include git branch name in apk file name automatically")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39654630",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("def changeApkName = { variant ->\n    variant.outputs.each { output ->\n        def apk = output.outputFile;\n        def newName = androidApplicationName;\n        def branch = getGitRevParseInfo("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--abbrev-ref"')]),s._v(");\n        if (variant.buildType.name == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"release"')]),s._v(") {\n            newName += "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-v"')]),s._v(" + variant.mergedFlavor.versionName + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" + branch + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-release.apk"')]),s._v(";\n        } else {\n            newName += "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-v"')]),s._v(" + variant.mergedFlavor.versionName + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v(" + branch + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".apk"')]),s._v(";\n        }\n\n        if (!output.zipAlign) {\n            newName = newName.replace("),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('".apk"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-unaligned.apk"')]),s._v(");\n        }\n        output.outputFile = new File(apk.parentFile, newName);\n\n        println "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'INFO: Set outputFile to '")]),s._v(" + output.outputFile + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" for ["')]),s._v(" + output.name + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"]"')]),s._v("\n    }\n}\n\ndef getGitRevParseInfo(what) {\n    def cmd = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git rev-parse "')]),s._v(" + what + "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" HEAD"')]),s._v("\n    def proc = cmd.execute()\n    proc.text.trim()\n}\n\nandroid {\n        applicationVariants.all { variant ->\n            variant.outputs.each { output ->\n                changeApkName(variant)\n            }\n        }\n    }\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br")])]),t("p",[t("strong",[s._v("28. Usage scenario: git submodule reference not show current branch, but show commit hash")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49657454",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Submodules are designed to be detached\n$ cat .gitmodules\n[submodule "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path/to/sub1"')]),s._v("]\n        path = path/to/sub1\n        url = ssh://one.example.com/repo1.git\n\n[submodule "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"path2/sub2"')]),s._v("]\n        path = path2/sub2\n        url = ssh://two.example.com/repo2.git\n\n▲ Names of commits\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rev-parse master")]),s._v("\n0afbf6caa5b16dcfa3074982e5b48e27d452dbbb\n\n▲ Conclusion (or is it?)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])]),t("p",[t("strong",[s._v("29. Usage scenario: Creating Git alias that gets the last commit")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/5993921",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git config"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --global")]),s._v(" alias.last-commit ")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"rev-parse HEAD"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git last-commit")]),s._v("\ndc1ac14864ecb3dd27f934ba964b030cfedf234a\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("30. Usage scenario: git get conflicts from past merge without running merge once again")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-difftool.html"}},[s._v("git difftool")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15443177",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ If you want to look at what the merge did you can do\ngit show <hash-of-merge-commit>\n\n▲ If you want to redo the entire merge you do\ngit checkout <branch-that-you-merged-to>\ngit reset --hard <hash-of-the-commit-just-before-the-merge>\ngit merge <branch-that-you-merged-in>\n\n▲ If you want to redo the merge and then compare the second merge to the first merge (to consider if it was better) you can do:\ngit checkout <branch-that-you-merged-to>\ngit rev-parse HEAD\n\ngit reset --hard <hash-of-the-commit-just-before-the-merge>\ngit merge <branch-that-you-merged-in>\n\ngit difftool <hash-of-commit-noted-above>\n\n▲ If you felt that the original merge was better, you can do\ngit reset --hard <hash-of-commit-noted-above>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[t("strong",[s._v("31. Usage scenario: GIT hook to prevent an experimental branch pushed to a release, or master branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[s._v("git tag")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13384768",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("refname="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\noldrev="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v("\nnewrev="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$3"')]),s._v("\ncase "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$refname"')]),s._v(" in\n  refs/heads/RELEASE|refs/heads/MASTER)\n    for forbidden in $(git tag -l "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'forbidden/*'")]),s._v("); do\n      if [ $(git merge-base "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$forbidden"')]),s._v(" $newrev) = $(git rev-parse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$forbidden"')]),s._v(") ]; then\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Push to $refname contains commit $forbidden"')]),s._v(" >&2\n        exit 1\n      fi\n    done\n    ;;\nesac\nexit 0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("32. Usage scenario: How to split a git repository into recent and older commits at a specific commit point, preserving branches?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/48396032",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ First create a branch for the historical commits\ngit branch history $TRUNCPOINT\ngit push project-history history:master\ngit push project-history A\n\ngit log --graph --oneline --decorate --all\n* fdc8f84 (A) branchA a1\n| * 7237a3e (HEAD -> master) fourth\n| * 55be55d third\n|/  \n* 26555d8 second\n* 5a68ca2 first\n\n▲ Create a base commit to serve as the parent for the recent commits\nMESSAGE="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Get history from historical repository"')]),s._v("\nBASECOMMIT=`echo $MESSAGE | git commit-tree ${TRUNCPARENT}^{tree}`\n\n▲ Split the repository by grafting the TRUNCPARENT onto BASECOMMIT\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${TRUNCPOINT} ${BASECOMMIT}"')]),s._v(" > .git/info/grafts\ngit filter-branch -- --all\ngit push project-recent master\ngit push project-recent B\n\ngit log --graph --oneline --decorate --all\n* 2335aeb (B) branchB b2\n* 2bb7ea3 branchB b1\n| * 83c3ae9 (HEAD -> master) sixth\n|/  \n* 25931c5 fifth\n* 1e1e201 fourth\n* a7f3373 Get history from historical repository\n\n▲ Fully reproduced example bash script\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\nWORKDIR=${PWD}\n\ncreate_repos () {\n    rm -rf repo-split-example repo-split-recent repo-split-history\n    # Create the repo to be split\n    example_repo\n\n    # Create the repo to contain the historical commits\n    HISTREPO="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"file://${WORKDIR}/repo-split-history"')]),s._v("\n    mkdir ../repo-split-history\n    cd ../repo-split-history/\n    git init --bare\n    cd ../repo-split-example\n    git remote add project-history $HISTREPO\n\n    # Create the repo to contain the recent commits\n    RECEREPO="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"file://${WORKDIR}/repo-split-recent"')]),s._v("\n    mkdir ../repo-split-recent\n    cd ../repo-split-recent/\n    git init --bare\n    cd ../repo-split-example\n    git remote add project-recent $RECEREPO\n}\n\nexample_repo () {\n    # Part I: set up a test repo with our example commits\n    mkdir repo-split-example\n    cd repo-split-example/\n    git init\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"We want to split the repository into project-recent and project-history portions, following the instructions at https://git-scm.com/book/en/v2/Git-Tools-Replace., but also including branches."')]),s._v(" > README.md\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v("\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"First commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first"')]),s._v("\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Second commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"second"')]),s._v("\n\n    git checkout -b A HEAD\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch A change."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchA a1"')]),s._v("\n\n    git checkout master\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Third commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"third"')]),s._v("\n    TRUNCPARENT=`git rev-parse HEAD`\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Fourth commit."')]),s._v(" >> README.md \n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fourth"')]),s._v("\n    TRUNCPOINT=`git rev-parse HEAD`\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Fifth commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fifth"')]),s._v("\n    FIFTH=`git rev-parse HEAD`\n\n    git checkout -b B HEAD\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch B change. b1"')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchB b1"')]),s._v("\n    B1=`git rev-parse HEAD`\n\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Add Branch B change. b2"')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"branchB b2"')]),s._v("\n    B2=`git rev-parse HEAD`\n\n    git checkout master\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Sixth commit."')]),s._v(" >> README.md\n    git add README.md\n    git commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"sixth"')]),s._v("\n\n    # Now we have a repo with the requisite structure, ready to be split\n    git log --graph --all --oneline --decorate\n}\n\n\nsplit_repo () {\n    # Part II: Split the git repo into historical and current halves at $TRUNCPOINT\n    # Following guidelines at https://git-scm.com/book/en/v2/Git-Tools-Replace\n\n    # First create a branch for the historical commits\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Branching history at $TRUNCPOINT"')]),s._v("\n    git branch history $TRUNCPOINT\n    git log --graph --oneline --decorate history A\n\n    # Now copy the history repo to the remote HISTREPO repository\n    git push project-history history:master\n    git push project-history A\n\n    # Now to split the repo to get the recent history from TRUNCPOINT to HEAD of master\n    # Create a base commit for the new new recent history\n    MESSAGE="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Get history from historical repository at $HISTREPO"')]),s._v("\n    BASECOMMIT=`echo $MESSAGE | git commit-tree ${TRUNCPARENT}^{tree}`\n\n    # Split the repository by grafting the TRUNCPARENT onto BASECOMMIT\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${TRUNCPOINT} ${BASECOMMIT}"')]),s._v(" > .git/info/grafts\n    git filter-branch -- --all\n\n    # Finally, push the current rewritten master and associated branches to a new repository\n    git push project-recent master\n    git push project-recent B\n}\n\ncreate_repos\nsplit_repo \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br")])]),t("p",[t("strong",[s._v("33. Usage scenario: Get the previous raw file from the blob object(hash)")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/44476525",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse 9f38e2d9e6ca81341fecf82d881cf629effb4be2^:README.md\n\ngit show 9f38e2d9e6ca81341fecf82d881cf629effb4be2^:README.md\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("34. Usage scenario: discovering merged git branches on repositories that use squash by default?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64288685",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse remote/main^{tree}\n\ngit rev-parse feature^{tree}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("35. Usage scenario: Get commit where merged branch forked from (with intermediate merge)")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49310657",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("m=11c63bc  # this is the merge\np1=$(git rev-parse ${m}^1)\np2=$(git rev-parse ${m}^2)\n\ngit merge-base --all $p1 $p2\n\nmbases=$(git merge-base --all ${m}^1 ${m}^2)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("strong",[s._v("36. Usage scenario: How to get timestamp-neutral git hash from a given commit hash")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/38934737",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse $CommitHash^{tree}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("37. Usage scenario: git: reliably switching to a detached HEAD and then restore HEAD later, all from a script")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3467576",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If HEAD is a sym-ref, the first assignment will work")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# otherwise, it's detached, so get the SHA1 with rev-parse")]),s._v("\nif ! head=$(git symbolic-ref HEAD 2>&1); then\n    head=$(git rev-parse HEAD)\nfi\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# trim a refs/heads/ prefix; no-op otherwise")]),s._v("\nhead=${head#refs/heads/}\n\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now go on and do your stuff, test, whatever you like")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# then return to where you were")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This will ERASE ANY LOCAL CHANGES.")]),s._v("\ngit checkout -f $head\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[t("strong",[s._v("38. Usage scenario: How to move E..H commits into a separate repository?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13376022",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("cd /path/to/repo\ngit checkout -b newbranch special\ngit rev-parse E > .git/info/grafts\ngit filter-branch\nrm .git/info/grafts\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("39. Usage scenario: How to get revision number of latest commit in master branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/58085463",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v('40. Usage scenario: How to "dereference" a string to a git sha1 hash?')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/8500312",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("41. Usage scenario: How to print latest commit id of kernel code in kernel log?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/18610199",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("gcc main.c -DKERNEL_LAST_COMMIT="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\\"$(cd /kernel/source/path ; git rev-parse HEAD)\\""')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("42. Usage scenario: How can I run the makefile on every git branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clean.html"}},[s._v("git clean")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/7876869",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fetch updates, but don't merge yet")]),s._v("\ngit fetch    # origin is default\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# list all branches")]),s._v("\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" refs/heads |\nwhile read branch; do\n    # if the branch is not the same as the remote branch...\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse $branch)"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse origin/$branch)"')]),s._v(" ]; then\n         # only continue to the next step on successful results\n         git checkout $branch &&\n         git pull &&\n         (make &&\n         cp executable /somewhere/else;\n         make clean)\n         # except always make clean as long as we tried to make\n         #\n         # you might also consider a hard reset and clean, to guarantee things\n         # are safe for the next checkout\n    fi\ndone\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# die hard on unexpected checkout/pull failures")]),s._v("\nif ! (git checkout $branch && git pull); then\n    exit 1\nfi\nif make; then\n    cp executable /somewhere/else\nelse\n    # report a build failure?\nfi\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# clean up no matter what")]),s._v("\ngit clean -xdf\ngit reset --hard\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("p",[t("strong",[s._v("43. Usage scenario: Pruning old Git commits without rebasing")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-repack.html"}},[s._v("git repack")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[s._v("git reflog")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[s._v("git filter-branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-prune.html"}},[s._v("git prune")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[s._v("git gc")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/47293861",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v(" git rev-parse HEAD~100 > .git/info/grafts\n\n git filter-branch -- --all\n\ngit reflog expire --expire=now --all\ngit gc --prune=now\ngit gc --aggressive --prune=now\ngit repack -Ad      # kills in-pack garbage\ngit prune           # kills loose garbage\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("44. Usage scenario: How can I check out only a part of a git repository during a bamboo build?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[s._v("git tag")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-mktree.html"}},[s._v("git mktree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10457397",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ Easiest is probably to have whoever's hosting the repo tag and commit the particular tree you want.  For instance,\ngit tag quickie $(git commit-tree $(git rev-parse HEAD:path/to/dir) </dev/null)\n\ngit fetch upstream quickie\n\n▲ If you want the upstream repo to automatically track a subtree on a branch, you can do (a suitably decrypted version of) something like this:\nsed -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'s,^[^ ]* [^ ]* refs/heads/master$,git update-ref refs/heads/master-subtree -m "Auto-tracking master" $(git commit-tree master:subtree -m "Auto-tracking master subtree" $(test -r refs/heads/master-subtree \\&\\& echo -p refs/heads/master-subtree)),p\'')]),s._v(" | sh -x\n\nmkdir ~/tryitout && cd ~/tryitout && git init foo && git init bar --bare\ncat >bar/hooks/post-receive <<"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'EOF'")]),s._v("\nsed -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'s,^[^ ]* [^ ]* refs/heads/master$,git update-ref refs/heads/master-subtree -m "Auto-tracking master" $(git commit-tree master:subtree -m "Auto-tracking master subtree" $(test -r refs/heads/master-subtree \\&\\& echo -p refs/heads/master-subtree)),p\'')]),s._v(" | sh -x\nEOF\nchmod a+x bar/hooks/post-receive\ncd foo\nmkdir subtree && touch subtree/oooo && git add . && git commit -am-\ngit push ../bar master\n\n▲ If you're sharing a filesystem with the other repo, you can do this:\ngit clone --no-checkout /path/to/local/repo/.git subtree\ncd subtree\ngit commit-tree origin/rev:subtree </dev/null | xargs git checkout -B peek\n\ngit mktree </dev/null | xargs git commit-tree | xargs git checkout -b empty\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[t("strong",[s._v("45. Usage scenario: Using git diff to generate the patch file")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60896340",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse mainline\n\ngit rev-parse origin/mainline\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("46. Usage scenario: How to handle nested git repositories?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-tree.html"}},[s._v("git ls-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/37243167",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git ls-files -s|grep ^16            # ls-files -s output: mode id stage path\n\ngit ls-tree -r $id|grep ^16         # ls-tree -r output:  mode type id path\n\ngit rev-parse :path/to/it           # from index i.e. last add/checkout/reset/etc \ngit rev-parse $id:path/to/it        # from $id, e.g. `master` or `3fac3`\n\n(cd "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$submodule"')]),s._v("; git rev-parse HEAD)\n\n(id=`git rev-parse :"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$submodule"')]),s._v("` && cd "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$submodule"')]),s._v(" && git checkout $id)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("47. Usage scenario: How to squash all merges in a branch?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/27514988",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git commit --amend -C $(git rev-parse $rev^2)\n\ngit checkout A~0\n\nfor rev in $(git rev-list  HEAD..branch-name --first-parent --reverse)\ndo\n    if [[ $(git show --summary --format="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%P"')]),s._v(" $rev | wc -w ) -gt 1 ]]\n    then\n        git cherry-pick $rev --mainline 1\n        # git commit --amend -C $(git rev-parse $rev^2)\n    else\n        git cherry-pick $rev\n    fi\ndone\n\ngit branch -f branch-name HEAD\ngit checkout branch-name\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br")])]),t("p",[t("strong",[s._v("48. Usage scenario: Reference directory from master branch on gh-pages branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10791074",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git checkout master -- path/to/my/docs/dir\n\ngit ls-files $(git rev-parse master) -- path/to/my/docs/dir\n\ngit show master:path/to/my/docs/dir/somefile.txt\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("49. Usage scenario: How to get a result from a Puppet provisioner")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/19426674",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("exec { "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"send-hipchat-message"')]),s._v(" :\n   command     => "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo \\"SHA: $$(git rev-parse HEAD)\\""')]),s._v(",\n   path        => "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/bin"')]),s._v(",\n   subscribe   => Vcsrepo["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/opt/ourcompany/distribution"')]),s._v("],\n   require     => Vcsrepo["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/opt/ourcompany/distribution"')]),s._v("],\n   cwd         => "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/opt/ourcompany/distribution'")]),s._v(",\n   refreshonly => true\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("50. Usage scenario: How do you compare commit messages of two git branches to figure out the difference?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23166717",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse master~^{tree}\ngit rev-parse master~2^{tree}\ngit rev-parse master~3^{tree}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("51. Usage scenario: How do I find the version of Git repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/50663742",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("cd /path/to/your/local/cloned/repo\ngit rev-parse origin/master\ngit rev-parse FETCH_HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("52. Usage scenario: Extraction of diff hash from GITHub commit url")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/43997626",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse 3db08c3ce067ae92af324b2d8bd6b5e2\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("53. Usage scenario: Check if there are new commits since the latest tag")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/61720445",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("      - name: Get Git SHA\n        id: gitsha\n        run: echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"::set-output name=gitsha::$(git rev-parse HEAD)"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("- uses: actions/checkout@v2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("- run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*")]),s._v("\n\n      - name: Get yesterdays date\n        id: ydate\n        run: echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"::set-output name=ydate::$(date -d "')]),s._v("yesterday 13:00"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\" +'%Y-%m-%d')\"")]),s._v("\n      - uses: actions/checkout@v2\n        with:\n          ref: refs/tags/${{ steps.ydate.outputs.ydate }}\n      - name: Get Yesterdays Git SHA\n        id: ygitsha\n        run: echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"::set-output name=ygitsha::$(git rev-parse HEAD)"')]),s._v("\n\nif git rev-parse "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TAG"')]),s._v(" >/dev/null 2>&1; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tag exists"')]),s._v(";\nelse\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tag does not exist"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br")])]),t("p",[t("strong",[s._v("54. Usage scenario: Remove a commit and related changes from a branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15904953",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rebase --onto HEAD^^ HEAD $BRANCH\n\nTIP=`git rev-parse HEAD`\ngit reset --hard HEAD^^\ngit cherry-pick $TIP\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("55. Usage scenario: Are git tags always based on fixed commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/25957536",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse <tag>~0\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("56. Usage scenario: Git Branch, Rebase, Merge & Tags")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14995133",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git rev-parse TAG\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("57. Usage scenario: How to properly get list of remotes files before the pull")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24245706",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch_name=`git branch | grep ^\\* | awk "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $2}'")]),s._v("`\nold_commit=$(git rev-parse origin/${branch_name})\ngit fetch\ngit diff --stat origin/${branch_name}\ngit update-ref refs/remotes/origin/${branch_name} $old_commit\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("58. Usage scenario: How to roll back in git and start again (keeping the history and the merges in between)")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63629898",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("A---B---C <<< master <<< HEAD\n\ngit branch backup-before-cleaning\ngit reset --hard A\ngit push --force origin HEAD\n\n  B---C <<< backup-before-cleaning\n /\nA <<< master <<< HEAD\n\nA---B---C <<< master <<< HEAD\n\ngit reset --hard $(git commit-tree -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Return to A"')]),s._v(" -p $(git rev-parse HEAD) $(git rev-parse A^{tree}))\n\nA---B---C---D <<< master <<< HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);