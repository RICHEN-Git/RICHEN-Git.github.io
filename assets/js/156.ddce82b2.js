(window.webpackJsonp=window.webpackJsonp||[]).push([[156],{584:function(t,e,s){"use strict";s.r(e);var a=s(19),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("📖 "+t._s(t.$page.readingTime.text)+"    🔡 "+t._s(t.$page.readingTime.words)),s("br")])]),t._v(" "),s("h1",{attrs:{id:"gitk-the-git-repository-browser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gitk-the-git-repository-browser"}},[t._v("#")]),t._v(" 📌 gitk - The Git repository browser")]),t._v(" "),s("h2",{attrs:{id:"all"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[t._v("#")]),t._v(" 🔹 --all")]),t._v(" "),s("p",[s("strong",[t._v("1. Usage scenario: How to clone all remote branches in Git?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 4897    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[t._v("git remote")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[t._v("git clone")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/72156",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("▲ First, clone a remote Git repository and cd into it:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git clone git://example.com/myproject")]),t._v("\n$ cd myproject\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch")]),t._v("\n* master\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -a")])]),t._v("\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n\n▲ If you just want to take a quick peek at an upstream branch, you can check it out directly:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout origin/experimental")]),t._v("\n\n▲ But if you want to work on that branch, you'll need to create a local tracking branch which is done automatically by:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout experimental")]),t._v("\n\nBranch experimental set up to track remote branch experimental from origin.\nSwitched to a new branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'experimental'")]),t._v("\n\n▲ Now, if you look at your local branches, this is what you'll see:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch")]),t._v("\n* experimental\n  master\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote add win32 git://example.com/users/joe/myproject-win32-port")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git branch"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -a")])]),t._v("\n* master\n  remotes/origin/HEAD\n  remotes/origin/master\n  remotes/origin/v1.0-stable\n  remotes/origin/experimental\n  remotes/win32/master\n  remotes/win32/new-widgets\n\n$ gitk --all &\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br"),s("span",{staticClass:"line-number"},[t._v("39")]),s("br")])]),s("p",[s("strong",[t._v("2. Usage scenario: How to search through all Git and Mercurial commits in the repository for a certain string?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 337    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-grep.html"}},[t._v("git grep")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/746790",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git log -g --grep=search_for_this\n\ngit log -g -Ssearch_for_this\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# this also works but may be slower, it only shows text-added results")]),t._v("\ngit grep search_for_this $(git log -g --pretty=format:%h)\n\ngitk --all $(git log -g --pretty=format:%h)\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("3. Usage scenario: How to determine when a Git branch was created?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 176    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[t._v("git merge-base")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-show.html"}},[t._v("git show")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/2255638",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git show --summary `git merge-base foo master`\ngitk --all --select-commit=`git merge-base foo master`\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("4. Usage scenario: Viewing full version tree in git")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 87    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/5361023",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("gitk --all\n\ngitk master origin/master origin/experiment\n\ngitk --simplify-by-decoration --all\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("5. Usage scenario: How do I determine the source branch of a particular branch?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 30    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[t._v("git diff")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/6427205",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch --set-upstream <branch> [<start-point>]\n\ngit diff <mybranch>..master # commits in master that are not in mybranch\ngit diff <mybranch>..2.2 # commits in 2.2 that are not in mybranch\n\ngitk --all\ngit log --graph --color --decorate --oneline --all\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("p",[s("strong",[t._v("6. Usage scenario: Restoring lost commits in git")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 4    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-fsck.html"}},[t._v("git fsck")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/10062286",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("alias gitkall="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git fsck --lost-found | awk \"{ print \\$3 ; }\" | xargs gitk --all'")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("7. Usage scenario: Merging from commit to feature branch")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[t._v("git add")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[t._v("git merge")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/20193412",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### Ensure everything is commited")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git add"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -A")]),t._v(" .")]),t._v("\n$ commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My message"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git merge master")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("### Inspect the situation")]),t._v("\n$ gitk --all\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("strong",[t._v("8. Usage scenario: How to apply changes of a specific file of the other git repository to my own repo")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[t._v("git cherry-pick")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[t._v("git remote")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/42888241",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In local repoB /b/.git")]),t._v("\ngit remote add -f a /a/.git\ngitk --all   #To find the commit id where remotes/a/master point to (assume the new version of c.txt in master branch)\ngit cherry-pick <commit id you find in above step> -X theirs\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("h2",{attrs:{id:"branches"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[t._v("#")]),t._v(" 🔹 --branches")]),t._v(" "),s("p",[s("strong",[t._v("1. Usage scenario: Show only certain tags when using gitk?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 3    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[t._v("git for-each-ref")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/21060966",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("gitk --branches $(git for-each-ref --format="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%(refname:short)'")]),t._v(" refs/tags/ |\n    grep -v B7)\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"select-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-commit"}},[t._v("#")]),t._v(" 🔹 --select-commit")]),t._v(" "),s("p",[s("strong",[t._v("1. Usage scenario: How to determine when a Git branch was created?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 176    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[t._v("git merge-base")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-show.html"}},[t._v("git show")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/2255638",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git show --summary `git merge-base foo master`\ngitk --all --select-commit=`git merge-base foo master`\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h2",{attrs:{id:"none"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[t._v("#")]),t._v(" 🔹None")]),t._v(" "),s("p",[s("strong",[t._v("1. Usage scenario: How can I revert a single file to a previous version?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 1010    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/2734035",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("▲ Let"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s start with a qualitative description of what we want to do (much of this is said in Ben Straub'")]),t._v("s answer). We"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ve made some number of commits, five of which changed a given file, and we want to revert the file to one of the previous versions. First of all, git doesn'")]),t._v("t keep version numbers for individual files. It just tracks content - a commit is essentially a snapshot of the work tree, along with some metadata (e.g. commit message). So, we have to know which commit has the version of the file we want. Once we know that, we"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ll need to make a new commit reverting the file to that state. (We can'")]),t._v("t just muck around with history, because we've already pushed this content, and editing history messes with everyone else.)\ngit log path/to/file\n\n▲ If your commit messages aren't good enough, and you need to see what was done to the file in each commit, use the -p/--patch option:\ngit log -p path/to/file\n\n▲ Or, if you prefer the graphical view of gitk\ngitk path/to/file\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get the version of the file from the given commit")]),t._v("\ngit checkout <commit> path/to/file\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# and commit this modification")]),t._v("\ngit commit\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[s("strong",[t._v("2. Usage scenario: How do I filter log by folder in SourceTree?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/17608923",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("▲ This Answer is Outdated\n▲ Original Answer\ngitk -- folderPath\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("3. Usage scenario: How to keep lost+found directory in git?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 3    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[t._v("git add")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/45539576",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("cd /path/to/git/repo\ntouch lost+found/.gitkeep\ngit add lost+found/.gitkeep\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);