(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{476:function(s,n,e){"use strict";e.r(n);var t=e(19),a=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),e("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),e("br")])]),s._v(" "),e("h1",{attrs:{id:"git-diff-index-compare-a-tree-to-the-working-tree-or-index"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-diff-index-compare-a-tree-to-the-working-tree-or-index"}},[s._v("#")]),s._v(" 📌 git diff-index - Compare a tree to the working tree or index")]),s._v(" "),e("h2",{attrs:{id:"z"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#z"}},[s._v("#")]),s._v(" 🔹 -z")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Temporarily clearing untracked files before commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4108042",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Via: http://github.com/jwiegley/git-scripts/blob/master/pre-commit.sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nif [ ! $(git rev-parse --symbolic-full-name HEAD) = refs/heads/master ]; then\n    exit 0\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These are the locations I keep my temporary source and build trees in")]),s._v("\nTMPDIR=$HOME/code/myproject-pre-commit\nMIRROR=$HOME/code/myproject-pre-commit-mirror\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exit with status 1 if any command below fails")]),s._v("\nset -e\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checkout a copy of the current index into MIRROR")]),s._v("\ngit checkout-index --prefix=$MIRROR/ -af\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove files from MIRROR which are no longer present in the index")]),s._v("\ngit diff-index --cached --name-only --diff-filter=D -z HEAD | \\\n    (cd $MIRROR && xargs -0 rm -f --)\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy only _changed files_ from MIRROR to TMPDIR, without copying timestamps.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This includes copying over new files, and deleting removed ones.  This way,")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "make check" will only rebuild what is necessary to validate the commit.')]),s._v("\nrsync -rlpgoDOc --delete --exclude-from=.git-hooks/excludes $MIRROR/ $TMPDIR/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Everything else happens in the temporary build tree")]),s._v("\ncd $TMPDIR\n\nnosetests\n\nexit 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h2",{attrs:{id:"name-only"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#name-only"}},[s._v("#")]),s._v(" 🔹 --name-only")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How can I check in a Bash script if my local Git repository has changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 231    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/5143914",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git update-index -q --refresh\ntest -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git diff-index --name-only HEAD --)"')]),s._v(" ||\nVN="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$VN-dirty"')]),s._v("\n\nif git diff-index --quiet HEAD --; then\n    # No changes\nelse\n    # Changes\nfi\n\nif ! git diff-index --quiet HEAD --; then\n    VN="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$VN-mod"')]),s._v("\nfi\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: Temporarily clearing untracked files before commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4108042",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Via: http://github.com/jwiegley/git-scripts/blob/master/pre-commit.sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nif [ ! $(git rev-parse --symbolic-full-name HEAD) = refs/heads/master ]; then\n    exit 0\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These are the locations I keep my temporary source and build trees in")]),s._v("\nTMPDIR=$HOME/code/myproject-pre-commit\nMIRROR=$HOME/code/myproject-pre-commit-mirror\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exit with status 1 if any command below fails")]),s._v("\nset -e\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checkout a copy of the current index into MIRROR")]),s._v("\ngit checkout-index --prefix=$MIRROR/ -af\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove files from MIRROR which are no longer present in the index")]),s._v("\ngit diff-index --cached --name-only --diff-filter=D -z HEAD | \\\n    (cd $MIRROR && xargs -0 rm -f --)\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy only _changed files_ from MIRROR to TMPDIR, without copying timestamps.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This includes copying over new files, and deleting removed ones.  This way,")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "make check" will only rebuild what is necessary to validate the commit.')]),s._v("\nrsync -rlpgoDOc --delete --exclude-from=.git-hooks/excludes $MIRROR/ $TMPDIR/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Everything else happens in the temporary build tree")]),s._v("\ncd $TMPDIR\n\nnosetests\n\nexit 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h2",{attrs:{id:"name-status"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#name-status"}},[s._v("#")]),s._v(" 🔹 --name-status")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I programmatically determine if there are uncommitted changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 335    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3879077",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ UPDATE: the OP Daniel Stutzbach points out in the comments that this simple command git diff-index worked for him:\ngit update-index --refresh \ngit diff-index --quiet HEAD --\n\n▲ You can then see "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"How to check if a command succeeded?"')]),s._v(" if you are using it in a bash script:\ngit diff-index --quiet HEAD -- || echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"untracked"')]),s._v("; // do something about it\n\n▲ And haridsv points out in the comments that git diff-files on a new file doesn't detect it as a diff.\nThe safer approach seems to be to run git add on the file spec first and then use git diff-index to see if anything got added to index before running git commit.\ngit diff-index --cached --quiet HEAD || git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${commit_msg}'")]),s._v("\n\nrequire_clean_work_tree () {\n    # Update the index\n    git update-index -q --ignore-submodules --refresh\n    err=0\n\n    # Disallow unstaged changes in the working tree\n    if ! git diff-files --quiet --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: you have unstaged changes."')]),s._v("\n        git diff-files --name-status -r --ignore-submodules -- >&2\n        err=1\n    fi\n\n    # Disallow uncommitted changes in the index\n    if ! git diff-index --cached --quiet HEAD --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: your index contains uncommitted changes."')]),s._v("\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2\n        err=1\n    fi\n\n    if [ $err = 1 ]\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please commit or stash them."')]),s._v("\n        exit 1\n    fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[e("strong",[s._v('2. Usage scenario: How can I tell if git was executed with the "-a" flag in a pre-commit hook?')])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/41368961",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\n\ngit diff-index --cached -r --name-status HEAD\n\necho pre-commit fail\nexit 1\n\nTMPINDEX=$(mktemp)\nNORMINDEX=${GIT_INDEX_FILE:-$(git rev-parse --git-dir)/.index}\ncp $NORMINDEX $TMPINDEX\nGIT_INDEX_FILE=$TMPINDEX GIT_WORK_TREE=$TMPTREE checkout-index -- .\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"check"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[s._v("#")]),s._v(" 🔹 --check")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How to patch all changed files before a commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/13069455",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Work out what to diff against")]),s._v("\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n    against=HEAD\nelse\n    # Initial commit: diff against an empty tree object\n    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If there are whitespace errors, print the offending file names and fail.")]),s._v("\nexec git diff-index --check --cached $against --\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h2",{attrs:{id:"diff-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#diff-filter"}},[s._v("#")]),s._v(" 🔹 --diff-filter")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: Temporarily clearing untracked files before commit in Git")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/4108042",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Via: http://github.com/jwiegley/git-scripts/blob/master/pre-commit.sh")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nif [ ! $(git rev-parse --symbolic-full-name HEAD) = refs/heads/master ]; then\n    exit 0\nfi\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# These are the locations I keep my temporary source and build trees in")]),s._v("\nTMPDIR=$HOME/code/myproject-pre-commit\nMIRROR=$HOME/code/myproject-pre-commit-mirror\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exit with status 1 if any command below fails")]),s._v("\nset -e\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Checkout a copy of the current index into MIRROR")]),s._v("\ngit checkout-index --prefix=$MIRROR/ -af\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove files from MIRROR which are no longer present in the index")]),s._v("\ngit diff-index --cached --name-only --diff-filter=D -z HEAD | \\\n    (cd $MIRROR && xargs -0 rm -f --)\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copy only _changed files_ from MIRROR to TMPDIR, without copying timestamps.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This includes copying over new files, and deleting removed ones.  This way,")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "make check" will only rebuild what is necessary to validate the commit.')]),s._v("\nrsync -rlpgoDOc --delete --exclude-from=.git-hooks/excludes $MIRROR/ $TMPDIR/\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Everything else happens in the temporary build tree")]),s._v("\ncd $TMPDIR\n\nnosetests\n\nexit 0\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("h2",{attrs:{id:"quiet"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#quiet"}},[s._v("#")]),s._v(" 🔹 --quiet")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I programmatically determine if there are uncommitted changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 335    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3879077",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ UPDATE: the OP Daniel Stutzbach points out in the comments that this simple command git diff-index worked for him:\ngit update-index --refresh \ngit diff-index --quiet HEAD --\n\n▲ You can then see "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"How to check if a command succeeded?"')]),s._v(" if you are using it in a bash script:\ngit diff-index --quiet HEAD -- || echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"untracked"')]),s._v("; // do something about it\n\n▲ And haridsv points out in the comments that git diff-files on a new file doesn't detect it as a diff.\nThe safer approach seems to be to run git add on the file spec first and then use git diff-index to see if anything got added to index before running git commit.\ngit diff-index --cached --quiet HEAD || git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${commit_msg}'")]),s._v("\n\nrequire_clean_work_tree () {\n    # Update the index\n    git update-index -q --ignore-submodules --refresh\n    err=0\n\n    # Disallow unstaged changes in the working tree\n    if ! git diff-files --quiet --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: you have unstaged changes."')]),s._v("\n        git diff-files --name-status -r --ignore-submodules -- >&2\n        err=1\n    fi\n\n    # Disallow uncommitted changes in the index\n    if ! git diff-index --cached --quiet HEAD --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: your index contains uncommitted changes."')]),s._v("\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2\n        err=1\n    fi\n\n    if [ $err = 1 ]\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please commit or stash them."')]),s._v("\n        exit 1\n    fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("p",[e("strong",[s._v("2. Usage scenario: How can I check in a Bash script if my local Git repository has changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 231    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/5143914",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("git update-index -q --refresh\ntest -z "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git diff-index --name-only HEAD --)"')]),s._v(" ||\nVN="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$VN-dirty"')]),s._v("\n\nif git diff-index --quiet HEAD --; then\n    # No changes\nelse\n    # Changes\nfi\n\nif ! git diff-index --quiet HEAD --; then\n    VN="),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$VN-mod"')]),s._v("\nfi\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br")])]),e("p",[e("strong",[s._v("3. Usage scenario: How to force a clean git working repository in a makefile?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/10557860",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ Use git diff-index to check if the repo is dirty:\ndeploy:\n        git diff-index --quiet HEAD \n        git branch -f deployment\n        git push origin deployment\n\n▲ If you want to check shell variables in a makefile, you need to ensure that you check the value of the variable in the same shell as the one in which it is set.  Make will invoke each command in a separate shell, so you would need to do something like:\ndeploy:\n        @status=$$(git status --porcelain); \\\n        if test "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x$${status}"')]),s._v(" = x; then \\\n            git branch -f deployment; \\\n            git push origin deployment; \\\n        else \\\n            echo Working directory is dirty >&2; \\\n        fi\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("h2",{attrs:{id:"ignore-submodules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ignore-submodules"}},[s._v("#")]),s._v(" 🔹 --ignore-submodules")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I programmatically determine if there are uncommitted changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 335    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3879077",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ UPDATE: the OP Daniel Stutzbach points out in the comments that this simple command git diff-index worked for him:\ngit update-index --refresh \ngit diff-index --quiet HEAD --\n\n▲ You can then see "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"How to check if a command succeeded?"')]),s._v(" if you are using it in a bash script:\ngit diff-index --quiet HEAD -- || echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"untracked"')]),s._v("; // do something about it\n\n▲ And haridsv points out in the comments that git diff-files on a new file doesn't detect it as a diff.\nThe safer approach seems to be to run git add on the file spec first and then use git diff-index to see if anything got added to index before running git commit.\ngit diff-index --cached --quiet HEAD || git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${commit_msg}'")]),s._v("\n\nrequire_clean_work_tree () {\n    # Update the index\n    git update-index -q --ignore-submodules --refresh\n    err=0\n\n    # Disallow unstaged changes in the working tree\n    if ! git diff-files --quiet --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: you have unstaged changes."')]),s._v("\n        git diff-files --name-status -r --ignore-submodules -- >&2\n        err=1\n    fi\n\n    # Disallow uncommitted changes in the index\n    if ! git diff-index --cached --quiet HEAD --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: your index contains uncommitted changes."')]),s._v("\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2\n        err=1\n    fi\n\n    if [ $err = 1 ]\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please commit or stash them."')]),s._v("\n        exit 1\n    fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("h2",{attrs:{id:"cached"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cached"}},[s._v("#")]),s._v(" 🔹 --cached")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I programmatically determine if there are uncommitted changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 335    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3879077",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ UPDATE: the OP Daniel Stutzbach points out in the comments that this simple command git diff-index worked for him:\ngit update-index --refresh \ngit diff-index --quiet HEAD --\n\n▲ You can then see "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"How to check if a command succeeded?"')]),s._v(" if you are using it in a bash script:\ngit diff-index --quiet HEAD -- || echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"untracked"')]),s._v("; // do something about it\n\n▲ And haridsv points out in the comments that git diff-files on a new file doesn't detect it as a diff.\nThe safer approach seems to be to run git add on the file spec first and then use git diff-index to see if anything got added to index before running git commit.\ngit diff-index --cached --quiet HEAD || git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${commit_msg}'")]),s._v("\n\nrequire_clean_work_tree () {\n    # Update the index\n    git update-index -q --ignore-submodules --refresh\n    err=0\n\n    # Disallow unstaged changes in the working tree\n    if ! git diff-files --quiet --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: you have unstaged changes."')]),s._v("\n        git diff-files --name-status -r --ignore-submodules -- >&2\n        err=1\n    fi\n\n    # Disallow uncommitted changes in the index\n    if ! git diff-index --cached --quiet HEAD --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: your index contains uncommitted changes."')]),s._v("\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2\n        err=1\n    fi\n\n    if [ $err = 1 ]\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please commit or stash them."')]),s._v("\n        exit 1\n    fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])]),e("h2",{attrs:{id:"m"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#m"}},[s._v("#")]),s._v(" 🔹 -m")]),s._v(" "),e("p",[e("strong",[s._v("1. Usage scenario: How do I programmatically determine if there are uncommitted changes?")])]),s._v(" "),e("blockquote",[e("p",[e("font",{attrs:{size:"2"}},[s._v("💯Score: 335    🔗Associated commands: [ "),e("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),e("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(" ]    🌐"),e("a",{attrs:{href:"https://stackoverflow.com/questions/3879077",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),e("OutboundLink")],1)],1)],1)]),s._v(" "),e("p",[e("strong",[s._v("Example:")])]),s._v(" "),e("div",{staticClass:"language-git line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[s._v("▲ UPDATE: the OP Daniel Stutzbach points out in the comments that this simple command git diff-index worked for him:\ngit update-index --refresh \ngit diff-index --quiet HEAD --\n\n▲ You can then see "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"How to check if a command succeeded?"')]),s._v(" if you are using it in a bash script:\ngit diff-index --quiet HEAD -- || echo "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"untracked"')]),s._v("; // do something about it\n\n▲ And haridsv points out in the comments that git diff-files on a new file doesn't detect it as a diff.\nThe safer approach seems to be to run git add on the file spec first and then use git diff-index to see if anything got added to index before running git commit.\ngit diff-index --cached --quiet HEAD || git commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'${commit_msg}'")]),s._v("\n\nrequire_clean_work_tree () {\n    # Update the index\n    git update-index -q --ignore-submodules --refresh\n    err=0\n\n    # Disallow unstaged changes in the working tree\n    if ! git diff-files --quiet --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: you have unstaged changes."')]),s._v("\n        git diff-files --name-status -r --ignore-submodules -- >&2\n        err=1\n    fi\n\n    # Disallow uncommitted changes in the index\n    if ! git diff-index --cached --quiet HEAD --ignore-submodules --\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cannot $1: your index contains uncommitted changes."')]),s._v("\n        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2\n        err=1\n    fi\n\n    if [ $err = 1 ]\n    then\n        echo >&2 "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please commit or stash them."')]),s._v("\n        exit 1\n    fi\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br")])])])}),[],!1,null,null,null);n.default=a.exports}}]);