(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{566:function(s,t,a){"use strict";a.r(t);var n=a(19),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),a("br")])]),s._v(" "),a("h1",{attrs:{id:"git-stash-stash-the-changes-in-a-dirty-working-directory-away"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-stash-the-changes-in-a-dirty-working-directory-away"}},[s._v("#")]),s._v(" 📌 git stash - Stash the changes in a dirty working directory away")]),s._v(" "),a("h2",{attrs:{id:"push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[s._v("#")]),s._v(" 🔹 push")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: Stash only one file out of multiple files that have changed with Git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3303    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17969785",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash push -p -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my commit message"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: Stash changes while keeping the changes in the working directory in Git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 208    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17848537",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add modified-file.txt")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash push"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --keep")]),s._v("-index")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: How to stash changes in current folder?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 120    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/51758558",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash push -- path/to/folder\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: Create git archive from repo without a commit")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-archive.html"}},[s._v("git archive")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[s._v("git write-tree")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/55978594",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git archive [additional options] $(git write-tree)\n\ngit add -u\ngit archive [additional options] $(git write-tree)\n\ngit stash push\ngit archive [additional options] refs/stash\ngit stash pop --index\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h2",{attrs:{id:"save"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#save"}},[s._v("#")]),s._v(" 🔹 save")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How do I discard unstaged changes in Git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3032    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/52719",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save --keep-index --include-untracked\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: Stash the changes made with atlassian sourcetree")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 50    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/23898314",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save --include-untracked\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Or shorter")]),s._v("\ngit stash save -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: How can I undo my last commit in Git and stash those changes instead?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 50    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/52761334",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git reset --soft HEAD~1\ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Saving instead"')]),s._v(" # or something like that\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How to copy local changes from one pc to another using git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/31854676",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save myWork\n\ngit stash show -p  > myWork.txt\n\ngit apply myWork.txt\n\ngit stash clear\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: Apply stash to different branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/37418102",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v("\ngit reset HEAD~\ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\ngit checkout correct-branch\ngit stash pop\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: Git Checkout reverted code to older commit, how to revert back?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/gitk.html"}},[s._v("gitk")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/7263984",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ Safest thing is to create a branch at the "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lost"')]),s._v(" commit, then check if everything is dandy using gitk or git log -p\ngit branch recovery HEAD@{1} # use whatever commit you need\ngit log -p recovery\n\n▲ If you haven't done any new commits on master, you can simply merge the commit in question, which will be resolved as a fast-forward merge by git:\ngit merge HEAD@{1} # use whatever commit you need\n\n▲ If you don't care about any new commits on master and you simply want to reset master branch to that lost commit, use git reset. To not lose any changes, stash changes to your working copy first (git stash save)\ngit reset --keep HEAD@{1}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: switch to another branch without committing")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 12    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/21516146",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -u")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Some logical description of the changes"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: Some logical description of the changes\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout other-branch")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: How can I define an alias for a Git subcommand (e.g. for "),a("code",[s._v("list")]),s._v(" in "),a("code",[s._v("git stash list")]),s._v(")?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/29349198",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git() {\n    if [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stash"')]),s._v(" -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v(" ]\n    then\n        command git stash list\n    else\n        command git $@\n    fi;\n}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# starting from a dirty working state...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save")]),s._v("\nSaved working directory and index state WIP on master: 7c6655d add missing word in documentation\nHEAD is now at 7c6655d add missing word in documentation\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash ls")]),s._v("\nstash@{0}: WIP on master: 7c6655d add missing word in documentation\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: Switching branches safely in git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/6117269",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -am")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WIP (description here)'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout mybranch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do work")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -am")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Finish WIP (description here)'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rebase"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -i")]),s._v(" HEAD~2    # See instructions for rebase"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -i")]),s._v(" elsewhere")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add .")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WIP (descriptino here)'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout my_branch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: How can I apply and drop my latest git stash in the same command?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/11351786",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("pop [--index] [-q|--quiet] [<stash>]\n\n    Remove a single stashed state from the stash list and apply it on\n    top of the current working tree state, i.e., do the inverse operation\n    of git stash save. The working directory must match the index.\n\n    Applying the state can fail with conflicts; in this case, it is not\n    removed from the stash list. You need to resolve the conflicts by hand\n    and call git stash drop manually afterwards.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: How do I check in files for building with git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/2164243",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This hook does two things:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  1. update the "info" files that allow the list of references to be')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     queries over dumb transports such as http")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  2. if this repository looks like it is a non-bare repository, and")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     the checked-out branch is pushed to, then update the working copy.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     This makes "push" function somewhat similarly to darcs and bzr.')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# To enable this hook, make this file executable by "chmod +x post-update".')]),s._v("\n\ngit-update-server-info\n\nis_bare=$(git-config --get --bool core.bare)\n\nif [ -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" ]\nthen\n    # for compatibility's sake, guess\n    git_dir_full=$(cd $GIT_DIR; pwd)\n    case $git_dir_full in */.git) is_bare=false;; *) is_bare=true;; esac\nfi\n\nupdate_wc() {\n    ref=$1\n    echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Push to checked out branch $ref"')]),s._v(" >&2\n    if [ ! -f $GIT_DIR/logs/HEAD ]\n    then\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E:push to non-bare repository requires a HEAD reflog"')]),s._v(" >&2\n        exit 1\n    fi\n    if (cd $GIT_WORK_TREE; git-diff-files -q --exit-code >/dev/null)\n    then\n        wc_dirty=0\n    else\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:unstaged changes found in working copy"')]),s._v(" >&2\n        wc_dirty=1\n        desc="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"working copy"')]),s._v("\n    fi\n    if git diff-index --cached HEAD@{1} >/dev/null\n    then\n        index_dirty=0\n    else\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:uncommitted, staged changes found"')]),s._v(" >&2\n        index_dirty=1\n        if [ -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc"')]),s._v(" ]\n        then\n            desc="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc and index"')]),s._v("\n        else\n            desc="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"index"')]),s._v("\n        fi\n    fi\n    if [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$wc_dirty"')]),s._v(" -ne 0 -o "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$index_dirty"')]),s._v(" -ne 0 ]\n    then\n        new=$(git rev-parse HEAD)\n        echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:stashing dirty $desc - see git-stash(1)"')]),s._v(" >&2\n        ( trap "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo trapped $$; git symbolic-ref HEAD \"'")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),s._v(" 2 3 13 15 ERR EXIT\n        git-update-ref --no-deref HEAD HEAD@{1}\n        cd $GIT_WORK_TREE\n        git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dirty $desc before update to $new"')]),s._v(";\n        git-symbolic-ref HEAD "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("\n        )\n    fi\n\n    # eye candy - show the WC updates :)\n    echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Updating working copy"')]),s._v(" >&2\n    (cd $GIT_WORK_TREE\n    git-diff-index -R --name-status HEAD >&2\n    git-reset --hard HEAD)\n}\n\nif [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),s._v(" ]\nthen\n    active_branch=`git-symbolic-ref HEAD`\n    export GIT_DIR=$(cd $GIT_DIR; pwd)\n    GIT_WORK_TREE=${GIT_WORK_TREE-..}\n    for ref\n    do\n        if [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$active_branch"')]),s._v(" ]\n        then\n            update_wc $ref\n        fi\n    done\nfi\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: How to list the parent commit of a stash in "),a("code",[s._v("git stash list")])])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/28591463",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"My own message"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[$(git rev-parse --short HEAD)] My own message"')]),s._v("\n\ngit log --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%gd: %gs"')]),s._v(" -g --first-parent -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" $ref_stash --\n\ngit log -g --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%gd %H"')]),s._v(" refs/stash |\nwhile read name hash; do\n    printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s %s "')]),s._v(" $name $(git rev-parse --short $name^)\n    git log -1 --format=%s $hash\ndone\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("13. Usage scenario: Git - Update current branch from master without committing current branch changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/30599654",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If there are conflicts, then you are better off stashing your work before pulling your branch in.  That can be accomplished thus:\ngit add . && git stash save\ngit pull\ngit stash pop\n\n▲ If you don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t want to deal with merging, then you can rebase your branch instead, which doesn'")]),s._v("t require that you save off your work (but will prompt you for conflicts):\ngit pull --rebase\n\n▲ If there are no conflicts, then you can simply pull the branch in.\ngit pull\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("14. Usage scenario: How can i stash without cleaning the working area?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/53110755",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m saving"')]),s._v("\ngit stash apply # apply stash, but don't remove it from list of stashes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("15. Usage scenario: How do I discard staged files using git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/56221568",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save --keep-index\ngit reset --hard\ngit stash pop\n\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"temp commit"')]),s._v("\ngit stash\ngit reset --hard HEAD~1\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("16. Usage scenario: Diff between two patches")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/36046995",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("diffdiff = !git stash save -u -q &&\n    git apply $1 && git add -A && git commit -q -m"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v(" &&\n    git reset --hard HEAD@{1} -q &&\n    git apply $2 && git add -A && git commit -q -m"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v(" &&\n    git reset --hard HEAD@{1} -q && git stash pop -q &&\n    git diff HEAD@{3} HEAD@{1} && :\n\ngit diffdiff <diff_file_1> <diff_file_2>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("17. Usage scenario: Restore a "),a("em",[s._v("remote")]),s._v(" file after solving a merge conflict using git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-mergetool.html"}},[s._v("git mergetool")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/51977882",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git show :3:path/to/file.ext > /tmp/file.ext.recovered\n\ngit stash show stash:path/to/file.ext > /tmp/file.ext.recovered\n\n▲ Long\ngit stash        # aka "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git stash save"')]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git stash push"')]),s._v("\n...\ngit stash pop\n\n▲ How branches grow, and what it means to be on a branch\nA   <-- master\n\nA <-B   <-- master\n\nA--B--C--D--E--F   <-- master\n          \\\n           G--H   <-- develop\n\nA--B--C--D--E--F   <-- master\n          \\\n           G--H   <-- develop (HEAD)\n\n▲ The index, also called the staging area and the cache\n▲ Merges\nA--B--C--D--E--F   <-- master (HEAD)\n          \\\n           G--H   <-- develop\n\ngit diff --find-renames <hash-of-D> <hash-of-F>   # what we changed\ngit diff --find-renames <hash-of-D> <hash-of-H>   # what they changed\n\nA--B--C--D--E--F--I   <-- master (HEAD)\n          \\      /\n           G----H   <-- develop\n\n▲ Resolving conflicts, index staging slots, and how git mergetool works\n▲ Stashes\n...--J--K   <-- branch (HEAD)\n         \\\n          i\n\n...--J--K   <-- branch (HEAD)\n        |\\\n        i-w   <-- refs/stash\n\n...--J--K--...--L   <-- branch (HEAD)\n        |\\\n        i-w   <-- refs/stash\n\ngit diff --find-renames <hash-of-K> <hash-of-L>   # what "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"we"')]),s._v(" did\ngit diff --find-renames <hash-of-K> <hash-of-w>   # what "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"they"')]),s._v(" did\n\n▲ If you have dropped or cleared the stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[a("strong",[s._v("18. Usage scenario: transfer unstaged changes of one branch into another")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/52494826",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git diff > ../unstaged.diff\n\ngit stash save --keep-index --include-untracked\n\ngit checkout v4.0.1\ngit apply ../unstaged.diff\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("19. Usage scenario: Shelve local changes and get latest with git cmd")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17662475",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ First, stash your working copy changes (or make a temporary branch for them, but we'll go with stash for now):\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Stash message"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git fetch <remote> <branch>")]),s._v("\n\n▲ If you like your buddy's changes, merge them into your local branch:\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge <remote>/<branch>")]),s._v("\n\n▲ Then if you want to restore your previous working copy, simply pop it:\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("20. Usage scenario: Delete a commit but keep the changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/44827470",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"will come back"')]),s._v("\ngit checkout commit1\ngit cherry-pick commit2..commit4\ngit cherry-pick  commit2\ngit stash pop\ngit reset --soft HEAD~1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("21. Usage scenario: GIT : Changes from branch visible on master")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/41142694",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout branch-1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do some changes here")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add .")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my-temporary-change'")]),s._v("  # stash -> save the changes in temporary box\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now untracked files are gone and save to stash stack")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if you need to take the temporary changes, just by 'stash pop' you can get them back in any branch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list       # see all stash stack list")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop        # pop the last one from stash stack, pop = apply + drop")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h2",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" 🔹 list")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How to name and retrieve a stash by name in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1406    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/15197232",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash push -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_stash"')]),s._v("\n\ngit stash list\n\ngit stash pop stash@{n}\n\ngit stash apply stash@{n}\n\ngit stash apply my_stash_name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How do I merge my local uncommitted changes into another Git branch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 946    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/556986",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\ngit checkout branch2\ngit stash pop\n\ngit stash\ngit checkout branch2\ngit stash list       # to check the various stash made in different branch\ngit stash apply x    # to select the right one\n\ngit stash\ngit stash branch branch2\n\ngit stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: How to Git stash pop specific stash in 1.8.3?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 529    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17454945",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply n\n\ngit stash list\ngit stash apply stash@{n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How can I format patch with what I stash away")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 192    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/2160650",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show -p\n\ngit stash list\n\ngit stash show -p stash@{<number>} > <name>.patch\n\ngit stash show -p stash@{3} > third_stash.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How to view stash date/timestamp next to stash id?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 42    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/31687960",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("list_stash () {\n        have_stash || return 0\n        git log --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%gd: %gs"')]),s._v(" -g --first-parent -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" $ref_stash --\n}\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: ...\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --date")]),s._v("=relative")]),s._v("\nstash@{4 minutes ago}: ...\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --format")]),s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%gd (%cr): %gs'")]),s._v("\nstash@{0} (4 minutes ago): ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: How to switch and save without commit in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 23    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/45352284",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: How to view all stashes at once?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/32820026",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list -p\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: How can I save all of my Git stashes differences at once?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48299431",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list | sed "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/\\//\\_/g'")]),s._v("|sed "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/ /\\_/g'")]),s._v(" | awk -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('":"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{ system("git stash show -p " $1 " >> " $1$2$3 ".diff" ) }\'')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: git: How to create a branch of my current work, but stay on my original branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/13917693",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v(" git stash\n\n git stash apply\n\n git stash list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: How can I define an alias for a Git subcommand (e.g. for "),a("code",[s._v("list")]),s._v(" in "),a("code",[s._v("git stash list")]),s._v(")?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/29349198",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git() {\n    if [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stash"')]),s._v(" -a "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ls"')]),s._v(" ]\n    then\n        command git stash list\n    else\n        command git $@\n    fi;\n}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# starting from a dirty working state...")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save")]),s._v("\nSaved working directory and index state WIP on master: 7c6655d add missing word in documentation\nHEAD is now at 7c6655d add missing word in documentation\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash ls")]),s._v("\nstash@{0}: WIP on master: 7c6655d add missing word in documentation\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: Git: How Can I get back to my MASTER without committing?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/14406974",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("DESCRIPTION\n       Use git stash when you want to record the current state of the working\n       directory and the index, but want to go back to a clean working\n       directory. The command saves your local modifications away and reverts\n       the working directory to match the HEAD commit.\n\ngit stash list\n\ngit stash clear\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: How do I tell what branch I was on when I stashed changes?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/24918295",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: WIP on dude: 7eb87fe initial\nstash@{1}: WIP on master: 7eb87fe initial\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do some work on dev")]),s._v("\ngit co -b dev\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# temporarily abandon it")]),s._v("\ngit commit -a -m"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'commit instead of stash'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do other work on master")]),s._v("\ngit co master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lets resume the old work")]),s._v("\ngit co dev\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# un stash")]),s._v("\ngit reset HEAD^\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("13. Usage scenario: Solving merge conflict on git stash apply")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/61503238",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you want to inspect what is in your topmost stash, use :\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show a summary of what files were touched :")]),s._v("\ngit stash show\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show the diff of what is stashed :")]),s._v("\ngit stash show -p\n\n▲ If you want to list all the stuff you currently have in your stashes :\ngit stash list\n\n▲ If you want to inspect a specific stash :\ngit stash show [-p] stash@{xx}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stash@{0} is the topmost stash,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'git stash show stash@{0}' is the same as 'git stash show'")]),s._v("\n\ngit stash apply stash@{xx}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("14. Usage scenario: How can I find changes stashed on a particular date?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17316188",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list --since="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Apr 04'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("15. Usage scenario: How to take backup of multiple stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/47652595",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("for stash in `git stash list | awk -F"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("':'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $1}'")]),s._v("`\ndo\n    git stash show $stash -p > $stash.diff\ndone\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("16. Usage scenario: move to another branch and 'saving' current changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/41071707",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you have changes in Branch A:\nwhile in branch A, do \ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hint_to_what_stash_contains"')]),s._v(" \n\ngit stash apply\n\n▲ If you have multiple stashes, you can list them and choose which stash to apply.\ngit stash list\ngit stash apply stash@\\{<STASH_NUMBER>\\}\n\ngit checkout brancha\nedit files\ngit add <file(s)>\ngit commit --amend # You can also change the commit message if you want.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("17. Usage scenario: How to find individual breaking change in a large commit")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/9007609",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# check out the bad commit")]),s._v("\ngit checkout bad-commit\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and then reset to the commit before, leaving the bad changes in the work tree")]),s._v("\ngit reset HEAD^\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stage the things you want to keep/test first")]),s._v("\ngit add -p\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stash away the rest (keep the staged parts)")]),s._v("\ngit stash --keep-index\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now build/test. if it works, go ahead and commit it")]),s._v("\ngit commit\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bring back the stashed changes")]),s._v("\ngit stash pop\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# repeat!")]),s._v("\ngit add -p\ngit stash --keep-index\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now suppose the broken part is in what you kept, and you want to split it up more")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# unstage the changes")]),s._v("\ngit reset\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and then repeat!")]),s._v("\ngit add -p\ngit stash --keep-index\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if you do this, you'll end up with multiple stashes; you can check on them:")]),s._v("\ngit stash list\ngit stash show\ngit stash show -p stash@{1}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br")])]),a("p",[a("strong",[s._v("18. Usage scenario: Git list out stashes specifically from one branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/68144298",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list | grep s9feat\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("19. Usage scenario: GIT : Changes from branch visible on master")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/41142694",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout branch-1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do some changes here")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add .")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'my-temporary-change'")]),s._v("  # stash -> save the changes in temporary box\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# now untracked files are gone and save to stash stack")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if you need to take the temporary changes, just by 'stash pop' you can get them back in any branch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list       # see all stash stack list")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop        # pop the last one from stash stack, pop = apply + drop")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("20. Usage scenario: Design goes awry, after checkout to earlier commit on popping stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38612883",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list\n\ngit stash show stash@{<the-number-behind-your-stash>}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"show"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#show"}},[s._v("#")]),s._v(" 🔹 show")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: Git diff against a stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2204    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/7677755",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show -p\n\ngit stash show -p stash@{1}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to reverse apply a stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 212    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/1021867",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git init")]),s._v("\nInitialized empty Git repository in /tmp/repo/.git/\n\n$ echo Hello, world >messages\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add messages")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -am")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Initial commit'")]),s._v("\n[master (root-commit)]: created 1ff2478: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Initial commit"')]),s._v("\n 1 files changed, 1 insertions(+), 0 deletions(-)\n create mode 100644 messages\n\n$ echo Hello again >>messages\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On branch master")]),s._v("\nnothing to commit (working directory clean)\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash apply")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# On branch master")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Changed but not updated:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#   (use "git add <file>..." to update what will be committed)')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#       modified:   messages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\nno changes added to commit (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add"')]),s._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git commit -a"')]),s._v(")\n\n$ echo Howdy all >>messages\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git diff")]),s._v("\ndiff --git a/messages b/messages\nindex a5c1966..eade523 100644\n"),a("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--- a/messages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+++ b/messages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token coord"}},[s._v("@@ -1 +1,3 @@")]),s._v("\n Hello, world\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+Hello again")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+Howdy all")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash show"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -p")]),s._v(" | patch"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --reverse")])]),s._v("\npatching file messages\nHunk #1 succeeded at 1 with fuzz 1.\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git diff")]),s._v("\ndiff --git a/messages b/messages\nindex a5c1966..364fc91 100644\n"),a("span",{pre:!0,attrs:{class:"token deleted"}},[s._v("--- a/messages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+++ b/messages")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token coord"}},[s._v("@@ -1 +1,2 @@")]),s._v("\n Hello, world\n"),a("span",{pre:!0,attrs:{class:"token inserted"}},[s._v("+Howdy all")]),s._v("\n\ngit stash show -p | git apply --reverse\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: How can I format patch with what I stash away")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 192    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/2160650",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show -p\n\ngit stash list\n\ngit stash show -p stash@{<number>} > <name>.patch\n\ngit stash show -p stash@{3} > third_stash.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How to backup git stash content?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 36    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/42358522",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show -p > stash.diff\n\ngit apply stash.diff\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and potentially stash again:")]),s._v("\ngit stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: Git stash to patch with untracked files")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 22    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/22819771",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 stash^3\n\ngit stash show -p > patch\ngit diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 stash^3 >> patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: How can I save all of my Git stashes differences at once?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48299431",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list | sed "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/\\//\\_/g'")]),s._v("|sed "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/ /\\_/g'")]),s._v(" | awk -F "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('":"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'{ system("git stash show -p " $1 " >> " $1$2$3 ".diff" ) }\'')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: Make "),a("code",[s._v("git stash show")]),s._v(", print full file path")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/50645132",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show --name-only\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: Generating patch file from an old stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/26117064",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash show -p stash@{2} > file.patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: Solving merge conflict on git stash apply")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/61503238",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you want to inspect what is in your topmost stash, use :\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show a summary of what files were touched :")]),s._v("\ngit stash show\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show the diff of what is stashed :")]),s._v("\ngit stash show -p\n\n▲ If you want to list all the stuff you currently have in your stashes :\ngit stash list\n\n▲ If you want to inspect a specific stash :\ngit stash show [-p] stash@{xx}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stash@{0} is the topmost stash,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'git stash show stash@{0}' is the same as 'git stash show'")]),s._v("\n\ngit stash apply stash@{xx}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: How do you properly switch development device with unstaged changes?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/54733661",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash #stash everything\ngit stash show -p > stash.diff #save patch-formatted stash to file\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: Design goes awry, after checkout to earlier commit on popping stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38612883",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list\n\ngit stash show stash@{<the-number-behind-your-stash>}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"pop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pop"}},[s._v("#")]),s._v(" 🔹 pop")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How to name and retrieve a stash by name in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1406    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/15197232",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash push -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my_stash"')]),s._v("\n\ngit stash list\n\ngit stash pop stash@{n}\n\ngit stash apply stash@{n}\n\ngit stash apply my_stash_name\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to commit my current changes to a different branch in Git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1221    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/2945904",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ The other answers suggesting checking out the other branch, then committing to it, only work if the checkout is possible given the local modifications. If not, you're in the most common use case for git stash:\ngit stash\ngit checkout other-branch\ngit stash pop\n\n▲ On the other hand, if you"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ve really messed up, and your work tree has a mix of changes for the two branches, and the conflicts are just in the ones you want to commit back on the original branch, you can save some work. As usual, there are a lot of ways to do this. Here'")]),s._v("s one, starting from after you pop and see the conflicts:\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Unstage everything (warning: this leaves files with conflicts in your tree)")]),s._v("\ngit reset\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add the things you *do* want to commit here")]),s._v("\ngit add -p     # or maybe git add -i\ngit commit\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The stash still exists; pop only throws it away if it applied cleanly")]),s._v("\ngit checkout original-branch\ngit stash pop\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add the changes meant for this branch")]),s._v("\ngit add -p\ngit commit\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# And throw away the rest")]),s._v("\ngit reset --hard\n\n▲ Alternatively, if you realize ahead of the time that this is going to happen, simply commit the things that belong on the current branch. You can always come back and amend that commit:\ngit add -p\ngit commit\ngit stash\ngit checkout other-branch\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: moving changed files to another branch for check-in")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 972    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/7218106",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# work on some code")]),s._v("\ngit stash\ngit checkout correct-branch\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: Undo a git stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 883    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/10827172",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash pop\n\ngit stash apply --index\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How do I pull files from remote without overwriting local files?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 218    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/19216491",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit pull\n\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: How to git stash only untracked files?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 38    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/39026300",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v('stash-untracked = "!f() {    \\\n    git stash;               \\\n    git stash -u;            \\\n    git stash pop stash@{1}; \\\n}; f"\n\ngit stash-untracked\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: Git: How to re-stage the staged files in a pre-commit hook")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 18    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/26911078",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git diff --name-only --cached\n\ngit diff --name-only --cached | xargs -l git add\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Stash unstaged changes")]),s._v("\ngit stash -q --keep-index\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Edit your project files here")]),s._v("\n...\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Stage updated files")]),s._v("\ngit add -u\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Re-apply original unstaged changes")]),s._v("\ngit stash pop -q\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: How to save the current state of my staging area?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/15040570",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"temporary"')]),s._v(" # save current stage are as an actual commit\ngit commit unrelated_files -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The other feature"')]),s._v("\ngit stash # hide the rest\ngit rebase -i HEAD~2 # change the order of two last commits\ngit reset HEAD^ # rollback the "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"temporary"')]),s._v(" commit\ngit add . # add everything from that commit back to staging\ngit stash pop # and return back all initially unstaged stuff\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: Apply stash to different branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/37418102",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),s._v("\ngit reset HEAD~\ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\ngit checkout correct-branch\ngit stash pop\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: git delete last stash commit only")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48814643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash drop stash@{1}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash apply stash@{1}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop stash@{1}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: Switching branches safely in git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/6117269",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -am")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WIP (description here)'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout mybranch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# do work")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -am")])]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Finish WIP (description here)'")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git rebase"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -i")]),s._v(" HEAD~2    # See instructions for rebase"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -i")]),s._v(" elsewhere")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add .")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash save ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WIP (descriptino here)'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout my_branch")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: How to temporarily ignore untracked files on git pull?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/49906096",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\n// after you have pulled from remote\ngit stash apply \n// OR\ngit stash pop\n\ngit reset --hard\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("13. Usage scenario: Undoing git remove")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/13390615",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ Try:\ngit reset HEAD\n\n▲ If you don't have any uncommitted changes that you care about, then\ngit reset --hard HEAD\n\n▲ should forcibly reset everything to your last commit. If you do have uncommitted changes, but the first command doesn't work, then save your uncommitted changes with git stash:\ngit stash\ngit reset --hard HEAD\ngit stash pop\n\n git ls-files -d | xargs git checkout --\n\ngit-ls-files --deleted\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("14. Usage scenario: Prevent Git Stash from Resetting Staged Files")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/4892912",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash pop --index\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("15. Usage scenario: Git - Update current branch from master without committing current branch changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/30599654",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If there are conflicts, then you are better off stashing your work before pulling your branch in.  That can be accomplished thus:\ngit add . && git stash save\ngit pull\ngit stash pop\n\n▲ If you don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t want to deal with merging, then you can rebase your branch instead, which doesn'")]),s._v("t require that you save off your work (but will prompt you for conflicts):\ngit pull --rebase\n\n▲ If there are no conflicts, then you can simply pull the branch in.\ngit pull\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("16. Usage scenario: Create a new GIT branch based on server without local changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/15343735",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git checkout -b my-feature\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"add my feature"')]),s._v("\ngit checkout master\ngit pull --rebase\ngit checkout -b bugFix\n... do some work ...\ngit checkout my-feature\n\ngit stash\ngit fetch\ngit checkout origin/master\ngit checkout -b bugFix\n... do some work ...\ngit checkout master\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[a("strong",[s._v("17. Usage scenario: How do I discard staged files using git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/56221568",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save --keep-index\ngit reset --hard\ngit stash pop\n\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"temp commit"')]),s._v("\ngit stash\ngit reset --hard HEAD~1\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("18. Usage scenario: Restore a "),a("em",[s._v("remote")]),s._v(" file after solving a merge conflict using git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-mergetool.html"}},[s._v("git mergetool")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/51977882",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git show :3:path/to/file.ext > /tmp/file.ext.recovered\n\ngit stash show stash:path/to/file.ext > /tmp/file.ext.recovered\n\n▲ Long\ngit stash        # aka "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git stash save"')]),s._v(" or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git stash push"')]),s._v("\n...\ngit stash pop\n\n▲ How branches grow, and what it means to be on a branch\nA   <-- master\n\nA <-B   <-- master\n\nA--B--C--D--E--F   <-- master\n          \\\n           G--H   <-- develop\n\nA--B--C--D--E--F   <-- master\n          \\\n           G--H   <-- develop (HEAD)\n\n▲ The index, also called the staging area and the cache\n▲ Merges\nA--B--C--D--E--F   <-- master (HEAD)\n          \\\n           G--H   <-- develop\n\ngit diff --find-renames <hash-of-D> <hash-of-F>   # what we changed\ngit diff --find-renames <hash-of-D> <hash-of-H>   # what they changed\n\nA--B--C--D--E--F--I   <-- master (HEAD)\n          \\      /\n           G----H   <-- develop\n\n▲ Resolving conflicts, index staging slots, and how git mergetool works\n▲ Stashes\n...--J--K   <-- branch (HEAD)\n         \\\n          i\n\n...--J--K   <-- branch (HEAD)\n        |\\\n        i-w   <-- refs/stash\n\n...--J--K--...--L   <-- branch (HEAD)\n        |\\\n        i-w   <-- refs/stash\n\ngit diff --find-renames <hash-of-K> <hash-of-L>   # what "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"we"')]),s._v(" did\ngit diff --find-renames <hash-of-K> <hash-of-w>   # what "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"they"')]),s._v(" did\n\n▲ If you have dropped or cleared the stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br")])]),a("p",[a("strong",[s._v("19. Usage scenario: Did I lose my data on switching to another branch git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/22551795",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply\n\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("20. Usage scenario: Git reset --soft head after Git stash - how can I get my most recently committed code")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/34172439",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("21. Usage scenario: Git: how to amend an old merge (in a series of merges)?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/39220910",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git cherry-pick --no-commit -m 1 vG\ngit stash\n\ngit merge -s ours -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Gp"')]),s._v(" branch1\ngit stash pop\ngit commit --amend --no-edit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v('22. Usage scenario: How can I restore files from stash entry after doing "git stash push -all"?')])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-restore.html"}},[s._v("git restore")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/68181872",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status ")]),s._v("\nOn branch master\nChanges not staged for commit:\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to update what will be committed)\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git restore <file>..."')]),s._v(" to discard changes in working directory)\n    modified:   a\n\nUntracked files:\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to include in what will be committed)\n    b\n\nno changes added to commit (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add"')]),s._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git commit -a"')]),s._v(")\n$ ls i\ni\n$ cat .gitignore \ni\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --all")])]),s._v("\nSaved working directory and index state WIP on master: 2830eef Add gitignore\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop")]),s._v("\nOn branch master\nChanges not staged for commit:\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to update what will be committed)\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git restore <file>..."')]),s._v(" to discard changes in working directory)\n    modified:   a\n\nUntracked files:\n  (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add <file>..."')]),s._v(" to include in what will be committed)\n    b\n\nno changes added to commit (use "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git add"')]),s._v(" and/or "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git commit -a"')]),s._v(")\nDropped refs/stash@{0} (2009a694e40ac6b029d3f525a21c1c920e78a880)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("p",[a("strong",[s._v("23. Usage scenario: Get git stash --patch to ignore changes I've already added")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/20580552",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ Reading through git stash --help, there's simply no option to do what you want, as of version 1.7.10.\n$ date >> file1\n$ date >> file2\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git add file1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\nM  file1\n M file2\n\n▲ If you do git stash --patch now and accept all changes, you'll get:\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\nMM file1\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout file1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\nM  file1\n M file2\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --patch")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --no")]),s._v("-keep-index")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\n$\n\n▲ So no, you cannot use git stash --patch to stash only unstaged changes. If you don"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t really need the select changes interactively, then you can git add changes you don'")]),s._v("t want to add, and then do git stash --keep-index (without --patch):\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\nM  file1\n M file2\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --keep")]),s._v("-index")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git status"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -s")])]),s._v("\nM  file1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[s._v("#")]),s._v(" 🔹 apply")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How to recover a dropped stash in Git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3329    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/gitk.html"}},[s._v("gitk")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-fsck.html"}},[s._v("git fsck")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/91795",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply $stash_hash\n\ngit branch recovered $stash_hash\n\ngit fsck --no-reflog | awk "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/dangling commit/ {print $3}'")]),s._v("\n\ngit fsck --no-reflog | select-string "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dangling commit'")]),s._v(" | foreach { $_.ToString().Split("),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" "')]),s._v(")[2] }\n\ngitk --all $( git fsck --no-reflog | awk "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/dangling commit/ {print $3}'")]),s._v(" )\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to recover stashed uncommitted changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1467    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/19003191",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ The easy answer to the easy question is git stash apply\n▲ What if you're doing more-advanced or more-complicated stuff?\ngit status               # see if there's anything you need to commit\n                         # uh oh, there is - let's put it on a new temp branch\ngit checkout -b temp     # create new temp branch to save stuff\ngit add ...              # add (and/or remove) stuff as needed\ngit commit               # save first set of changes\n\ngit status               # see if there's anything you need to commit\n                         # status says "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nothing to commit"')]),s._v("\ngit checkout -b temp     # optional: create a new branch for "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apply"')]),s._v("\ngit stash apply          # apply stashed changes; see below about --index\n\ngit stash apply stash      # apply top of stash stack\ngit stash apply stash@{1}  # and mix in next stash stack entry too\n\n▲ What about the very worst possible case?\n▲ Some final words about --index (what the heck is it?)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: How do I merge my local uncommitted changes into another Git branch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 946    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/556986",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\ngit checkout branch2\ngit stash pop\n\ngit stash\ngit checkout branch2\ngit stash list       # to check the various stash made in different branch\ngit stash apply x    # to select the right one\n\ngit stash\ngit stash branch branch2\n\ngit stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: Undo a git stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 883    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/10827172",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash pop\n\ngit stash apply --index\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How to Git stash pop specific stash in 1.8.3?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 529    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17454945",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply n\n\ngit stash list\ngit stash apply stash@{n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: Force git stash to overwrite added files")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 480    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/16625128",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ Use git checkout instead of git stash apply:\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout stash -- .")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git commit")]),s._v("\n\n▲ If there are changes to other files in the working directory that should be kept, here is a less heavy-handed alternative:\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git merge"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --squash")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --strategy")]),s._v("-option=theirs stash")]),s._v("\n\n▲ If there are changes in the index, or the merge will touch files with local changes, git will refuse to merge. Individual files can be checked out from the stash using\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout stash -- <paths...>")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git checkout"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -p")]),s._v(" stash")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: git stash -> merge stashed change with current changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 324    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/16613814",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("mkdir test-repo && cd test-repo && git init\necho test > test.txt\ngit add test.txt && git commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Initial version"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# here's the interesting part:")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make a local change and stash it:")]),s._v("\necho test2 > test.txt\ngit stash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make a different local change:")]),s._v("\necho test3 > test.txt\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# try to apply the previous changes:")]),s._v("\ngit stash apply\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# git complains "Cannot apply to a dirty working tree, please stage your changes"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# add "test3" changes to the index, then re-try the stash:')]),s._v("\ngit add test.txt\ngit stash apply\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# git says: "Auto-merging test.txt"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# git says: "CONFLICT (content): Merge conflict in test.txt"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: How to combine multiple stashes in git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 53    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/9143921",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply stash@{1}\ngit commit -a\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Enter your commit message")]),s._v("\ngit stash apply stash@{3}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: "),a("code",[s._v("git stash")]),s._v(" during a merge conflict")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 33    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/12520322",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply --index\ngit update-ref MERGE_HEAD d7a9884a380f81b2fbf002442ee9c9eaf34ff68d\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: git, change on local branch affects other local branches?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 24    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/32117039",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v(">$ git status")]),s._v("\nOn branch branch_1\nYour branch is up-to-date with "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'origin/branch_1'")]),s._v(".\n\nmodified:   dir/file.rb \n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v(">$ git stash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v(">$ git checkout <branch_2>")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v(">$ git checkout <branch_1> #after finishing your tasks in branch_2 you can go back to branch_1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v(">$ git stash apply")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: How to switch and save without commit in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 23    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/45352284",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: Resolving Git merge conflicts")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 14    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/7694596",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\ngit checkout -b newwork\ngit stash apply\ngit commit ...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("13. Usage scenario: git: How to create a branch of my current work, but stay on my original branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/13917693",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v(" git stash\n\n git stash apply\n\n git stash list\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("14. Usage scenario: How to temporarily ignore untracked files on git pull?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/49906096",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\n// after you have pulled from remote\ngit stash apply \n// OR\ngit stash pop\n\ngit reset --hard\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("15. Usage scenario: Solving merge conflict on git stash apply")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/61503238",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you want to inspect what is in your topmost stash, use :\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show a summary of what files were touched :")]),s._v("\ngit stash show\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will show the diff of what is stashed :")]),s._v("\ngit stash show -p\n\n▲ If you want to list all the stuff you currently have in your stashes :\ngit stash list\n\n▲ If you want to inspect a specific stash :\ngit stash show [-p] stash@{xx}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stash@{0} is the topmost stash,")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 'git stash show stash@{0}' is the same as 'git stash show'")]),s._v("\n\ngit stash apply stash@{xx}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v('16. Usage scenario: How do I do "git update"?')])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/6300262",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git pull origin master")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git pull origin master")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash apply")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("17. Usage scenario: move to another branch and 'saving' current changes")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/41071707",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you have changes in Branch A:\nwhile in branch A, do \ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hint_to_what_stash_contains"')]),s._v(" \n\ngit stash apply\n\n▲ If you have multiple stashes, you can list them and choose which stash to apply.\ngit stash list\ngit stash apply stash@\\{<STASH_NUMBER>\\}\n\ngit checkout brancha\nedit files\ngit add <file(s)>\ngit commit --amend # You can also change the commit message if you want.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[a("strong",[s._v("18. Usage scenario: How can i stash without cleaning the working area?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/53110755",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m saving"')]),s._v("\ngit stash apply # apply stash, but don't remove it from list of stashes\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("19. Usage scenario: Git commands to save current files in temporary branch without committing to master")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48511158",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\ngit checkout -b messybranch\ngit stash apply\ngit add .\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"commit"')]),s._v("\ngit push origin messybranch\ngit checkout master // clean master\n\ngit merge messybranch\n\ngit cherry-pick #commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("20. Usage scenario: How to drop file in a stash without applying it?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-show.html"}},[s._v("git show")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/43755572",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If your working tree is clean (no modified files), you can checkout the files you want :\ngit checkout stash@{0} -- file1 file2 file3\n\n▲ If you want something closer to the behaviour of git stash apply, you can create a patch and apply it :\ngit show -p stash@{0} -- file1 file2 file3 | git apply -\n\ngit diff --name-only stash@{0}^ stash@{0}\n\n▲ If you want to get all files except one :\ngit show -p stash@{0} -- $(git diff --name-only stash@{0}^ stash@{0} |\\\n                           grep -v "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"thefile"')]),s._v(")\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("21. Usage scenario: Did I lose my data on switching to another branch git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/22551795",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash apply\n\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("22. Usage scenario: Git reset --soft head after Git stash - how can I get my most recently committed code")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/34172439",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("23. Usage scenario: Git copy changes from one branch to another without committing the changes in source branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/61287813",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("24. Usage scenario: Push changes on many files into separate branches")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38913732",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit checkout master\ngit pull origin master\ngit checkout -b feature1\n\ngit stash apply\n\ngit add <path/to/file1>\ngit add <path/to/file2>\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# etc.")]),s._v("\n\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Junior commit with first set of files'")]),s._v("\ngit push origin feature1\n\ngit stash\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("25. Usage scenario: How can I get git clone --recursive A B to use the submodule repositories in A?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/9934128",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("   (cd A; git stash)\n   cp -r A B\n   (cd B; git stash drop)\n   (cd A; git stash apply)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("26. Usage scenario: How do I git stash my work, pull from github, and put my work back into project?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38546445",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash drop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("27. Usage scenario: Apply stash with untracked files already committed")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/34477197",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash -u\ngit stash apply\ngit add -A\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dummy"')]),s._v("\ngit merge --no-ff autocommit -s ours\ngit checkout autocommit\ngit merge - --squash\ngit commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Autocommit of build %VERSION%"')]),s._v("\ngit checkout -\ngit reset --hard HEAD~2\ngit stash pop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("28. Usage scenario: Restore a "),a("em",[s._v("remote")]),s._v(" file after solving a merge conflict using")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rerere.html"}},[s._v("git rerere")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/56185358",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ If you haven't done any further commits, you can recover the merge conflicts in a particular file with this command:\ngit checkout --merge -- that/particular/file\n\n▲ If all fails, you still have the stash available, and you can start over again with all merge conflicts in all files:\ngit reset --hard   # warning! erases all your uncommitted changes\ngit stash apply    # recover the stash and all its conflicts\n\n▲ If I were in your position, I would do the following (which is slightly expert usage):\ngit commit -a           # keep a record of what I have done so far\ngit reset --hard HEAD~  # go back before the commit to start over\ngit stash apply\ngit checkout --merge -- that/particular/file\ngit rerere forget -- that/particular/file\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h2",{attrs:{id:"branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[s._v("#")]),s._v(" 🔹 branch")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How do I merge my local uncommitted changes into another Git branch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 946    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/556986",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\ngit checkout branch2\ngit stash pop\n\ngit stash\ngit checkout branch2\ngit stash list       # to check the various stash made in different branch\ngit stash apply x    # to select the right one\n\ngit stash\ngit stash branch branch2\n\ngit stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to cherry-pick from stash in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 41    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[s._v("git merge")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/16862384",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git cherry-pick "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stash@{0}"')]),s._v(" -m 1\n\ngit stash branch stashchanges\ngit commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"changes that were stashed"')]),s._v("\ngit checkout master\ngit merge stashchanges\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: how can one determine the origin of a git stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[s._v("git for-each-ref")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/53182337",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ TL;DR\ngit stash branch newbranch\n\n▲ A literal answer to the question\ngit for-each-ref --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%(refname:short)'")]),s._v(" \\\n    --points-at $(git rev-parse refs/stash~1) refs/heads\n\n▲ Long\n...--E--F--G   <-- master\n         \\\n          H   <-- develop\n\n...--E--F--G   <-- master\n         \\\n          H--I   <-- develop (HEAD)\n\n...--E--F--G   <-- master\n         \\\n          H   <-- develop (HEAD)\n          |\\\n          i-w   <-- refs/stash\n\n...--E--F--G   <-- master\n         \\\n          H--I   <-- develop (HEAD)\n          |\\\n          i-w   <-- refs/stash\n\n...--E--F--G   <-- master\n         \\\n          H   <-- recover (HEAD)\n           \\\n            I   <-- develop\n\n...--E--F--G   <-- master\n         \\\n          H--J   <-- recover (HEAD)\n           \\\n            I   <-- develop\n\n▲ What if develop still points to commit H?\n...--E--F--G   <-- master\n         \\\n          H   <-- develop\n           \\\n            J   <-- recover (HEAD)\n\n▲ What about the three-commit stash?\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How can I ignore spaces when applying a git stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/69018739",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git status    # make sure all is clean; if not, commit or stash\n\ngit stash branch temp-branch stash@{2}\ngit status\ngit commit     # optional: use if desired to save index before adding\ngit add ...    # add all files as needed\ngit commit     # make the commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How to merge a stash after removing a file locally and commiting the change?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/56468927",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash branch newbranch stash@{3}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: Git move files from 1 branch to another")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/47284582",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash branch feature/<wahetever>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: Branch from stash creates two new parent commits")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/69457794",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git branch tmp <commit-specifier>\n\ngit stash branch newbranch tmp\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: Save stashed files into another folder")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/40095890",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash branch tempbranch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"clear"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clear"}},[s._v("#")]),s._v(" 🔹 clear")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How can I delete all of my Git stashes at once?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3061    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/11369406",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash clear\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to copy local changes from one pc to another using git")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/31854676",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save myWork\n\ngit stash show -p  > myWork.txt\n\ngit apply myWork.txt\n\ngit stash clear\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: Git: How Can I get back to my MASTER without committing?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/14406974",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("DESCRIPTION\n       Use git stash when you want to record the current state of the working\n       directory and the index, but want to go back to a clean working\n       directory. The command saves your local modifications away and reverts\n       the working directory to match the HEAD commit.\n\ngit stash list\n\ngit stash clear\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How do I segregate my changes in git branches when I'm not ready to commit?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-clean.html"}},[s._v("git clean")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/23076160",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash clear\n\ngit reset --hard\ngit clean -fd\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: git stash clear, except a specific stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/41292070",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\ngit reset --hard HEAD && git stash pop stash@{$1} && git stash clear && git stash\n\ngit alias.clear-except "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"! git reset --hard HEAD && git stash pop stash@{$1} && git stash clear && git stash"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: With Git, how can I commit some changes in the working copy to a different branch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[s._v("git cherry-pick")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[s._v("git remote")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-init.html"}},[s._v("git init")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/1845957",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git add --patch <files>      # record every change to move to master\ngit commit\n\ngit stash\ngit checkout master\ngit cherry-pick <commitid>\n\ngit checkout <branch>\ngit rebase master\n\ngit rebase --skip\n\ngit add --patch <files>      # record every change to move to master\n\ngit stash --keep-index       # clear the working copy only\ngit checkout master -m       # merge the index.\ngit commit\n\ngit checkout <branchname>\ngit rebase master            # move to branch start to the tip of master.\ngit stash apply              # restore working copy, auto merges the changes\n\nmkdir ../newrepos\ncd ../newrepos\ngit init\ngit remote add origin /path/to/your/repository\ngit fetch master:remotes/origin/master  # fetch remote master to local remotes/origin/master\ngit checkout -t origin/master           # make new "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"master"')]),s._v(" branch, link to remote, checkout.\n\ngit commit\ngit push origin master                  # inject the change in the original repository.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h2",{attrs:{id:"drop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#drop"}},[s._v("#")]),s._v(" 🔹 drop")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How can I rename a git stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 319    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/35549615",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: WIP on master: Add some very important feature \nstash@{1}: WIP on master: Fix some silly bug\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash drop stash@{1}")]),s._v("\nDropped stash@{1} (af8fdeee49a03d1b4609f294635e7f0d622e03db)\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash store"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Very descriptive message"')]),s._v(" af8fdeee49a03d1b4609f294635e7f0d622e03db\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: Very descriptive message\nstash@{1}: WIP on master: Add some very important feature\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: Stash changes to specific files")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 67    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/12305243",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("▲ You can add the files with changes you want to keep, then stash the rest of the files and clear the stash:\ngit add file2.cpp file2.h file3.cpp\ngit stash --keep-index\n\n▲ At this point, you"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'ve stashed your unwanted changes. If you'")]),s._v("d like to permanently get rid of them, run:\ngit stash drop\n\n▲ Now you have file2.cpp, file2.h, and file3.cpp staged for commit. If you then want to stash these files (and not commit them):\ngit reset\ngit stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: git delete last stash commit only")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48814643",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash drop stash@{1}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash apply stash@{1}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash pop stash@{1}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How can I apply and drop my latest git stash in the same command?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/11351786",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("pop [--index] [-q|--quiet] [<stash>]\n\n    Remove a single stashed state from the stash list and apply it on\n    top of the current working tree state, i.e., do the inverse operation\n    of git stash save. The working directory must match the index.\n\n    Applying the state can fail with conflicts; in this case, it is not\n    removed from the stash list. You need to resolve the conflicts by hand\n    and call git stash drop manually afterwards.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How can I remove selective stashes in git?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/59290534",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("for N in 6 4 3 1; do git stash drop stash@\\{$N}; done\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: In git, how can I remove Windows line endings from changed lines only?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/36092339",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup-before-removing-windows-line-endings'")]),s._v(" &&\ngit stash show -p | perl -pe "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^([+][^\\r]*)\\r/$1/g'")]),s._v(" | git apply - &&\ngit stash drop\n\ngit stash save "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'backup-before-removing-windows-line-endings'")]),s._v("\n\ngit stash show -p | perl -pe "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/^([+][^\\r]*)\\r/$1/g'")]),s._v(" | git apply -\n\ngit stash drop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: Drop all stashes associated with a particular branch")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/17694661",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash list | grep -E "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash@{[0-9]+}.+ YOUR_BRANCH_NAME'")]),s._v(" | cut -d "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("':'")]),s._v(" -f 1 | xargs git stash drop\n\ngit stash list --grep="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'YOUR_BRANCHNAME'")]),s._v(" --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%gd'")]),s._v(" | xargs git stash drop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: git stash drop: How can I delete older stashed states without dropping the latest X?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/52523005",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash drop stash@\\{{4..1}\\}")]),s._v("\nToo many revisions specified: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash@{4}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash@{3}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash@{2}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash@{1}'")]),s._v("\n\n$ for i in {4..1}; do\n>     git stash drop stash@{$i};\n> done\nDropped stash@{4} (175f810a53b06da05752b5f08d0b6550ca10dc55)\nDropped stash@{3} (3526a0929dac4e9042f7abd806846b5d527b0f2a)\nDropped stash@{2} (44357bb60f406d29a5d39ea0b5586578223953ac)\nDropped stash@{1} (c97f46ecab45846cc2c6138d7ca05348293344ce)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: How to amend the message in a git stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/50379979",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# get the parents of refs/stash as $1 and $2; $3 exists if there is a u commit")]),s._v("\nset -- $(git rev-parse refs/stash^@)\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# convert these to "-p $1 -p $2 -p $3"')]),s._v("\ncase $# in\n2) parents="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-p $1 -p $2"')]),s._v(";;\n3) parents="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-p $1 -p $2 -p $3"')]),s._v(";;\n*) fatal "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/stash does not appear to be a valid stash"')]),s._v(";;\nesac\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# find the stashed w commit's tree")]),s._v("\ntree=$(git rev-parse refs/stash^{tree}) || exit\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# optional: for editing purposes, gather the current message")]),s._v("\nexisting_message=$(git log --no-walk --pretty=format:%B refs/stash)\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# obtain an updated message in some fashion")]),s._v("\n[snip]\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# create a new w commit, suitable for "git stash store"')]),s._v("\nnew_w_commit=$(git commit-tree $parents "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$new_message"')]),s._v(" $tree)\n\ngit stash drop --quiet\ngit stash store --quiet -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$new_message"')]),s._v(" $new_w_commit\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: How to delete stashes as a batch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38669131",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("echo stash@\\{{8..5}\\} stash@\\{{3,1}\\} | xargs -rn1 git stash drop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: How do I git stash my work, pull from github, and put my work back into project?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/38546445",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit stash apply\n\ngit stash drop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: How can I get git clone --recursive A B to use the submodule repositories in A?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/9934128",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("   (cd A; git stash)\n   cp -r A B\n   (cd B; git stash drop)\n   (cd A; git stash apply)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h2",{attrs:{id:"create"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create"}},[s._v("#")]),s._v(" 🔹 create")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: Git command to save a stash without modifying working tree?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 34    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/6318570",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# git-stash-snap")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Save snapshot of working tree into the stash without modifying working tree.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# First argument (optional) is the stash message.")]),s._v("\nif [ -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" ]; then\n        git update-ref -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" refs/stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git stash create \\"$1\\")"')]),s._v("\nelse\n        HASH=`git stash create`\n        MESSAGE=`git log --no-walk --pretty="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"tformat:%-s"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$HASH"')]),s._v("`\n        git update-ref -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$MESSAGE"')]),s._v(" refs/stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$HASH"')]),s._v("\nfi\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to keep Git stash index unchanged when adding new stash")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/50934903",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("hash=$(git stash create)\nif [ "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$hash"')]),s._v(" == "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v(" ]; then\n    echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nothing to save!"')]),s._v("\nelse\n    git update-ref refs/private-stash $hash\n    echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"new private-stash created"')]),s._v("\nfi\n\ngit stash apply refs/private-stash\ngit update-ref -d refs/private-stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h2",{attrs:{id:"store"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#store"}},[s._v("#")]),s._v(" 🔹 store")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How can I rename a git stash?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 319    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/35549615",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: WIP on master: Add some very important feature \nstash@{1}: WIP on master: Fix some silly bug\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash drop stash@{1}")]),s._v("\nDropped stash@{1} (af8fdeee49a03d1b4609f294635e7f0d622e03db)\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash store"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -m")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Very descriptive message"')]),s._v(" af8fdeee49a03d1b4609f294635e7f0d622e03db\n\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git stash list")]),s._v("\nstash@{0}: Very descriptive message\nstash@{1}: WIP on master: Add some very important feature\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: How to git stash pop the last stash created on current branch?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-help.html"}},[s._v("git help")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[s._v("git write-tree")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff-files.html"}},[s._v("git diff-files")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff-tree.html"}},[s._v("git diff-tree")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rerere.html"}},[s._v("git rerere")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[s._v("git ls-files")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[s._v("git rev-list")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[s._v("git reflog")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[s._v("git read-tree")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[s._v("git checkout-index")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[s._v("git symbolic-ref")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-status.html"}},[s._v("git status")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-clean.html"}},[s._v("git clean")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/37571483",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("cur_ref=`git rev-parse --abbrev-ref HEAD`\nstash_path=refs/bstash/${cur_ref}\nmkdir -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${stash_path}"')]),s._v("\nref_stash=${stash_path}/stash\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Copyright (c) 2007, Nanako Shiraishi")]),s._v("\n\ndashless=$(basename "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$0"')]),s._v(" | sed -e "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s/-/ /'")]),s._v(')\nUSAGE="list [<options>]\n   or: $dashless show [<stash>]\n   or: $dashless drop [-q|--quiet] [<stash>]\n   or: $dashless ( pop | apply ) [--index] [-q|--quiet] [<stash>]\n   or: $dashless branch <branchname> [<stash>]\n   or: $dashless [save [--patch] [-k|--[no-]keep-index] [-q|--quiet]\n               [-u|--include-untracked] [-a|--all] [<message>]]\n   or: $dashless clear"\n\nSUBDIRECTORY_OK=Yes\nOPTIONS_SPEC=\nSTART_DIR=$(pwd)\n. git-sh-setup\n. git-sh-i18n\nrequire_work_tree\ncd_to_toplevel\n\nTMP='),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$GIT_DIR/.git-stash.$$"')]),s._v("\nTMPindex=${GIT_INDEX_FILE-"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --git-path index)"')]),s._v("}.stash.$$\ntrap "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'rm -f "$TMP-"* "$TMPindex"\'')]),s._v(" 0\n\ncur_ref=`git rev-parse --abbrev-ref HEAD`\nstash_path=refs/bstash/${cur_ref}\nmkdir -p "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${stash_path}"')]),s._v("\nref_stash=${stash_path}/stash\n\nif git config --get-colorbool color.interactive; then\n       help_color="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"$(git config --get-color color.interactive.help 'red bold')\"")]),s._v("\n       reset_color="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"$(git config --get-color '' reset)\"")]),s._v("\nelse\n       help_color=\n       reset_color=\nfi\n\nno_changes () {\n    git diff-index --quiet --cached HEAD --ignore-submodules -- &&\n    git diff-files --quiet --ignore-submodules &&\n    (test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v(" || test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(untracked_files)"')]),s._v(")\n}\n\nuntracked_files () {\n    excl_opt=--exclude-standard\n    test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"all"')]),s._v(" && excl_opt=\n    git ls-files -o -z $excl_opt\n}\n\nclear_stash () {\n    if test $# != 0\n    then\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("git stash clear with parameters is unimplemented"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    fi\n    if current=$(git rev-parse --verify --quiet $ref_stash)\n    then\n        git update-ref -d $ref_stash $current\n    fi\n}\n\ncreate_stash () {\n    stash_msg="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\n    untracked="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$2"')]),s._v("\n\n    git update-index -q --refresh\n    if no_changes\n    then\n        exit 0\n    fi\n\n    # state of the base commit\n    if b_commit=$(git rev-parse --verify HEAD)\n    then\n        head=$(git rev-list --oneline -n 1 HEAD --)\n    else\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("You do not have the initial commit yet"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    fi\n\n    if branch=$(git symbolic-ref -q HEAD)\n    then\n        branch=${branch#refs/heads/}\n    else\n        branch="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'(no branch)'")]),s._v("\n    fi\n    msg=$(printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%s: %s'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$head"')]),s._v(")\n\n    # state of the index\n    i_tree=$(git write-tree) &&\n    i_commit=$(printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'index on %s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$msg"')]),s._v(" |\n        git commit-tree $i_tree -p $b_commit) ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot save the current index state"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v("\n    then\n        # Untracked files are stored by themselves in a parentless commit, for\n        # ease of unpacking later.\n        u_commit=$(\n            untracked_files | (\n                GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" &&\n                export GIT_INDEX_FILE &&\n                rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" &&\n                git update-index -z --add --remove --stdin &&\n                u_tree=$(git write-tree) &&\n                printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'untracked files on %s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$msg"')]),s._v(" | git commit-tree $u_tree  &&\n                rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v("\n        ) ) || die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Cannot save the untracked files"')]),s._v("\n\n        untracked_commit_option="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-p $u_commit"')]),s._v(";\n    else\n        untracked_commit_option=\n    fi\n\n    if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$patch_mode"')]),s._v("\n    then\n\n        # state of the working tree\n        w_tree=$( (\n            git read-tree --index-output="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" -m $i_tree &&\n            GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" &&\n            export GIT_INDEX_FILE &&\n            git diff --name-only -z HEAD -- >"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-stagenames"')]),s._v(" &&\n            git update-index -z --add --remove --stdin <"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-stagenames"')]),s._v(" &&\n            git write-tree &&\n            rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v("\n        ) ) ||\n            die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot save the current worktree state"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    else\n\n        rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-index"')]),s._v(" &&\n        GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-index"')]),s._v(" git read-tree HEAD &&\n\n        # find out what the user wants\n        GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-index"')]),s._v(" \\\n            git add--interactive --patch=stash -- &&\n\n        # state of the working tree\n        w_tree=$(GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-index"')]),s._v(" git write-tree) ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot save the current worktree state"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n        git diff-tree -p HEAD $w_tree -- >"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-patch"')]),s._v(" &&\n        test -s "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-patch"')]),s._v(" ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("No changes selected"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n        rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-index"')]),s._v(" ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot remove temporary index (can't happen)"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    fi\n\n    # create the stash\n    if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v("\n    then\n        stash_msg=$(printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'WIP on %s'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$msg"')]),s._v(")\n    else\n        stash_msg=$(printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'On %s: %s'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v(")\n    fi\n    w_commit=$(printf "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'%s\\n'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v(" |\n    git commit-tree $w_tree -p $b_commit -p $i_commit $untracked_commit_option) ||\n    die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot record working tree state"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n}\n\nstore_stash () {\n    while test $# != 0\n    do\n        case "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" in\n        -m|--message)\n            shift\n            stash_msg="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\n            ;;\n        -q|--quiet)\n            quiet=t\n            ;;\n        *)\n            break\n            ;;\n        esac\n        shift\n    done\n    test $# = 1 ||\n    die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("\\"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$dashless store\\" requires one <commit> argument"')]),s._v(')"\n\n    w_commit='),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\n    if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v("\n    then\n        stash_msg="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Created via \\"git stash store\\"."')]),s._v("\n    fi\n\n    git update-ref --create-reflog -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v(" $ref_stash $w_commit\n    ret=$?\n    test $ret != 0 && test -z $quiet &&\n    die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("Cannot update \\$ref_stash with \\$w_commit"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    return $ret\n}\n\nsave_stash () {\n    keep_index=\n    patch_mode=\n    untracked=\n    while test $# != 0\n    do\n        case "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" in\n        -k|--keep-index)\n            keep_index=t\n            ;;\n        --no-keep-index)\n            keep_index=n\n            ;;\n        -p|--patch)\n            patch_mode=t\n            # only default to keep if we don't already have an override\n            test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$keep_index"')]),s._v(" && keep_index=t\n            ;;\n        -q|--quiet)\n            GIT_QUIET=t\n            ;;\n        -u|--include-untracked)\n            untracked=untracked\n            ;;\n        -a|--all)\n            untracked=all\n            ;;\n        --help)\n            show_help\n            ;;\n        --)\n            shift\n            break\n            ;;\n        -*)\n            option="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\n            # TRANSLATORS: $option is an invalid option, like\n            # `--blah-blah'. The 7 spaces at the beginning of the\n            # second line correspond to "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: "')]),s._v(". So you should line\n            # up the second line with however many characters the\n            # translation of "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: "')]),s._v(" takes in your language. E.g. in\n            # English this is:\n            #\n"),a("span",{pre:!0,attrs:{class:"token command"}},[s._v("            #    $ git stash save"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" --blah")]),s._v("-blah 2>&1 | head"),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -n")]),s._v(" 2")]),s._v("\n            #    error: unknown option for "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash save'")]),s._v(": --blah-blah\n            #           To provide a message, use git stash save -- "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--blah-blah'")]),s._v('\n            eval_gettextln "error: unknown option for '),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'stash save'")]),s._v(": \\$option\n       To provide a message, use git stash save -- "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\$option'")]),s._v('"\n            usage\n            ;;\n        *)\n            break\n            ;;\n        esac\n        shift\n    done\n\n    if test -n '),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$patch_mode"')]),s._v(" && test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v("\n    then\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Can\'t use --patch and --include-untracked or --all at the same time"')]),s._v("\n    fi\n\n    stash_msg="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v("\n\n    git update-index -q --refresh\n    if no_changes\n    then\n        say "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("No local changes to save"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n        exit 0\n    fi\n    git reflog exists $ref_stash ||\n        clear_stash || die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot initialize stash"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    create_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v(" $untracked\n    store_stash -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v(" -q $w_commit ||\n    die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot save the current status"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    say Saved working directory and index state "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$stash_msg"')]),s._v("\n\n    if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$patch_mode"')]),s._v("\n    then\n        git reset --hard ${GIT_QUIET:+-q}\n        test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"all"')]),s._v(" && CLEAN_X_OPTION=-x || CLEAN_X_OPTION=\n        if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$untracked"')]),s._v("\n        then\n            git clean --force --quiet -d $CLEAN_X_OPTION\n        fi\n\n        if test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$keep_index"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t"')]),s._v(" && test -n $i_tree\n        then\n            git read-tree --reset -u $i_tree\n        fi\n    else\n        git apply -R < "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-patch"')]),s._v(" ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot remove worktree changes"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n        if test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$keep_index"')]),s._v(" != "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"t"')]),s._v("\n        then\n            git reset\n        fi\n    fi\n}\n\nhave_stash () {\n    git rev-parse --verify --quiet $ref_stash >/dev/null\n}\n\nlist_stash () {\n    have_stash || return 0\n    git log --format="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%gd: %gs"')]),s._v(" -g --first-parent -m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" $ref_stash --\n}\n\nshow_stash () {\n    ALLOW_UNKNOWN_FLAGS=t\n    assert_stash_like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n    if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$FLAGS"')]),s._v("\n    then\n        if test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config --bool stash.showStat || echo true)"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),s._v("\n        then\n            FLAGS=--stat\n        fi\n\n        if test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git config --bool stash.showPatch || echo false)"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"true"')]),s._v("\n        then\n            FLAGS=${FLAGS}${FLAGS:+ }-p\n        fi\n\n        if test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$FLAGS"')]),s._v("\n        then\n            return 0\n        fi\n    fi\n\n    git diff ${FLAGS} $b_commit $w_commit\n}\n\nshow_help () {\n    exec git help stash\n    exit 1\n}\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Parses the remaining options looking for flags and")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# at most one revision defaulting to ${ref_stash}@{0}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if none found.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Derives related tree and commit objects from the")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# revision, if one is found.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stash records the work tree, and is a merge between the")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# base commit (first parent) and the index tree (second parent).")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   REV is set to the symbolic version of the specified stash-like commit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   IS_STASH_LIKE is non-blank if ${REV} looks like a stash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   IS_STASH_REF is non-blank if the ${REV} looks like a stash ref")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   s is set to the SHA1 of the stash commit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   w_commit is set to the commit containing the working tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   b_commit is set to the base commit")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   i_commit is set to the commit containing the index tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   u_commit is set to the commit containing the untracked files tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   w_tree is set to the working tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   b_tree is set to the base tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   i_tree is set to the index tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   u_tree is set to the untracked files tree")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   GIT_QUIET is set to t if -q is specified")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   INDEX_OPTION is set to --index if --index is specified.")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   FLAGS is set to the remaining flags (if allowed)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dies if:")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   * too many revisions specified")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   * no revision is specified and there is no stash stack")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   * a revision is specified which cannot be resolve to a SHA1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   * a non-existent stash reference is specified")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#   * unknown flags were set and ALLOW_UNKNOWN_FLAGS is not "t"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n\nparse_flags_and_rev()\n{\n    test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$PARSE_CACHE"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v(" && return 0 # optimisation\n    PARSE_CACHE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v("\n\n    IS_STASH_LIKE=\n    IS_STASH_REF=\n    INDEX_OPTION=\n    s=\n    w_commit=\n    b_commit=\n    i_commit=\n    u_commit=\n    w_tree=\n    b_tree=\n    i_tree=\n    u_tree=\n\n    REV=$(git rev-parse --no-flags --symbolic --sq "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(") || exit 1\n\n    FLAGS=\n    for opt\n    do\n        case "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$opt"')]),s._v(" in\n            -q|--quiet)\n                GIT_QUIET=-t\n            ;;\n            --index)\n                INDEX_OPTION=--index\n            ;;\n            --help)\n                show_help\n            ;;\n            -*)\n                test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ALLOW_UNKNOWN_FLAGS"')]),s._v(" = t ||\n                    die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("unknown option: \\$opt"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n                FLAGS="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${FLAGS}${FLAGS:+ }$opt"')]),s._v("\n            ;;\n        esac\n    done\n\n    eval set -- $REV\n\n    case $# in\n        0)\n            have_stash || die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("No stash found."),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n            set -- ${ref_stash}@{0}\n        ;;\n        1)\n            :\n        ;;\n        *)\n            die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("Too many revisions specified: \\$REV"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n        ;;\n    esac\n\n    REV=$(git rev-parse --symbolic --verify --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(") || {\n        reference="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v("\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("\\$reference is not a valid reference"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    }\n\n    i_commit=$(git rev-parse --verify --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^2"')]),s._v(") &&\n    set -- $(git rev-parse "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^1"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV:"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^1:"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^2:"')]),s._v(" 2>/dev/null) &&\n    s=$1 &&\n    w_commit=$1 &&\n    b_commit=$2 &&\n    w_tree=$3 &&\n    b_tree=$4 &&\n    i_tree=$5 &&\n    IS_STASH_LIKE=t &&\n    test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref_stash"')]),s._v(" = "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse --symbolic-full-name "')]),s._v("${REV%@*}"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v(" &&\n    IS_STASH_REF=t\n\n    u_commit=$(git rev-parse --verify --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^3"')]),s._v(") &&\n    u_tree=$(git rev-parse "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$REV^3:"')]),s._v(" 2>/dev/null)\n}\n\nis_stash_like()\n{\n    parse_flags_and_rev "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$IS_STASH_LIKE"')]),s._v("\n}\n\nassert_stash_like() {\n    is_stash_like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" || {\n        args="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v("\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\$args'")]),s._v(" is not a stash-like commit"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    }\n}\n\nis_stash_ref() {\n    is_stash_like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" && test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$IS_STASH_REF"')]),s._v("\n}\n\nassert_stash_ref() {\n    is_stash_ref "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" || {\n        args="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v("\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\$args'")]),s._v(" is not a stash reference"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    }\n}\n\napply_stash () {\n\n    assert_stash_like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n    git update-index -q --refresh || die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("unable to refresh index"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    # current index state\n    c_tree=$(git write-tree) ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot apply a stash in the middle of a merge"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    unstashed_index_tree=\n    if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$INDEX_OPTION"')]),s._v(" && test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$b_tree"')]),s._v(" != "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$i_tree"')]),s._v(" &&\n            test "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$c_tree"')]),s._v(" != "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$i_tree"')]),s._v("\n    then\n        git diff-tree --binary $s^2^..$s^2 | git apply --cached\n        test $? -ne 0 &&\n            die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Conflicts in index. Try without --index."),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n        unstashed_index_tree=$(git write-tree) ||\n            die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Could not save index tree"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n        git reset\n    fi\n\n    if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$u_tree"')]),s._v("\n    then\n        GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" git-read-tree "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$u_tree"')]),s._v(" &&\n        GIT_INDEX_FILE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" git checkout-index --all &&\n        rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMPindex"')]),s._v(" ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Could not restore untracked files from stash'")]),s._v('\n    fi\n\n    eval "\n        GITHEAD_$w_tree='),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Stashed changes'")]),s._v(" &&\n        GITHEAD_$c_tree="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Updated upstream'")]),s._v(" &&\n        GITHEAD_$b_tree="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Version stash was based on'")]),s._v(' &&\n        export GITHEAD_$w_tree GITHEAD_$c_tree GITHEAD_$b_tree\n    "\n\n    if test -n '),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$GIT_QUIET"')]),s._v("\n    then\n        GIT_MERGE_VERBOSITY=0 && export GIT_MERGE_VERBOSITY\n    fi\n    if git merge-recursive $b_tree -- $c_tree $w_tree\n    then\n        # No conflict\n        if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$unstashed_index_tree"')]),s._v("\n        then\n            git read-tree "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$unstashed_index_tree"')]),s._v("\n        else\n            a="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$TMP-added"')]),s._v(" &&\n            git diff-index --cached --name-only --diff-filter=A $c_tree >"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$a"')]),s._v(" &&\n            git read-tree --reset $c_tree &&\n            git update-index --add --stdin <"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$a"')]),s._v(" ||\n                die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("Cannot unstage modified files"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n            rm -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$a"')]),s._v("\n        fi\n        squelch=\n        if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$GIT_QUIET"')]),s._v("\n        then\n            squelch="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'>/dev/null 2>&1'")]),s._v("\n        fi\n        (cd "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$START_DIR"')]),s._v(" && eval "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git status $squelch"')]),s._v(") || :\n    else\n        # Merge conflict; keep the exit status from merge-recursive\n        status=$?\n        git rerere\n        if test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$INDEX_OPTION"')]),s._v("\n        then\n            gettextln "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Index was not unstashed."')]),s._v(" >&2\n        fi\n        exit $status\n    fi\n}\n\npop_stash() {\n    assert_stash_ref "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n    if apply_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    then\n        drop_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    else\n        status=$?\n        say "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The stash is kept in case you need it again."')]),s._v("\n        exit $status\n    fi\n}\n\ndrop_stash () {\n    assert_stash_ref "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n    git reflog delete --updateref --rewrite "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${REV}"')]),s._v(" &&\n        say "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("Dropped \\${REV} (\\$s)"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v(" ||\n        die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(eval_gettext "')]),s._v("\\${REV}: Could not drop stash entry"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n\n    # clear_stash if we just dropped the last stash entry\n    git rev-parse --verify --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref_stash@{0}"')]),s._v(" >/dev/null ||\n    clear_stash\n}\n\napply_to_branch () {\n    test -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" || die "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("No branch name specified"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('")"')]),s._v("\n    branch=$1\n    shift 1\n\n    set -- --index "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    assert_stash_like "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n    git checkout -b $branch $REV^ &&\n    apply_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v(" && {\n        test -z "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$IS_STASH_REF"')]),s._v(" || drop_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    }\n}\n\nPARSE_CACHE="),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'--not-parsed'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# The default command is "save" if nothing but options are given')]),s._v("\nseen_non_option=\nfor opt\ndo\n    case "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$opt"')]),s._v(" in\n    -*) ;;\n    *) seen_non_option=t; break ;;\n    esac\ndone\n\ntest -n "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$seen_non_option"')]),s._v(" || set "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"save"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Main command set")]),s._v("\ncase "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$1"')]),s._v(" in\nlist)\n    shift\n    list_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\nshow)\n    shift\n    show_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\nsave)\n    shift\n    save_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\napply)\n    shift\n    apply_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\nclear)\n    shift\n    clear_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\ncreate)\n    shift\n    create_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$*"')]),s._v(" && echo "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$w_commit"')]),s._v("\n    ;;\nstore)\n    shift\n    store_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\ndrop)\n    shift\n    drop_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\npop)\n    shift\n    pop_stash "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\nbranch)\n    shift\n    apply_to_branch "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$@"')]),s._v("\n    ;;\n*)\n    case $# in\n    0)\n        save_stash &&\n        say "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(gettext "')]),s._v("(To restore them type \\"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git stash apply\\")"')]),s._v(')"\n        ;;\n    *)\n        usage\n    esac\n    ;;\nesac\n\ngit checkout --detach\nHEAD is now at 17d6f21... ...\n\ntouch test\ngit add test\n\ngit bstash\nSaved working directory and index state WIP on (no branch): 17d6f21 ....\nHEAD is now at 17d6f21 ....\n\ngit bstash list\nbstash/HEAD/stash@{0}: WIP on (no branch): 17d6f21 ...\n\ngit bstash show bstash/HEAD/stash@{0}\n  test | 0\n  1 file changed, 0 insertions(+), 0 deletions(-)\n\ngit bstash pop\nHEAD detached at 17d6f21\nChanges to be committed:\n   (use '),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"git reset HEAD <file>..."')]),s._v(" to unstage)\n\n          new file:   test234\n\nDropped refs/bstash/HEAD/stash@{0} (a118c012496b68e4245bbcba20a146870b5c356e)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br"),a("span",{staticClass:"line-number"},[s._v("106")]),a("br"),a("span",{staticClass:"line-number"},[s._v("107")]),a("br"),a("span",{staticClass:"line-number"},[s._v("108")]),a("br"),a("span",{staticClass:"line-number"},[s._v("109")]),a("br"),a("span",{staticClass:"line-number"},[s._v("110")]),a("br"),a("span",{staticClass:"line-number"},[s._v("111")]),a("br"),a("span",{staticClass:"line-number"},[s._v("112")]),a("br"),a("span",{staticClass:"line-number"},[s._v("113")]),a("br"),a("span",{staticClass:"line-number"},[s._v("114")]),a("br"),a("span",{staticClass:"line-number"},[s._v("115")]),a("br"),a("span",{staticClass:"line-number"},[s._v("116")]),a("br"),a("span",{staticClass:"line-number"},[s._v("117")]),a("br"),a("span",{staticClass:"line-number"},[s._v("118")]),a("br"),a("span",{staticClass:"line-number"},[s._v("119")]),a("br"),a("span",{staticClass:"line-number"},[s._v("120")]),a("br"),a("span",{staticClass:"line-number"},[s._v("121")]),a("br"),a("span",{staticClass:"line-number"},[s._v("122")]),a("br"),a("span",{staticClass:"line-number"},[s._v("123")]),a("br"),a("span",{staticClass:"line-number"},[s._v("124")]),a("br"),a("span",{staticClass:"line-number"},[s._v("125")]),a("br"),a("span",{staticClass:"line-number"},[s._v("126")]),a("br"),a("span",{staticClass:"line-number"},[s._v("127")]),a("br"),a("span",{staticClass:"line-number"},[s._v("128")]),a("br"),a("span",{staticClass:"line-number"},[s._v("129")]),a("br"),a("span",{staticClass:"line-number"},[s._v("130")]),a("br"),a("span",{staticClass:"line-number"},[s._v("131")]),a("br"),a("span",{staticClass:"line-number"},[s._v("132")]),a("br"),a("span",{staticClass:"line-number"},[s._v("133")]),a("br"),a("span",{staticClass:"line-number"},[s._v("134")]),a("br"),a("span",{staticClass:"line-number"},[s._v("135")]),a("br"),a("span",{staticClass:"line-number"},[s._v("136")]),a("br"),a("span",{staticClass:"line-number"},[s._v("137")]),a("br"),a("span",{staticClass:"line-number"},[s._v("138")]),a("br"),a("span",{staticClass:"line-number"},[s._v("139")]),a("br"),a("span",{staticClass:"line-number"},[s._v("140")]),a("br"),a("span",{staticClass:"line-number"},[s._v("141")]),a("br"),a("span",{staticClass:"line-number"},[s._v("142")]),a("br"),a("span",{staticClass:"line-number"},[s._v("143")]),a("br"),a("span",{staticClass:"line-number"},[s._v("144")]),a("br"),a("span",{staticClass:"line-number"},[s._v("145")]),a("br"),a("span",{staticClass:"line-number"},[s._v("146")]),a("br"),a("span",{staticClass:"line-number"},[s._v("147")]),a("br"),a("span",{staticClass:"line-number"},[s._v("148")]),a("br"),a("span",{staticClass:"line-number"},[s._v("149")]),a("br"),a("span",{staticClass:"line-number"},[s._v("150")]),a("br"),a("span",{staticClass:"line-number"},[s._v("151")]),a("br"),a("span",{staticClass:"line-number"},[s._v("152")]),a("br"),a("span",{staticClass:"line-number"},[s._v("153")]),a("br"),a("span",{staticClass:"line-number"},[s._v("154")]),a("br"),a("span",{staticClass:"line-number"},[s._v("155")]),a("br"),a("span",{staticClass:"line-number"},[s._v("156")]),a("br"),a("span",{staticClass:"line-number"},[s._v("157")]),a("br"),a("span",{staticClass:"line-number"},[s._v("158")]),a("br"),a("span",{staticClass:"line-number"},[s._v("159")]),a("br"),a("span",{staticClass:"line-number"},[s._v("160")]),a("br"),a("span",{staticClass:"line-number"},[s._v("161")]),a("br"),a("span",{staticClass:"line-number"},[s._v("162")]),a("br"),a("span",{staticClass:"line-number"},[s._v("163")]),a("br"),a("span",{staticClass:"line-number"},[s._v("164")]),a("br"),a("span",{staticClass:"line-number"},[s._v("165")]),a("br"),a("span",{staticClass:"line-number"},[s._v("166")]),a("br"),a("span",{staticClass:"line-number"},[s._v("167")]),a("br"),a("span",{staticClass:"line-number"},[s._v("168")]),a("br"),a("span",{staticClass:"line-number"},[s._v("169")]),a("br"),a("span",{staticClass:"line-number"},[s._v("170")]),a("br"),a("span",{staticClass:"line-number"},[s._v("171")]),a("br"),a("span",{staticClass:"line-number"},[s._v("172")]),a("br"),a("span",{staticClass:"line-number"},[s._v("173")]),a("br"),a("span",{staticClass:"line-number"},[s._v("174")]),a("br"),a("span",{staticClass:"line-number"},[s._v("175")]),a("br"),a("span",{staticClass:"line-number"},[s._v("176")]),a("br"),a("span",{staticClass:"line-number"},[s._v("177")]),a("br"),a("span",{staticClass:"line-number"},[s._v("178")]),a("br"),a("span",{staticClass:"line-number"},[s._v("179")]),a("br"),a("span",{staticClass:"line-number"},[s._v("180")]),a("br"),a("span",{staticClass:"line-number"},[s._v("181")]),a("br"),a("span",{staticClass:"line-number"},[s._v("182")]),a("br"),a("span",{staticClass:"line-number"},[s._v("183")]),a("br"),a("span",{staticClass:"line-number"},[s._v("184")]),a("br"),a("span",{staticClass:"line-number"},[s._v("185")]),a("br"),a("span",{staticClass:"line-number"},[s._v("186")]),a("br"),a("span",{staticClass:"line-number"},[s._v("187")]),a("br"),a("span",{staticClass:"line-number"},[s._v("188")]),a("br"),a("span",{staticClass:"line-number"},[s._v("189")]),a("br"),a("span",{staticClass:"line-number"},[s._v("190")]),a("br"),a("span",{staticClass:"line-number"},[s._v("191")]),a("br"),a("span",{staticClass:"line-number"},[s._v("192")]),a("br"),a("span",{staticClass:"line-number"},[s._v("193")]),a("br"),a("span",{staticClass:"line-number"},[s._v("194")]),a("br"),a("span",{staticClass:"line-number"},[s._v("195")]),a("br"),a("span",{staticClass:"line-number"},[s._v("196")]),a("br"),a("span",{staticClass:"line-number"},[s._v("197")]),a("br"),a("span",{staticClass:"line-number"},[s._v("198")]),a("br"),a("span",{staticClass:"line-number"},[s._v("199")]),a("br"),a("span",{staticClass:"line-number"},[s._v("200")]),a("br"),a("span",{staticClass:"line-number"},[s._v("201")]),a("br"),a("span",{staticClass:"line-number"},[s._v("202")]),a("br"),a("span",{staticClass:"line-number"},[s._v("203")]),a("br"),a("span",{staticClass:"line-number"},[s._v("204")]),a("br"),a("span",{staticClass:"line-number"},[s._v("205")]),a("br"),a("span",{staticClass:"line-number"},[s._v("206")]),a("br"),a("span",{staticClass:"line-number"},[s._v("207")]),a("br"),a("span",{staticClass:"line-number"},[s._v("208")]),a("br"),a("span",{staticClass:"line-number"},[s._v("209")]),a("br"),a("span",{staticClass:"line-number"},[s._v("210")]),a("br"),a("span",{staticClass:"line-number"},[s._v("211")]),a("br"),a("span",{staticClass:"line-number"},[s._v("212")]),a("br"),a("span",{staticClass:"line-number"},[s._v("213")]),a("br"),a("span",{staticClass:"line-number"},[s._v("214")]),a("br"),a("span",{staticClass:"line-number"},[s._v("215")]),a("br"),a("span",{staticClass:"line-number"},[s._v("216")]),a("br"),a("span",{staticClass:"line-number"},[s._v("217")]),a("br"),a("span",{staticClass:"line-number"},[s._v("218")]),a("br"),a("span",{staticClass:"line-number"},[s._v("219")]),a("br"),a("span",{staticClass:"line-number"},[s._v("220")]),a("br"),a("span",{staticClass:"line-number"},[s._v("221")]),a("br"),a("span",{staticClass:"line-number"},[s._v("222")]),a("br"),a("span",{staticClass:"line-number"},[s._v("223")]),a("br"),a("span",{staticClass:"line-number"},[s._v("224")]),a("br"),a("span",{staticClass:"line-number"},[s._v("225")]),a("br"),a("span",{staticClass:"line-number"},[s._v("226")]),a("br"),a("span",{staticClass:"line-number"},[s._v("227")]),a("br"),a("span",{staticClass:"line-number"},[s._v("228")]),a("br"),a("span",{staticClass:"line-number"},[s._v("229")]),a("br"),a("span",{staticClass:"line-number"},[s._v("230")]),a("br"),a("span",{staticClass:"line-number"},[s._v("231")]),a("br"),a("span",{staticClass:"line-number"},[s._v("232")]),a("br"),a("span",{staticClass:"line-number"},[s._v("233")]),a("br"),a("span",{staticClass:"line-number"},[s._v("234")]),a("br"),a("span",{staticClass:"line-number"},[s._v("235")]),a("br"),a("span",{staticClass:"line-number"},[s._v("236")]),a("br"),a("span",{staticClass:"line-number"},[s._v("237")]),a("br"),a("span",{staticClass:"line-number"},[s._v("238")]),a("br"),a("span",{staticClass:"line-number"},[s._v("239")]),a("br"),a("span",{staticClass:"line-number"},[s._v("240")]),a("br"),a("span",{staticClass:"line-number"},[s._v("241")]),a("br"),a("span",{staticClass:"line-number"},[s._v("242")]),a("br"),a("span",{staticClass:"line-number"},[s._v("243")]),a("br"),a("span",{staticClass:"line-number"},[s._v("244")]),a("br"),a("span",{staticClass:"line-number"},[s._v("245")]),a("br"),a("span",{staticClass:"line-number"},[s._v("246")]),a("br"),a("span",{staticClass:"line-number"},[s._v("247")]),a("br"),a("span",{staticClass:"line-number"},[s._v("248")]),a("br"),a("span",{staticClass:"line-number"},[s._v("249")]),a("br"),a("span",{staticClass:"line-number"},[s._v("250")]),a("br"),a("span",{staticClass:"line-number"},[s._v("251")]),a("br"),a("span",{staticClass:"line-number"},[s._v("252")]),a("br"),a("span",{staticClass:"line-number"},[s._v("253")]),a("br"),a("span",{staticClass:"line-number"},[s._v("254")]),a("br"),a("span",{staticClass:"line-number"},[s._v("255")]),a("br"),a("span",{staticClass:"line-number"},[s._v("256")]),a("br"),a("span",{staticClass:"line-number"},[s._v("257")]),a("br"),a("span",{staticClass:"line-number"},[s._v("258")]),a("br"),a("span",{staticClass:"line-number"},[s._v("259")]),a("br"),a("span",{staticClass:"line-number"},[s._v("260")]),a("br"),a("span",{staticClass:"line-number"},[s._v("261")]),a("br"),a("span",{staticClass:"line-number"},[s._v("262")]),a("br"),a("span",{staticClass:"line-number"},[s._v("263")]),a("br"),a("span",{staticClass:"line-number"},[s._v("264")]),a("br"),a("span",{staticClass:"line-number"},[s._v("265")]),a("br"),a("span",{staticClass:"line-number"},[s._v("266")]),a("br"),a("span",{staticClass:"line-number"},[s._v("267")]),a("br"),a("span",{staticClass:"line-number"},[s._v("268")]),a("br"),a("span",{staticClass:"line-number"},[s._v("269")]),a("br"),a("span",{staticClass:"line-number"},[s._v("270")]),a("br"),a("span",{staticClass:"line-number"},[s._v("271")]),a("br"),a("span",{staticClass:"line-number"},[s._v("272")]),a("br"),a("span",{staticClass:"line-number"},[s._v("273")]),a("br"),a("span",{staticClass:"line-number"},[s._v("274")]),a("br"),a("span",{staticClass:"line-number"},[s._v("275")]),a("br"),a("span",{staticClass:"line-number"},[s._v("276")]),a("br"),a("span",{staticClass:"line-number"},[s._v("277")]),a("br"),a("span",{staticClass:"line-number"},[s._v("278")]),a("br"),a("span",{staticClass:"line-number"},[s._v("279")]),a("br"),a("span",{staticClass:"line-number"},[s._v("280")]),a("br"),a("span",{staticClass:"line-number"},[s._v("281")]),a("br"),a("span",{staticClass:"line-number"},[s._v("282")]),a("br"),a("span",{staticClass:"line-number"},[s._v("283")]),a("br"),a("span",{staticClass:"line-number"},[s._v("284")]),a("br"),a("span",{staticClass:"line-number"},[s._v("285")]),a("br"),a("span",{staticClass:"line-number"},[s._v("286")]),a("br"),a("span",{staticClass:"line-number"},[s._v("287")]),a("br"),a("span",{staticClass:"line-number"},[s._v("288")]),a("br"),a("span",{staticClass:"line-number"},[s._v("289")]),a("br"),a("span",{staticClass:"line-number"},[s._v("290")]),a("br"),a("span",{staticClass:"line-number"},[s._v("291")]),a("br"),a("span",{staticClass:"line-number"},[s._v("292")]),a("br"),a("span",{staticClass:"line-number"},[s._v("293")]),a("br"),a("span",{staticClass:"line-number"},[s._v("294")]),a("br"),a("span",{staticClass:"line-number"},[s._v("295")]),a("br"),a("span",{staticClass:"line-number"},[s._v("296")]),a("br"),a("span",{staticClass:"line-number"},[s._v("297")]),a("br"),a("span",{staticClass:"line-number"},[s._v("298")]),a("br"),a("span",{staticClass:"line-number"},[s._v("299")]),a("br"),a("span",{staticClass:"line-number"},[s._v("300")]),a("br"),a("span",{staticClass:"line-number"},[s._v("301")]),a("br"),a("span",{staticClass:"line-number"},[s._v("302")]),a("br"),a("span",{staticClass:"line-number"},[s._v("303")]),a("br"),a("span",{staticClass:"line-number"},[s._v("304")]),a("br"),a("span",{staticClass:"line-number"},[s._v("305")]),a("br"),a("span",{staticClass:"line-number"},[s._v("306")]),a("br"),a("span",{staticClass:"line-number"},[s._v("307")]),a("br"),a("span",{staticClass:"line-number"},[s._v("308")]),a("br"),a("span",{staticClass:"line-number"},[s._v("309")]),a("br"),a("span",{staticClass:"line-number"},[s._v("310")]),a("br"),a("span",{staticClass:"line-number"},[s._v("311")]),a("br"),a("span",{staticClass:"line-number"},[s._v("312")]),a("br"),a("span",{staticClass:"line-number"},[s._v("313")]),a("br"),a("span",{staticClass:"line-number"},[s._v("314")]),a("br"),a("span",{staticClass:"line-number"},[s._v("315")]),a("br"),a("span",{staticClass:"line-number"},[s._v("316")]),a("br"),a("span",{staticClass:"line-number"},[s._v("317")]),a("br"),a("span",{staticClass:"line-number"},[s._v("318")]),a("br"),a("span",{staticClass:"line-number"},[s._v("319")]),a("br"),a("span",{staticClass:"line-number"},[s._v("320")]),a("br"),a("span",{staticClass:"line-number"},[s._v("321")]),a("br"),a("span",{staticClass:"line-number"},[s._v("322")]),a("br"),a("span",{staticClass:"line-number"},[s._v("323")]),a("br"),a("span",{staticClass:"line-number"},[s._v("324")]),a("br"),a("span",{staticClass:"line-number"},[s._v("325")]),a("br"),a("span",{staticClass:"line-number"},[s._v("326")]),a("br"),a("span",{staticClass:"line-number"},[s._v("327")]),a("br"),a("span",{staticClass:"line-number"},[s._v("328")]),a("br"),a("span",{staticClass:"line-number"},[s._v("329")]),a("br"),a("span",{staticClass:"line-number"},[s._v("330")]),a("br"),a("span",{staticClass:"line-number"},[s._v("331")]),a("br"),a("span",{staticClass:"line-number"},[s._v("332")]),a("br"),a("span",{staticClass:"line-number"},[s._v("333")]),a("br"),a("span",{staticClass:"line-number"},[s._v("334")]),a("br"),a("span",{staticClass:"line-number"},[s._v("335")]),a("br"),a("span",{staticClass:"line-number"},[s._v("336")]),a("br"),a("span",{staticClass:"line-number"},[s._v("337")]),a("br"),a("span",{staticClass:"line-number"},[s._v("338")]),a("br"),a("span",{staticClass:"line-number"},[s._v("339")]),a("br"),a("span",{staticClass:"line-number"},[s._v("340")]),a("br"),a("span",{staticClass:"line-number"},[s._v("341")]),a("br"),a("span",{staticClass:"line-number"},[s._v("342")]),a("br"),a("span",{staticClass:"line-number"},[s._v("343")]),a("br"),a("span",{staticClass:"line-number"},[s._v("344")]),a("br"),a("span",{staticClass:"line-number"},[s._v("345")]),a("br"),a("span",{staticClass:"line-number"},[s._v("346")]),a("br"),a("span",{staticClass:"line-number"},[s._v("347")]),a("br"),a("span",{staticClass:"line-number"},[s._v("348")]),a("br"),a("span",{staticClass:"line-number"},[s._v("349")]),a("br"),a("span",{staticClass:"line-number"},[s._v("350")]),a("br"),a("span",{staticClass:"line-number"},[s._v("351")]),a("br"),a("span",{staticClass:"line-number"},[s._v("352")]),a("br"),a("span",{staticClass:"line-number"},[s._v("353")]),a("br"),a("span",{staticClass:"line-number"},[s._v("354")]),a("br"),a("span",{staticClass:"line-number"},[s._v("355")]),a("br"),a("span",{staticClass:"line-number"},[s._v("356")]),a("br"),a("span",{staticClass:"line-number"},[s._v("357")]),a("br"),a("span",{staticClass:"line-number"},[s._v("358")]),a("br"),a("span",{staticClass:"line-number"},[s._v("359")]),a("br"),a("span",{staticClass:"line-number"},[s._v("360")]),a("br"),a("span",{staticClass:"line-number"},[s._v("361")]),a("br"),a("span",{staticClass:"line-number"},[s._v("362")]),a("br"),a("span",{staticClass:"line-number"},[s._v("363")]),a("br"),a("span",{staticClass:"line-number"},[s._v("364")]),a("br"),a("span",{staticClass:"line-number"},[s._v("365")]),a("br"),a("span",{staticClass:"line-number"},[s._v("366")]),a("br"),a("span",{staticClass:"line-number"},[s._v("367")]),a("br"),a("span",{staticClass:"line-number"},[s._v("368")]),a("br"),a("span",{staticClass:"line-number"},[s._v("369")]),a("br"),a("span",{staticClass:"line-number"},[s._v("370")]),a("br"),a("span",{staticClass:"line-number"},[s._v("371")]),a("br"),a("span",{staticClass:"line-number"},[s._v("372")]),a("br"),a("span",{staticClass:"line-number"},[s._v("373")]),a("br"),a("span",{staticClass:"line-number"},[s._v("374")]),a("br"),a("span",{staticClass:"line-number"},[s._v("375")]),a("br"),a("span",{staticClass:"line-number"},[s._v("376")]),a("br"),a("span",{staticClass:"line-number"},[s._v("377")]),a("br"),a("span",{staticClass:"line-number"},[s._v("378")]),a("br"),a("span",{staticClass:"line-number"},[s._v("379")]),a("br"),a("span",{staticClass:"line-number"},[s._v("380")]),a("br"),a("span",{staticClass:"line-number"},[s._v("381")]),a("br"),a("span",{staticClass:"line-number"},[s._v("382")]),a("br"),a("span",{staticClass:"line-number"},[s._v("383")]),a("br"),a("span",{staticClass:"line-number"},[s._v("384")]),a("br"),a("span",{staticClass:"line-number"},[s._v("385")]),a("br"),a("span",{staticClass:"line-number"},[s._v("386")]),a("br"),a("span",{staticClass:"line-number"},[s._v("387")]),a("br"),a("span",{staticClass:"line-number"},[s._v("388")]),a("br"),a("span",{staticClass:"line-number"},[s._v("389")]),a("br"),a("span",{staticClass:"line-number"},[s._v("390")]),a("br"),a("span",{staticClass:"line-number"},[s._v("391")]),a("br"),a("span",{staticClass:"line-number"},[s._v("392")]),a("br"),a("span",{staticClass:"line-number"},[s._v("393")]),a("br"),a("span",{staticClass:"line-number"},[s._v("394")]),a("br"),a("span",{staticClass:"line-number"},[s._v("395")]),a("br"),a("span",{staticClass:"line-number"},[s._v("396")]),a("br"),a("span",{staticClass:"line-number"},[s._v("397")]),a("br"),a("span",{staticClass:"line-number"},[s._v("398")]),a("br"),a("span",{staticClass:"line-number"},[s._v("399")]),a("br"),a("span",{staticClass:"line-number"},[s._v("400")]),a("br"),a("span",{staticClass:"line-number"},[s._v("401")]),a("br"),a("span",{staticClass:"line-number"},[s._v("402")]),a("br"),a("span",{staticClass:"line-number"},[s._v("403")]),a("br"),a("span",{staticClass:"line-number"},[s._v("404")]),a("br"),a("span",{staticClass:"line-number"},[s._v("405")]),a("br"),a("span",{staticClass:"line-number"},[s._v("406")]),a("br"),a("span",{staticClass:"line-number"},[s._v("407")]),a("br"),a("span",{staticClass:"line-number"},[s._v("408")]),a("br"),a("span",{staticClass:"line-number"},[s._v("409")]),a("br"),a("span",{staticClass:"line-number"},[s._v("410")]),a("br"),a("span",{staticClass:"line-number"},[s._v("411")]),a("br"),a("span",{staticClass:"line-number"},[s._v("412")]),a("br"),a("span",{staticClass:"line-number"},[s._v("413")]),a("br"),a("span",{staticClass:"line-number"},[s._v("414")]),a("br"),a("span",{staticClass:"line-number"},[s._v("415")]),a("br"),a("span",{staticClass:"line-number"},[s._v("416")]),a("br"),a("span",{staticClass:"line-number"},[s._v("417")]),a("br"),a("span",{staticClass:"line-number"},[s._v("418")]),a("br"),a("span",{staticClass:"line-number"},[s._v("419")]),a("br"),a("span",{staticClass:"line-number"},[s._v("420")]),a("br"),a("span",{staticClass:"line-number"},[s._v("421")]),a("br"),a("span",{staticClass:"line-number"},[s._v("422")]),a("br"),a("span",{staticClass:"line-number"},[s._v("423")]),a("br"),a("span",{staticClass:"line-number"},[s._v("424")]),a("br"),a("span",{staticClass:"line-number"},[s._v("425")]),a("br"),a("span",{staticClass:"line-number"},[s._v("426")]),a("br"),a("span",{staticClass:"line-number"},[s._v("427")]),a("br"),a("span",{staticClass:"line-number"},[s._v("428")]),a("br"),a("span",{staticClass:"line-number"},[s._v("429")]),a("br"),a("span",{staticClass:"line-number"},[s._v("430")]),a("br"),a("span",{staticClass:"line-number"},[s._v("431")]),a("br"),a("span",{staticClass:"line-number"},[s._v("432")]),a("br"),a("span",{staticClass:"line-number"},[s._v("433")]),a("br"),a("span",{staticClass:"line-number"},[s._v("434")]),a("br"),a("span",{staticClass:"line-number"},[s._v("435")]),a("br"),a("span",{staticClass:"line-number"},[s._v("436")]),a("br"),a("span",{staticClass:"line-number"},[s._v("437")]),a("br"),a("span",{staticClass:"line-number"},[s._v("438")]),a("br"),a("span",{staticClass:"line-number"},[s._v("439")]),a("br"),a("span",{staticClass:"line-number"},[s._v("440")]),a("br"),a("span",{staticClass:"line-number"},[s._v("441")]),a("br"),a("span",{staticClass:"line-number"},[s._v("442")]),a("br"),a("span",{staticClass:"line-number"},[s._v("443")]),a("br"),a("span",{staticClass:"line-number"},[s._v("444")]),a("br"),a("span",{staticClass:"line-number"},[s._v("445")]),a("br"),a("span",{staticClass:"line-number"},[s._v("446")]),a("br"),a("span",{staticClass:"line-number"},[s._v("447")]),a("br"),a("span",{staticClass:"line-number"},[s._v("448")]),a("br"),a("span",{staticClass:"line-number"},[s._v("449")]),a("br"),a("span",{staticClass:"line-number"},[s._v("450")]),a("br"),a("span",{staticClass:"line-number"},[s._v("451")]),a("br"),a("span",{staticClass:"line-number"},[s._v("452")]),a("br"),a("span",{staticClass:"line-number"},[s._v("453")]),a("br"),a("span",{staticClass:"line-number"},[s._v("454")]),a("br"),a("span",{staticClass:"line-number"},[s._v("455")]),a("br"),a("span",{staticClass:"line-number"},[s._v("456")]),a("br"),a("span",{staticClass:"line-number"},[s._v("457")]),a("br"),a("span",{staticClass:"line-number"},[s._v("458")]),a("br"),a("span",{staticClass:"line-number"},[s._v("459")]),a("br"),a("span",{staticClass:"line-number"},[s._v("460")]),a("br"),a("span",{staticClass:"line-number"},[s._v("461")]),a("br"),a("span",{staticClass:"line-number"},[s._v("462")]),a("br"),a("span",{staticClass:"line-number"},[s._v("463")]),a("br"),a("span",{staticClass:"line-number"},[s._v("464")]),a("br"),a("span",{staticClass:"line-number"},[s._v("465")]),a("br"),a("span",{staticClass:"line-number"},[s._v("466")]),a("br"),a("span",{staticClass:"line-number"},[s._v("467")]),a("br"),a("span",{staticClass:"line-number"},[s._v("468")]),a("br"),a("span",{staticClass:"line-number"},[s._v("469")]),a("br"),a("span",{staticClass:"line-number"},[s._v("470")]),a("br"),a("span",{staticClass:"line-number"},[s._v("471")]),a("br"),a("span",{staticClass:"line-number"},[s._v("472")]),a("br"),a("span",{staticClass:"line-number"},[s._v("473")]),a("br"),a("span",{staticClass:"line-number"},[s._v("474")]),a("br"),a("span",{staticClass:"line-number"},[s._v("475")]),a("br"),a("span",{staticClass:"line-number"},[s._v("476")]),a("br"),a("span",{staticClass:"line-number"},[s._v("477")]),a("br"),a("span",{staticClass:"line-number"},[s._v("478")]),a("br"),a("span",{staticClass:"line-number"},[s._v("479")]),a("br"),a("span",{staticClass:"line-number"},[s._v("480")]),a("br"),a("span",{staticClass:"line-number"},[s._v("481")]),a("br"),a("span",{staticClass:"line-number"},[s._v("482")]),a("br"),a("span",{staticClass:"line-number"},[s._v("483")]),a("br"),a("span",{staticClass:"line-number"},[s._v("484")]),a("br"),a("span",{staticClass:"line-number"},[s._v("485")]),a("br"),a("span",{staticClass:"line-number"},[s._v("486")]),a("br"),a("span",{staticClass:"line-number"},[s._v("487")]),a("br"),a("span",{staticClass:"line-number"},[s._v("488")]),a("br"),a("span",{staticClass:"line-number"},[s._v("489")]),a("br"),a("span",{staticClass:"line-number"},[s._v("490")]),a("br"),a("span",{staticClass:"line-number"},[s._v("491")]),a("br"),a("span",{staticClass:"line-number"},[s._v("492")]),a("br"),a("span",{staticClass:"line-number"},[s._v("493")]),a("br"),a("span",{staticClass:"line-number"},[s._v("494")]),a("br"),a("span",{staticClass:"line-number"},[s._v("495")]),a("br"),a("span",{staticClass:"line-number"},[s._v("496")]),a("br"),a("span",{staticClass:"line-number"},[s._v("497")]),a("br"),a("span",{staticClass:"line-number"},[s._v("498")]),a("br"),a("span",{staticClass:"line-number"},[s._v("499")]),a("br"),a("span",{staticClass:"line-number"},[s._v("500")]),a("br"),a("span",{staticClass:"line-number"},[s._v("501")]),a("br"),a("span",{staticClass:"line-number"},[s._v("502")]),a("br"),a("span",{staticClass:"line-number"},[s._v("503")]),a("br"),a("span",{staticClass:"line-number"},[s._v("504")]),a("br"),a("span",{staticClass:"line-number"},[s._v("505")]),a("br"),a("span",{staticClass:"line-number"},[s._v("506")]),a("br"),a("span",{staticClass:"line-number"},[s._v("507")]),a("br"),a("span",{staticClass:"line-number"},[s._v("508")]),a("br"),a("span",{staticClass:"line-number"},[s._v("509")]),a("br"),a("span",{staticClass:"line-number"},[s._v("510")]),a("br"),a("span",{staticClass:"line-number"},[s._v("511")]),a("br"),a("span",{staticClass:"line-number"},[s._v("512")]),a("br"),a("span",{staticClass:"line-number"},[s._v("513")]),a("br"),a("span",{staticClass:"line-number"},[s._v("514")]),a("br"),a("span",{staticClass:"line-number"},[s._v("515")]),a("br"),a("span",{staticClass:"line-number"},[s._v("516")]),a("br"),a("span",{staticClass:"line-number"},[s._v("517")]),a("br"),a("span",{staticClass:"line-number"},[s._v("518")]),a("br"),a("span",{staticClass:"line-number"},[s._v("519")]),a("br"),a("span",{staticClass:"line-number"},[s._v("520")]),a("br"),a("span",{staticClass:"line-number"},[s._v("521")]),a("br"),a("span",{staticClass:"line-number"},[s._v("522")]),a("br"),a("span",{staticClass:"line-number"},[s._v("523")]),a("br"),a("span",{staticClass:"line-number"},[s._v("524")]),a("br"),a("span",{staticClass:"line-number"},[s._v("525")]),a("br"),a("span",{staticClass:"line-number"},[s._v("526")]),a("br"),a("span",{staticClass:"line-number"},[s._v("527")]),a("br"),a("span",{staticClass:"line-number"},[s._v("528")]),a("br"),a("span",{staticClass:"line-number"},[s._v("529")]),a("br"),a("span",{staticClass:"line-number"},[s._v("530")]),a("br"),a("span",{staticClass:"line-number"},[s._v("531")]),a("br"),a("span",{staticClass:"line-number"},[s._v("532")]),a("br"),a("span",{staticClass:"line-number"},[s._v("533")]),a("br"),a("span",{staticClass:"line-number"},[s._v("534")]),a("br"),a("span",{staticClass:"line-number"},[s._v("535")]),a("br"),a("span",{staticClass:"line-number"},[s._v("536")]),a("br"),a("span",{staticClass:"line-number"},[s._v("537")]),a("br"),a("span",{staticClass:"line-number"},[s._v("538")]),a("br"),a("span",{staticClass:"line-number"},[s._v("539")]),a("br"),a("span",{staticClass:"line-number"},[s._v("540")]),a("br"),a("span",{staticClass:"line-number"},[s._v("541")]),a("br"),a("span",{staticClass:"line-number"},[s._v("542")]),a("br"),a("span",{staticClass:"line-number"},[s._v("543")]),a("br"),a("span",{staticClass:"line-number"},[s._v("544")]),a("br"),a("span",{staticClass:"line-number"},[s._v("545")]),a("br"),a("span",{staticClass:"line-number"},[s._v("546")]),a("br"),a("span",{staticClass:"line-number"},[s._v("547")]),a("br"),a("span",{staticClass:"line-number"},[s._v("548")]),a("br"),a("span",{staticClass:"line-number"},[s._v("549")]),a("br"),a("span",{staticClass:"line-number"},[s._v("550")]),a("br"),a("span",{staticClass:"line-number"},[s._v("551")]),a("br"),a("span",{staticClass:"line-number"},[s._v("552")]),a("br"),a("span",{staticClass:"line-number"},[s._v("553")]),a("br"),a("span",{staticClass:"line-number"},[s._v("554")]),a("br"),a("span",{staticClass:"line-number"},[s._v("555")]),a("br"),a("span",{staticClass:"line-number"},[s._v("556")]),a("br"),a("span",{staticClass:"line-number"},[s._v("557")]),a("br"),a("span",{staticClass:"line-number"},[s._v("558")]),a("br"),a("span",{staticClass:"line-number"},[s._v("559")]),a("br"),a("span",{staticClass:"line-number"},[s._v("560")]),a("br"),a("span",{staticClass:"line-number"},[s._v("561")]),a("br"),a("span",{staticClass:"line-number"},[s._v("562")]),a("br"),a("span",{staticClass:"line-number"},[s._v("563")]),a("br"),a("span",{staticClass:"line-number"},[s._v("564")]),a("br"),a("span",{staticClass:"line-number"},[s._v("565")]),a("br"),a("span",{staticClass:"line-number"},[s._v("566")]),a("br"),a("span",{staticClass:"line-number"},[s._v("567")]),a("br"),a("span",{staticClass:"line-number"},[s._v("568")]),a("br"),a("span",{staticClass:"line-number"},[s._v("569")]),a("br"),a("span",{staticClass:"line-number"},[s._v("570")]),a("br"),a("span",{staticClass:"line-number"},[s._v("571")]),a("br"),a("span",{staticClass:"line-number"},[s._v("572")]),a("br"),a("span",{staticClass:"line-number"},[s._v("573")]),a("br"),a("span",{staticClass:"line-number"},[s._v("574")]),a("br"),a("span",{staticClass:"line-number"},[s._v("575")]),a("br"),a("span",{staticClass:"line-number"},[s._v("576")]),a("br"),a("span",{staticClass:"line-number"},[s._v("577")]),a("br"),a("span",{staticClass:"line-number"},[s._v("578")]),a("br"),a("span",{staticClass:"line-number"},[s._v("579")]),a("br"),a("span",{staticClass:"line-number"},[s._v("580")]),a("br"),a("span",{staticClass:"line-number"},[s._v("581")]),a("br"),a("span",{staticClass:"line-number"},[s._v("582")]),a("br"),a("span",{staticClass:"line-number"},[s._v("583")]),a("br"),a("span",{staticClass:"line-number"},[s._v("584")]),a("br"),a("span",{staticClass:"line-number"},[s._v("585")]),a("br"),a("span",{staticClass:"line-number"},[s._v("586")]),a("br"),a("span",{staticClass:"line-number"},[s._v("587")]),a("br"),a("span",{staticClass:"line-number"},[s._v("588")]),a("br"),a("span",{staticClass:"line-number"},[s._v("589")]),a("br"),a("span",{staticClass:"line-number"},[s._v("590")]),a("br"),a("span",{staticClass:"line-number"},[s._v("591")]),a("br"),a("span",{staticClass:"line-number"},[s._v("592")]),a("br"),a("span",{staticClass:"line-number"},[s._v("593")]),a("br"),a("span",{staticClass:"line-number"},[s._v("594")]),a("br"),a("span",{staticClass:"line-number"},[s._v("595")]),a("br"),a("span",{staticClass:"line-number"},[s._v("596")]),a("br"),a("span",{staticClass:"line-number"},[s._v("597")]),a("br"),a("span",{staticClass:"line-number"},[s._v("598")]),a("br"),a("span",{staticClass:"line-number"},[s._v("599")]),a("br"),a("span",{staticClass:"line-number"},[s._v("600")]),a("br"),a("span",{staticClass:"line-number"},[s._v("601")]),a("br"),a("span",{staticClass:"line-number"},[s._v("602")]),a("br"),a("span",{staticClass:"line-number"},[s._v("603")]),a("br"),a("span",{staticClass:"line-number"},[s._v("604")]),a("br"),a("span",{staticClass:"line-number"},[s._v("605")]),a("br"),a("span",{staticClass:"line-number"},[s._v("606")]),a("br"),a("span",{staticClass:"line-number"},[s._v("607")]),a("br"),a("span",{staticClass:"line-number"},[s._v("608")]),a("br"),a("span",{staticClass:"line-number"},[s._v("609")]),a("br"),a("span",{staticClass:"line-number"},[s._v("610")]),a("br"),a("span",{staticClass:"line-number"},[s._v("611")]),a("br"),a("span",{staticClass:"line-number"},[s._v("612")]),a("br"),a("span",{staticClass:"line-number"},[s._v("613")]),a("br"),a("span",{staticClass:"line-number"},[s._v("614")]),a("br"),a("span",{staticClass:"line-number"},[s._v("615")]),a("br"),a("span",{staticClass:"line-number"},[s._v("616")]),a("br"),a("span",{staticClass:"line-number"},[s._v("617")]),a("br"),a("span",{staticClass:"line-number"},[s._v("618")]),a("br"),a("span",{staticClass:"line-number"},[s._v("619")]),a("br"),a("span",{staticClass:"line-number"},[s._v("620")]),a("br"),a("span",{staticClass:"line-number"},[s._v("621")]),a("br"),a("span",{staticClass:"line-number"},[s._v("622")]),a("br"),a("span",{staticClass:"line-number"},[s._v("623")]),a("br"),a("span",{staticClass:"line-number"},[s._v("624")]),a("br"),a("span",{staticClass:"line-number"},[s._v("625")]),a("br"),a("span",{staticClass:"line-number"},[s._v("626")]),a("br"),a("span",{staticClass:"line-number"},[s._v("627")]),a("br"),a("span",{staticClass:"line-number"},[s._v("628")]),a("br"),a("span",{staticClass:"line-number"},[s._v("629")]),a("br"),a("span",{staticClass:"line-number"},[s._v("630")]),a("br"),a("span",{staticClass:"line-number"},[s._v("631")]),a("br"),a("span",{staticClass:"line-number"},[s._v("632")]),a("br"),a("span",{staticClass:"line-number"},[s._v("633")]),a("br"),a("span",{staticClass:"line-number"},[s._v("634")]),a("br"),a("span",{staticClass:"line-number"},[s._v("635")]),a("br"),a("span",{staticClass:"line-number"},[s._v("636")]),a("br"),a("span",{staticClass:"line-number"},[s._v("637")]),a("br"),a("span",{staticClass:"line-number"},[s._v("638")]),a("br"),a("span",{staticClass:"line-number"},[s._v("639")]),a("br"),a("span",{staticClass:"line-number"},[s._v("640")]),a("br"),a("span",{staticClass:"line-number"},[s._v("641")]),a("br"),a("span",{staticClass:"line-number"},[s._v("642")]),a("br"),a("span",{staticClass:"line-number"},[s._v("643")]),a("br"),a("span",{staticClass:"line-number"},[s._v("644")]),a("br"),a("span",{staticClass:"line-number"},[s._v("645")]),a("br"),a("span",{staticClass:"line-number"},[s._v("646")]),a("br"),a("span",{staticClass:"line-number"},[s._v("647")]),a("br"),a("span",{staticClass:"line-number"},[s._v("648")]),a("br"),a("span",{staticClass:"line-number"},[s._v("649")]),a("br"),a("span",{staticClass:"line-number"},[s._v("650")]),a("br"),a("span",{staticClass:"line-number"},[s._v("651")]),a("br"),a("span",{staticClass:"line-number"},[s._v("652")]),a("br"),a("span",{staticClass:"line-number"},[s._v("653")]),a("br"),a("span",{staticClass:"line-number"},[s._v("654")]),a("br"),a("span",{staticClass:"line-number"},[s._v("655")]),a("br"),a("span",{staticClass:"line-number"},[s._v("656")]),a("br"),a("span",{staticClass:"line-number"},[s._v("657")]),a("br"),a("span",{staticClass:"line-number"},[s._v("658")]),a("br"),a("span",{staticClass:"line-number"},[s._v("659")]),a("br"),a("span",{staticClass:"line-number"},[s._v("660")]),a("br"),a("span",{staticClass:"line-number"},[s._v("661")]),a("br"),a("span",{staticClass:"line-number"},[s._v("662")]),a("br"),a("span",{staticClass:"line-number"},[s._v("663")]),a("br"),a("span",{staticClass:"line-number"},[s._v("664")]),a("br"),a("span",{staticClass:"line-number"},[s._v("665")]),a("br"),a("span",{staticClass:"line-number"},[s._v("666")]),a("br"),a("span",{staticClass:"line-number"},[s._v("667")]),a("br"),a("span",{staticClass:"line-number"},[s._v("668")]),a("br"),a("span",{staticClass:"line-number"},[s._v("669")]),a("br"),a("span",{staticClass:"line-number"},[s._v("670")]),a("br"),a("span",{staticClass:"line-number"},[s._v("671")]),a("br"),a("span",{staticClass:"line-number"},[s._v("672")]),a("br"),a("span",{staticClass:"line-number"},[s._v("673")]),a("br"),a("span",{staticClass:"line-number"},[s._v("674")]),a("br"),a("span",{staticClass:"line-number"},[s._v("675")]),a("br"),a("span",{staticClass:"line-number"},[s._v("676")]),a("br"),a("span",{staticClass:"line-number"},[s._v("677")]),a("br"),a("span",{staticClass:"line-number"},[s._v("678")]),a("br"),a("span",{staticClass:"line-number"},[s._v("679")]),a("br"),a("span",{staticClass:"line-number"},[s._v("680")]),a("br"),a("span",{staticClass:"line-number"},[s._v("681")]),a("br"),a("span",{staticClass:"line-number"},[s._v("682")]),a("br")])]),a("h2",{attrs:{id:"none"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[s._v("#")]),s._v(" 🔹None")]),s._v(" "),a("p",[a("strong",[s._v("1. Usage scenario: How do you stash an untracked file?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2582    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/835561",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash --include-untracked\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("2. Usage scenario: Export a stash to another computer")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 322    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/3973058",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git apply patchfile\n\ngit stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("3. Usage scenario: git replace local version with remote version")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 191    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/5288284",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n\ngit checkout origin/master\n\ngit reset --hard origin/master\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("4. Usage scenario: How to stash my previous commit?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 96    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/26885183",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git rebase -i HEAD~2\n\ngit reset --soft HEAD~1\ngit stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("5. Usage scenario: How to make git stash include new files that have not been staged?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 66    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/37968072",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("6. Usage scenario: How to discard uncommitted changes in SourceTree?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 65    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/20249116",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("7. Usage scenario: Git: how to use stash -p to stash specific files?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 33    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/23704897",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash --patch\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("8. Usage scenario: How can I create a GIT Stash from a Commit?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-apply.html"}},[s._v("git apply")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[s._v("git diff")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/37061393",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git diff YOUR-COMMIT^ YOUR-COMMIT > stash.diff\ngit apply stash.diff\ngit commit .\ngit stash\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("9. Usage scenario: git: Can I stash an untracked file without adding it to the index?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 13    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/7626960",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash --include-untracked\n\ngit stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[a("strong",[s._v("10. Usage scenario: How do i move partial changes (hunks) between commits?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),a("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),a("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(" ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/45061693",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)],1)],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git rebase --interactive A^ master\n\ngit reset HEAD^ -- aa.txt\n\ngit add --patch -- aa.txt\n\ngit commit --amend\n\ngit stash \ngit rebase --continue\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("strong",[s._v("11. Usage scenario: How to use git stash in order to stash partial changes?")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/57270419",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash -p\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("12. Usage scenario: git force update a specific directory")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/11992971",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("13. Usage scenario: git merge: overwrite untracked files")])]),s._v(" "),a("blockquote",[a("p",[a("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),a("a",{attrs:{href:"https://stackoverflow.com/questions/48129041",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),a("OutboundLink")],1)])],1)]),s._v(" "),a("p",[a("strong",[s._v("Example:")])]),s._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[s._v("git stash -u\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);