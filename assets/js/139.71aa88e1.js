(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{568:function(s,e,t){"use strict";t.r(e);var n=t(19),a=Object(n.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("📖 "+s._s(s.$page.readingTime.text)+"    🔡 "+s._s(s.$page.readingTime.words)),t("br")])]),s._v(" "),t("h1",{attrs:{id:"git-symbolic-ref-read-modify-and-delete-symbolic-refs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-symbolic-ref-read-modify-and-delete-symbolic-refs"}},[s._v("#")]),s._v(" 📌 git symbolic-ref - Read, modify and delete symbolic refs")]),s._v(" "),t("h2",{attrs:{id:"q"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q"}},[s._v("#")]),s._v(" 🔹 -q")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to programmatically determine the current checked out Git branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 324    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1593487",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("branch_name="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git symbolic-ref HEAD 2>/dev/null)"')]),s._v(" ||\nbranch_name="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"(unnamed branch)"')]),s._v("     # detached HEAD\n\nbranch_name=${branch_name##refs/heads/}\n\nbranch_name=$(git symbolic-ref -q HEAD)\nbranch_name=${branch_name##refs/heads/}\nbranch_name=${branch_name:-HEAD}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Show git branch name OR commit id")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/47596299",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref --short -q HEAD || git rev-parse --short HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: allow new branch only from master")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24703329",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git branch foo main~1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#! /bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Are we on a branch, or do we have a detached HEAD?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If detached HEAD, just exit 0 = ok to commit.  Otherwise")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set $branch to the short name of the branch.")]),s._v("\nbranch=$(git symbolic-ref -q --abbrev-ref HEAD) || exit 0\n\ncase "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" in\nmaster) exit 0;;   # branch master, just allow (or deny=exit 1)\npreprod) exit 0;;  # branch preprod, just allow\nesac               # all others: fall through to next checks\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Must be a ticket branch.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If there are no branches named preprod and master, skip all this.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Otherwise, get their SHA-1 values.")]),s._v("\nmaster=$(git rev-parse -q --verify preprod) || exit 0\npreprod=$(git rev-parse -q --verify master) || exit 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Ensure that the new commit, once made, will not be a descendant")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# of branch preprod, and will be a descendent of master.  That is,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if we add a new commit node to the graph, ancestors(new) will")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NOT include the commit labeled preprod but WILL include the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# commit labeled master.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note that if preprod and master point to the *same* commit,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# this condition can never be satisfied.  In this particular")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# case (preprod == master) just allow the commit.  (We're not")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# committing *on* master or preprod -- we checked that above --")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# so this commit will not move either of *those* two labels.)")]),s._v("\n[ $master = $preprod ] && exit 0\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A new commit's immediate parent will be whatever the SHA-1 of HEAD")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# is, so we simply check whether HEAD satisfies our conditions.")]),s._v("\nif git merge-base --is-ancestor $preprod HEAD; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ERROR: new commit will be a descendent of"')]),s._v(" 1>&2\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    branch preprod (commit $preprod)"')]),s._v(" 1>&2\n    exit 0\nfi\nif ! git merge-base --is-ancestor $master HEAD; then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ERROR: new commit will not be a descendent of"')]),s._v(" 1>&2\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"    branch master (commit $master)"')]),s._v(" 1>&2\n    exit 0\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: git branch with no commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/22086298",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref -q --short HEAD || echo HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"quiet"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#quiet"}},[s._v("#")]),s._v(" 🔹 --quiet")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Keep a different configuration file (untracked) for each branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/25573219",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# An example post-checkout hook script to perform an action conditionally on")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the branch (if any) just checked out.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Test whether a branch was just checked out")]),s._v("\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$3"')]),s._v(" -eq 1 ]; then\n    # Save the value of HEAD (do not issue an error if HEAD is detached) \n    symrefHEAD=`git symbolic-ref --quiet HEAD`\n    if [  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$symrefHEAD"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/master"')]),s._v(" ]; then\n        # Do something useful for master, e.g.\n        # cp config/conf_master.yaml config/conf.yaml\n        printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('" --- test: You just checked out master. ---\\n"')]),s._v("\n    elif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$symrefHEAD"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/develop"')]),s._v(" ] ; then\n        # Do something useful for develop, e.g.\n        # cp config/conf_develop.yaml config/conf.yaml\n        printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--- test: You just checked out develop. ---\\n"')]),s._v("\n    else\n        # default case\n        printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You just checked out some other branch.\\n"')]),s._v("\n    fi\nelse\n    printf "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"No branch was checked out\\n"')]),s._v("\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br")])]),t("h2",{attrs:{id:"short"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#short"}},[s._v("#")]),s._v(" 🔹 --short")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Prepend Git commit message with partial branch name")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 20    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/19871683",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("BRANCH_NAME=$(git branch 2>/dev/null | grep -e ^* | tr -d "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("' *'")]),s._v(")\n\nbranch=$(git symbolic-ref --short HEAD) || ...\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: git alias to pull --rebase current branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[s._v("git fetch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[s._v("git pull")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29216587",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref --short HEAD\n\ngit config --global alias.<name> "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'!git fetch && git pull --rebase origin $(git symbolic-ref --short HEAD)'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: git branch with no commits")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/22086298",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref -q --short HEAD || echo HEAD\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"m"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#m"}},[s._v("#")]),s._v(" 🔹 -m")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: How to move HEAD to other branch in Git without checking out files or updating any refs?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[s._v("git config")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show-ref.html"}},[s._v("git show-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30311232",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref HEAD refs/heads/existing_branch\n\ngit config --global alias.switch "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('\'!f() { git show-ref --heads --verify "refs/heads/$1" && git symbolic-ref -m "switch to branch $1 not touching workdir" HEAD "refs/heads/$1"; }; f\'')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v('2. Usage scenario: Libgit2Sharp: How to update symbolic ref "HEAD" on remote repo?')])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26616791",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Switch active branch"')]),s._v(" HEAD refs/heads/some-other-branch\n\ngit update-ref -d refs/heads/master\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h2",{attrs:{id:"none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[s._v("#")]),s._v(" 🔹None")]),s._v(" "),t("p",[t("strong",[s._v("1. Usage scenario: Switch Git branch without files checkout")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 133    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[s._v("git reset")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1282894",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref HEAD refs/heads/otherbranch\n\ngit reset\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[t("strong",[s._v("2. Usage scenario: Switch current branch in git bare repository")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 71    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4468341",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref HEAD refs/heads/develop\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("3. Usage scenario: Creating aliases for Git branch names")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 15    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26944313",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref refs/heads/devel   refs/heads/master\ngit symbolic-ref refs/heads/release refs/heads/release-2014-11-02-some-long-text\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[t("strong",[s._v("4. Usage scenario: git root branches... how do they work?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 12    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-clean.html"}},[s._v("git clean")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/9538427",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("$ cd /path/to/fancypants\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git symbolic-ref HEAD refs/heads/gh-pages")]),s._v("\n$ rm .git/index\n"),t("span",{pre:!0,attrs:{class:"token command"}},[s._v("$ git clean"),t("span",{pre:!0,attrs:{class:"token parameter"}},[s._v(" -fdx")])]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("5. Usage scenario: Merging without changing the working directory")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[s._v("git commit-tree")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[s._v("git update-ref")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[s._v("git log")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[s._v("git merge-base")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3409382",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nbranch=master\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or take an argument:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if [ $@ eq 1 ];")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#      branch="$1";')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fi")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure the branch exists")]),s._v("\nif ! git rev-parse --verify --quiet --heads "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$branch"')]),s._v(" > /dev/null; then\n     echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: branch $branch does not exist"')]),s._v("\n     exit 1\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# make sure this could be a fast-forward   ")]),s._v("\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git merge-base HEAD $branch)"')]),s._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$(git rev-parse $branch)"')]),s._v(" ]; then\n    # find the branch name associated with HEAD\n    currentbranch=$(git symbolic-ref HEAD | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'s@.*/@@'")]),s._v(")\n    # make the commit\n    newcommit=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"Merge branch '$currentbranch'\"")]),s._v(" | git commit-tree $(git log -n 1 --pretty=%T HEAD) -p $branch -p HEAD)\n    # move the branch to point to the new commit\n    git update-ref -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"merge $currentbranch: Merge made by simulated no-ff"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/$branch"')]),s._v(" $newcommit\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"error: merging $currentbranch into $branch would not be a fast-forward"')]),s._v("\n    exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[t("strong",[s._v("6. Usage scenario: git change default branch (gitolite)")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13949457",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("/home/git/gitolite# gitolite symbolic-ref -h\n\nUsage:    ssh git@host symbolic-ref <repo> <arguments to git-symbolic-ref>\n\nallow "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'git symbolic-ref'")]),s._v(" over a gitolite connection\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[t("strong",[s._v("7. Usage scenario: How to prevent commit in detached HEAD")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/37269572",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n\nif ! git symbolic-ref HEAD &> /dev/null; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You are in a detached head state! Commit has been blocked. (Use --no-verify to bypass this check.)"')]),s._v("\n  exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("8. Usage scenario: How do I check in files for building with git?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[s._v("git stash")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[s._v("git diff-index")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[s._v("git rev-parse")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/2164243",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/sh")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This hook does two things:")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#  1. update the "info" files that allow the list of references to be')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     queries over dumb transports such as http")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#  2. if this repository looks like it is a non-bare repository, and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#     the checked-out branch is pushed to, then update the working copy.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('#     This makes "push" function somewhat similarly to darcs and bzr.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# To enable this hook, make this file executable by "chmod +x post-update".')]),s._v("\n\ngit-update-server-info\n\nis_bare=$(git-config --get --bool core.bare)\n\nif [ -z "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" ]\nthen\n    # for compatibility's sake, guess\n    git_dir_full=$(cd $GIT_DIR; pwd)\n    case $git_dir_full in */.git) is_bare=false;; *) is_bare=true;; esac\nfi\n\nupdate_wc() {\n    ref=$1\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Push to checked out branch $ref"')]),s._v(" >&2\n    if [ ! -f $GIT_DIR/logs/HEAD ]\n    then\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"E:push to non-bare repository requires a HEAD reflog"')]),s._v(" >&2\n        exit 1\n    fi\n    if (cd $GIT_WORK_TREE; git-diff-files -q --exit-code >/dev/null)\n    then\n        wc_dirty=0\n    else\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:unstaged changes found in working copy"')]),s._v(" >&2\n        wc_dirty=1\n        desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"working copy"')]),s._v("\n    fi\n    if git diff-index --cached HEAD@{1} >/dev/null\n    then\n        index_dirty=0\n    else\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:uncommitted, staged changes found"')]),s._v(" >&2\n        index_dirty=1\n        if [ -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc"')]),s._v(" ]\n        then\n            desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$desc and index"')]),s._v("\n        else\n            desc="),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"index"')]),s._v("\n        fi\n    fi\n    if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$wc_dirty"')]),s._v(" -ne 0 -o "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$index_dirty"')]),s._v(" -ne 0 ]\n    then\n        new=$(git rev-parse HEAD)\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"W:stashing dirty $desc - see git-stash(1)"')]),s._v(" >&2\n        ( trap "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'echo trapped $$; git symbolic-ref HEAD \"'")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"'")]),s._v(" 2 3 13 15 ERR EXIT\n        git-update-ref --no-deref HEAD HEAD@{1}\n        cd $GIT_WORK_TREE\n        git stash save "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dirty $desc before update to $new"')]),s._v(";\n        git-symbolic-ref HEAD "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v("\n        )\n    fi\n\n    # eye candy - show the WC updates :)\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Updating working copy"')]),s._v(" >&2\n    (cd $GIT_WORK_TREE\n    git-diff-index -R --name-status HEAD >&2\n    git-reset --hard HEAD)\n}\n\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$is_bare"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"false"')]),s._v(" ]\nthen\n    active_branch=`git-symbolic-ref HEAD`\n    export GIT_DIR=$(cd $GIT_DIR; pwd)\n    GIT_WORK_TREE=${GIT_WORK_TREE-..}\n    for ref\n    do\n        if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ref"')]),s._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$active_branch"')]),s._v(" ]\n        then\n            update_wc $ref\n        fi\n    done\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br")])]),t("p",[t("strong",[s._v("9. Usage scenario: Git bare repository has master branch checked out?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 6    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[s._v("git branch")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[s._v("git push")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15157781",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git branch mybranch\ngit push origin mybranch\n\ngit symbolic-ref HEAD refs/heads/mybranch\n\ngit push origin :master\n\ngit push origin newbranch:master\ngit symbolic-ref HEAD refs/heads/master #(on bare repo)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[t("strong",[s._v("10. Usage scenario: Disallow branching from and merge of specific branches")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13301387",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#!/bin/bash")]),s._v("\n\nif [[ `git symbolic-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/master"')]),s._v(" ] -a ["),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$USER"')]),s._v(" != "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"user1"')]),s._v("]] then\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"You cannot commit in master!"')]),s._v("\n    exit 1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[t("strong",[s._v("11. Usage scenario: In Git, how do I create a commit that's before the oldest commit?")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[s._v("git commit")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[s._v("git add")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[s._v("git rebase")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[s._v("git checkout")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clean.html"}},[s._v("git clean")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6378465",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref HEAD refs/heads/newbase\nrm .git/index\ngit clean -dxf\n\n<add the files to the directory>\ngit add .\ngit commit -a -m "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"New base commit v6.8.1"')]),s._v("\n\ngit checkout master\ngit rebase newbase\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[t("strong",[s._v("12. Usage scenario: How to create a GIT branch that point to another branch instead of a commit")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24129831",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref refs/heads/trackmaster refs/heads/realmaster\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("13. Usage scenario: GIT how to reset without a commit")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/12691753",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref HEAD refs/heads/new-branch\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("14. Usage scenario: Prepending branch name to git commit")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21242993",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("ticket=$(git symbolic-ref HEAD | awk -F"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $3}'")]),s._v(")\nif [ -n "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"$ticket"')]),s._v(" ]; then\n    sed -i "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.bak'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1s/^/$ticket /"')]),s._v(" $1\nfi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("strong",[s._v("15. Usage scenario: Make git master follow / track another local branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26095178",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref refs/heads/master refs/heads/branch3\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("16. Usage scenario: Create a branch alias and push it")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/25257137",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("git symbolic-ref refs/heads/production refs/heads/Production\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("17. Usage scenario: Prevent dev branch from being worked on locally")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/51352876",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("if [[ `git symbolic-ref HEAD` == "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"refs/heads/your-integration-branch"')]),s._v(" ]]; then exit 1; fi\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("18. Usage scenario: Automating git commit message per branch")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6337967",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)])],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("local branchname=$(timeout 1s git symbolic-ref HEAD 2> /dev/null | cut -b 12-)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("strong",[s._v("19. Usage scenario: How to properly bring only updated files from a github repo")])]),s._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[s._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[s._v("git update-index")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[s._v("git clone")]),s._v(", "),t("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[s._v("git read-tree")]),s._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30600149",target:"_blank",rel:"noopener noreferrer"}},[s._v("Details"),t("OutboundLink")],1)],1)],1)]),s._v(" "),t("p",[t("strong",[s._v("Example:")])]),s._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[s._v("▲ If you effectively have some branch tip checked out in your test directory, but no underlying repo for it, \ngit clone --no-checkout u://r/l ../wip # fetch just the repo, leave worktree as-is\nmv ../wip/.git .                       # move the repo here\n\ngit symbolic-ref HEAD $thatbranch   # set a refname for the worktree content\ngit read-tree HEAD                  # load the default worktree index from there\ngit update-index --refresh          # get its metadata up to date\n\n▲ The index refresh will tell you which if any files in the worktree don"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'t match what the index says, and you haven'")]),s._v("t touched your worktree at all so you can lather-rinse-repeat until you find what commit is closest to what's already out.  You could even reorder things, \ngit read-tree $thatbranch\ngit update-index --refresh\n\ngit symbolic-ref HEAD $thatbranch\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])])])}),[],!1,null,null,null);e.default=a.exports}}]);