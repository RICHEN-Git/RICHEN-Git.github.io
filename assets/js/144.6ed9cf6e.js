(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{571:function(t,e,s){"use strict";s.r(e);var a=s(19),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("📖 "+t._s(t.$page.readingTime.text)+"    🔡 "+t._s(t.$page.readingTime.words)),s("br")])]),t._v(" "),s("h1",{attrs:{id:"git-update-ref-update-the-object-name-stored-in-a-ref-safely"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-update-ref-update-the-object-name-stored-in-a-ref-safely"}},[t._v("#")]),t._v(" 📌 git update-ref - Update the object name stored in a ref safely")]),t._v(" "),s("h2",{attrs:{id:"none"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[t._v("#")]),t._v(" 🔹None")]),t._v(" "),s("p",[s("strong",[t._v("1. Usage scenario: How to revert initial git commit?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 736    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/6637891",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref -d HEAD\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("2. Usage scenario: How to remove the first commit in git?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 432    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[t._v("git rebase")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/32765827",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref -d HEAD\n\ngit rebase -i --root\n\ngit checkout --orphan <new-branch-name>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("3. Usage scenario: Remove refs/original/heads/master from git repo after filter-branch --tree-filter?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 347    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[t._v("git for-each-ref")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/7654880",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref -d refs/original/refs/heads/master\n\ngit for-each-ref --format="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%(refname)"')]),t._v(" refs/original/ | xargs -n 1 git update-ref -d\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("4. Usage scenario: How to remove unreferenced blobs from my Git repository")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 248    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[t._v("git remote")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[t._v("git for-each-ref")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[t._v("git tag")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/14728706",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote rm origin\nrm -rf .git/refs/original/ .git/refs/remotes/ .git/*_HEAD .git/logs/\ngit for-each-ref --format="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%(refname)"')]),t._v(" refs/original/ | xargs -n1 --no-run-if-empty git update-ref -d\n\ngit tag | xargs git tag -d\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("5. Usage scenario: How can I uncommit the last commit in a git bare repository?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 136    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/4625424",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("▲ You can use the git update-ref command. To remove the last commit, you would use:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref HEAD HEAD^")]),t._v("\n\n▲ Or if you're not in the branch from which you cant to remove the last commit:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref refs/heads/branch-name branch-name^")]),t._v("\n\n▲ You could also pass a sha1 if you want:\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref refs/heads/branch-name a12d48e2")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("strong",[t._v("6. Usage scenario: Reset other branch to current without a checkout")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 96    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/1591255",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref refs/heads/OtherBranch refs/heads/CurrentBranch\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("7. Usage scenario: git: How to delete a local ref branch?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 86    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/18506532",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git branch -d commits\n\ngit update-ref -d refs/notes/origin/commits\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("8. Usage scenario: Update the root directory of a branch from the subdirectory of another")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 14    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[t._v("git read-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-mktree.html"}},[t._v("git mktree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-push.html"}},[t._v("git push")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/10591668",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("true | git mktree | xargs git commit-tree | xargs git branch gh-pages\n\ngit checkout gh-pages\ngit read-tree master:html\ngit commit -m"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gh-pages documentation'")]),t._v("\ngit push origin gh-pages\ngit checkout master\n\ngit commit-tree -p gh-pages -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" master:html \\\n| xargs git update-ref refs/heads/gh-pages\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[s("strong",[t._v("9. Usage scenario: Reset remote tracked branch")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 11    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/13954558",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref refs/remotes/origin/master <commit-sha1 or tag>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("10. Usage scenario: Merging without changing the working directory")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 8    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[t._v("git symbolic-ref")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[t._v("git merge-base")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[t._v("git rev-parse")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/3409382",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/bin/bash")]),t._v("\n\nbranch=master\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or take an argument:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if [ $@ eq 1 ];")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#      branch="$1";')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fi")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# make sure the branch exists")]),t._v("\nif ! git rev-parse --verify --quiet --heads "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$branch"')]),t._v(" > /dev/null; then\n     echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error: branch $branch does not exist"')]),t._v("\n     exit 1\nfi\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# make sure this could be a fast-forward   ")]),t._v("\nif [ "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$(git merge-base HEAD $branch)"')]),t._v(" == "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$(git rev-parse $branch)"')]),t._v(" ]; then\n    # find the branch name associated with HEAD\n    currentbranch=$(git symbolic-ref HEAD | sed "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s@.*/@@'")]),t._v(")\n    # make the commit\n    newcommit=$(echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"Merge branch '$currentbranch'\"")]),t._v(" | git commit-tree $(git log -n 1 --pretty=%T HEAD) -p $branch -p HEAD)\n    # move the branch to point to the new commit\n    git update-ref -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"merge $currentbranch: Merge made by simulated no-ff"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"refs/heads/$branch"')]),t._v(" $newcommit\nelse\n    echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error: merging $currentbranch into $branch would not be a fast-forward"')]),t._v("\n    exit 1\nfi\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br")])]),s("p",[s("strong",[t._v("11. Usage scenario: Removing git repository objects entirely from all branches and tags and pushing changes to remote")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 7    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[t._v("git for-each-ref")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[t._v("git update-index")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-config.html"}},[t._v("git config")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[t._v("git reflog")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[t._v("git filter-branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[t._v("git rm")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[t._v("git gc")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-push.html"}},[t._v("git push")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/10633774",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Configure the repository to push all existing branches & tags")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# when none are explicitly specified")]),t._v("\ngit config --add remote.origin.push "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+refs/tags/*:refs/tags/*'")]),t._v("\ngit config --add remote.origin.push "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'+refs/heads/*:refs/heads/*'")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Make sure all local branches exist, so they get filtered")]),t._v("\nfor remote_branch in `git branch --all | grep -v HEAD | sed -e "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s/\\*//'")]),t._v("`; do local_branch=`echo $remote_branch | sed -e "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'s!remotes/origin/!!'")]),t._v("`; git checkout $local_branch; done\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Prevent git <1.7.7.1 from complaining about dirty working directory")]),t._v("\ngit update-index -q --ignore-submodules --refresh\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Do the filtering across --all branches and rewrite tags")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Note that this will necessarily remove signatures on tags")]),t._v("\ngit filter-branch -f --tree-filter "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git rm -rf --ignore-unmatch modules/custom/mymigration/data/photos/*"')]),t._v(" --tag-name-filter cat -- --all\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Remove the backed-up refs")]),t._v("\ngit for-each-ref --format="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%(refname)"')]),t._v(" refs/original/ | xargs -n 1 git update-ref -d\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Clear out the reflog and garbage-collect")]),t._v("\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Push all changes to origin - pushes tags and branches")]),t._v("\ngit push origin\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("p",[s("strong",[t._v('12. Usage scenario: Git: restore files deleted by "git update-ref -d HEAD"')])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 5    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-init.html"}},[t._v("git init")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[t._v("git reflog")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[t._v("git add")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/52336168",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("$ mkdir DeleteHead\n$ cd DeleteHead/\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git init")]),t._v("\n$ touch README.md\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git add"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -A")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Init."')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"More work"')]),t._v(" --allow-empty\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log")]),t._v("\ncommit 83edc8bcb2e627420e47b7933580dc85b21d968e (HEAD -> master)\nDate:   Fri Sep 14 17:42:47 2018 +0100\n\n    More work\n\n"),s("span",{pre:!0,attrs:{class:"token commit-sha1"}},[t._v("commit c175c1fbf9ee8b9d2a9eec3eb3666f19db2b9f99")]),t._v("\nDate:   Fri Sep 14 17:42:38 2018 +0100\n\n    Init.\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -d")]),t._v(" HEAD")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log")]),t._v("\nfatal: your current branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" does not have any commits yet\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reflog")]),t._v("\nfatal: your current branch "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'master'")]),t._v(" does not have any commits yet\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref HEAD 83edc8bcb2e627420e47b7933580dc85b21d968e")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git log")]),t._v("\ncommit 83edc8bcb2e627420e47b7933580dc85b21d968e (HEAD -> master)\nDate:   Fri Sep 14 17:42:47 2018 +0100\n\n    More work\n\n"),s("span",{pre:!0,attrs:{class:"token commit-sha1"}},[t._v("commit c175c1fbf9ee8b9d2a9eec3eb3666f19db2b9f99")]),t._v("\nDate:   Fri Sep 14 17:42:38 2018 +0100\n\n    Init.\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br"),s("span",{staticClass:"line-number"},[t._v("29")]),s("br"),s("span",{staticClass:"line-number"},[t._v("30")]),s("br"),s("span",{staticClass:"line-number"},[t._v("31")]),s("br"),s("span",{staticClass:"line-number"},[t._v("32")]),s("br"),s("span",{staticClass:"line-number"},[t._v("33")]),s("br"),s("span",{staticClass:"line-number"},[t._v("34")]),s("br"),s("span",{staticClass:"line-number"},[t._v("35")]),s("br"),s("span",{staticClass:"line-number"},[t._v("36")]),s("br"),s("span",{staticClass:"line-number"},[t._v("37")]),s("br"),s("span",{staticClass:"line-number"},[t._v("38")]),s("br")])]),s("p",[s("strong",[t._v("13. Usage scenario: How to make next git commit to exactly represent project state from another commit without merge?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 5    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/51906191",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("c=$(git commit-tree Beta^{tree} -p Alpha -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'foo'")]),t._v(")\ntest $c && git update-ref refs/heads/Alpha $c\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[s("strong",[t._v("14. Usage scenario: How to properly commit in repository with Github Pages branch")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 4    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[t._v("git rev-parse")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/26120283",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#! /bin/sh")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commit the generated HTML pages to the branch gh-pages.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Will not push them to GitHub.")]),t._v("\n\nset -e -v\n\ntreehash=$(./hash-tree.py "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"${1:-_build/html}"')]),t._v(")\nparent=$(git rev-parse gh-pages)\n\nmsg="),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Regenerated docs for $(git rev-parse HEAD)"')]),t._v("\ncommithash=$(echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$msg"')]),t._v(" | git commit-tree $treehash -p $parent)\necho "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Updating gh-pages to $commithash"')]),t._v("\ngit update-ref refs/heads/gh-pages "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$commithash"')]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[s("strong",[t._v("15. Usage scenario: Change parent of a commit")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 4    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[t._v("git reset")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[t._v("git rm")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[t._v("git read-tree")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/54727244",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -b")]),t._v(" new-branch master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git rm"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -r")]),t._v(" .                     # in case there are files in C that aren't in E at all")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout <hash-of-E> -- .   # overwrite using E")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit")]),t._v("\n\n▲ Easier way #1\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -b")]),t._v(" new-branch master")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git read-tree"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -u")]),t._v(" <hash-of-E>")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit")]),t._v("\n\n▲ Easier way #2\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit-tree"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -p")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<message>"')]),t._v(" <hash-of-E>^{tree}\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref refs/heads/new-branch <hash-ID>")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git update-ref refs/heads/new-branch $(git commit-tree"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -p")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -m")]),t._v(" ")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<message>"')]),t._v(" <hash-of-E>^{tree})\n\n▲ Easier way #3\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git checkout"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -b")]),t._v(" new-branch <hash-of-E>   # now at E, with E in index and work-tree")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git reset"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" --soft")]),t._v(" master                  # make new-branch identify C, without")]),t._v("\n                                           # touching index or work-tree\n"),s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git commit"),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v(" -c")]),t._v(" <hash-of-E>                # make new commit using E's message")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("p",[s("strong",[t._v('16. Usage scenario: How to "reset" master to follow HEAD again after '),s("code",[t._v("git symbolic-ref")])])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/27482013",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref --no-deref refs/heads/master $sha1\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("17. Usage scenario: Cannot create commit if the filename argument given to hash-object differs from the original filename")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 3    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[t._v("git merge")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/50472248",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git merge <commit-hash>\n\ngit update-ref refs/heads/master 50b7\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("18. Usage scenario: In git, how can I undo the local deletion of an annotated tag that has not been pushed?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-fsck.html"}},[t._v("git fsck")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-show.html"}},[t._v("git show")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/65260430",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git fsck --unreachable | grep tag\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if don't have grep because you're on windows, you can use this:")]),t._v("\ngit fsck --unreachable | sls tag\n\ngit show KEY\n\ngit update-ref refs/tags/NAME KEY\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[s("strong",[t._v("19. Usage scenario: How do I delete a remote symlink to a branch in git?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/36093697",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref -d refs/remotes/m/branch_a\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("20. Usage scenario: How can I check out only a part of a git repository during a bamboo build?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-init.html"}},[t._v("git init")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[t._v("git tag")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-add.html"}},[t._v("git add")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[t._v("git clone")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[t._v("git fetch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-mktree.html"}},[t._v("git mktree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-push.html"}},[t._v("git push")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[t._v("git rev-parse")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/10457397",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("▲ Easiest is probably to have whoever's hosting the repo tag and commit the particular tree you want.  For instance,\ngit tag quickie $(git commit-tree $(git rev-parse HEAD:path/to/dir) </dev/null)\n\ngit fetch upstream quickie\n\n▲ If you want the upstream repo to automatically track a subtree on a branch, you can do (a suitably decrypted version of) something like this:\nsed -n "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'s,^[^ ]* [^ ]* refs/heads/master$,git update-ref refs/heads/master-subtree -m "Auto-tracking master" $(git commit-tree master:subtree -m "Auto-tracking master subtree" $(test -r refs/heads/master-subtree \\&\\& echo -p refs/heads/master-subtree)),p\'')]),t._v(" | sh -x\n\nmkdir ~/tryitout && cd ~/tryitout && git init foo && git init bar --bare\ncat >bar/hooks/post-receive <<"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EOF'")]),t._v("\nsed -n "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'s,^[^ ]* [^ ]* refs/heads/master$,git update-ref refs/heads/master-subtree -m "Auto-tracking master" $(git commit-tree master:subtree -m "Auto-tracking master subtree" $(test -r refs/heads/master-subtree \\&\\& echo -p refs/heads/master-subtree)),p\'')]),t._v(" | sh -x\nEOF\nchmod a+x bar/hooks/post-receive\ncd foo\nmkdir subtree && touch subtree/oooo && git add . && git commit -am-\ngit push ../bar master\n\n▲ If you're sharing a filesystem with the other repo, you can do this:\ngit clone --no-checkout /path/to/local/repo/.git subtree\ncd subtree\ngit commit-tree origin/rev:subtree </dev/null | xargs git checkout -B peek\n\ngit mktree </dev/null | xargs git commit-tree | xargs git checkout -b empty\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br")])]),s("p",[s("strong",[t._v("21. Usage scenario: How to detach branch from the parent in git?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[t._v("git commit")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[t._v("git commit-tree")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[t._v("git filter-branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-log.html"}},[t._v("git log")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[t._v("git rev-parse")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/32596401",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# preserves branch config, remotes, reflog, merge options, what not")]),t._v("\ngit rev-parse develop >.git/info/grafts\ngit filter-branch -- develop\nrm .git/info/grafts\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# preserves branch config etc")]),t._v("\ngit log -1 --format=%B develop \\ \n| git commit-tree develop: \\\n| xargs git update-ref refs/heads/develop\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# wipes branch config etc and you'll have to redo the commit message")]),t._v("\ngit checkout develop^0\ngit branch -D develop\ngit checkout --orphan develop\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# preserves branch config etc")]),t._v("\ngit checkout develop\ngit checkout --orphan junk\ngit commit -C develop\ngit checkout -B develop\ngit branch -D junk\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[s("strong",[t._v("22. Usage scenario: How to make sure others people cannot edit my git notes?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[t._v("git fetch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[t._v("git merge")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[t._v("git checkout")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/13174303",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git checkout refs/notes/commits\ngit fetch origin refs/notes/commits\ngit merge FETCH_HEAD\ngit update-ref refs/notes/commits HEAD\ngit checkout master\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[s("strong",[t._v("23. Usage scenario: How can I checkout another changeset while keeping HEAD on the current changeset?")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/10354813",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref HEAD <desired-SHA>\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("24. Usage scenario: git reset branch")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/11795241",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message"')]),t._v(" refs/heads/whatever new-value old-value\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v("25. Usage scenario: How to revert wrong fetch from remote operation in git")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/12493769",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)])],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git update-ref refs/remotes/remote1/branch\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("strong",[t._v('26. Usage scenario: Libgit2Sharp: How to update symbolic ref "HEAD" on remote repo?')])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 1    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[t._v("git symbolic-ref")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/26616791",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git symbolic-ref -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Switch active branch"')]),t._v(" HEAD refs/heads/some-other-branch\n\ngit update-ref -d refs/heads/master\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[s("strong",[t._v("27. Usage scenario: How to properly get list of remotes files before the pull")])]),t._v(" "),s("blockquote",[s("p",[s("font",{attrs:{size:"2"}},[t._v("💯Score: 1    🔗Associated commands: [ "),s("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[t._v("git diff")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[t._v("git branch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[t._v("git fetch")]),t._v(", "),s("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[t._v("git rev-parse")]),t._v(" ]    🌐"),s("a",{attrs:{href:"https://stackoverflow.com/questions/24245706",target:"_blank",rel:"noopener noreferrer"}},[t._v("Details"),s("OutboundLink")],1)],1)],1)]),t._v(" "),s("p",[s("strong",[t._v("Example:")])]),t._v(" "),s("div",{staticClass:"language-git line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("branch_name=`git branch | grep ^\\* | awk "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{print $2}'")]),t._v("`\nold_commit=$(git rev-parse origin/${branch_name})\ngit fetch\ngit diff --stat origin/${branch_name}\ngit update-ref refs/remotes/origin/${branch_name} $old_commit\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])])}),[],!1,null,null,null);e.default=r.exports}}]);