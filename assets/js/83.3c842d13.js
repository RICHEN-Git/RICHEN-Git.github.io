(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{514:function(e,s,t){"use strict";t.r(s);var n=t(19),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("📖 "+e._s(e.$page.readingTime.text)+"    🔡 "+e._s(e.$page.readingTime.words)),t("br")])]),e._v(" "),t("h1",{attrs:{id:"git-merge-base-find-as-good-common-ancestors-as-possible-for-a-merge"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-merge-base-find-as-good-common-ancestors-as-possible-for-a-merge"}},[e._v("#")]),e._v(" 📌 git merge-base - Find as good common ancestors as possible for a merge")]),e._v(" "),t("h2",{attrs:{id:"octopus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#octopus"}},[e._v("#")]),e._v(" 🔹 --octopus")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Find common ancestor of more than two branches")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-show-branch.html"}},[e._v("git show-branch")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21881744",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git show-branch --merge-base branch1 branch2 branch3 branch4\n\ngit merge-base --octopus branch1 branch2 branch3 bracnh4\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"is-ancestor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#is-ancestor"}},[e._v("#")]),e._v(" 🔹 --is-ancestor")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Checking if develop branch has been merged into feature branch?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/32619594",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git branch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --merged")])]),e._v("\n* main\n  side\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git branch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --no")]),e._v("-merged")]),e._v("\n  ahead\n$ \n\n$ if git merge-base --is-ancestor side main; then\n>     echo side is merged into main\n> fi\nside is merged into main\n$ \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: Checking if branch has already been merged into master or dev branches on remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/53852911",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("if [ git merge-base --is-ancestor source destination ] ...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: How to check whether one branch is an ancestor of the other in Git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26107204",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base --is-ancestor A B\nif [ $? -eq 0 ]\nthen\n   # it's an ancestor\nelse\n   # it's not an ancestor\nfi \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: Identify merge into master")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[e._v("git rev-list")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[e._v("git log")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[e._v("git show")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39151692",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git log --oneline --merges -1  [<rev range>]\n\ngit merge-base --is-ancestor <commit> <commit>\n\nfor merge in $(git rev-list --reverse --first-parent --merges "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${commit}"')]),e._v("..master)\ndo if git merge-base --is-ancestor "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${commit}"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${merge}"')]),e._v("\n   then git show -s "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${merge}"')]),e._v("\n        break\n   fi\ndone\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("h2",{attrs:{id:"fork-point"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fork-point"}},[e._v("#")]),e._v(" 🔹 --fork-point")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: git diff between working copy and branch base")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39143608",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ If you current branch is not master, you can try in a bash shell:\ngit diff $(git merge-base --fork-point master)\n\n▲ If uses git merge-base with --fork-point:\ngit merge-base --fork-point <ref> [<commit>]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: git rebase with the last commit on the branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-switch.html"}},[e._v("git switch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/69084393",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git switch test_branch\ngit reset $(git merge-base --fork-point master test_branch)\n\ngit push -f\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: Append ticket number to all commit messages in git history local and remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-switch.html"}},[e._v("git switch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[e._v("git rebase")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/69432007",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git switch test_branch\ngit rebase -i $(git merge-base --fork-point main)\n\ngit filter-repo --replace-message expressions.txt $(git merge-base --fork-point main)..test_branch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: Finding the common ancestor of a pull request in GitHub Actions")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/69267367",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("  FindCommon:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n      - name: Find common ancestor\n        env:\n          BASE_BRANCH: ${{ github.base_ref }}\n        run: git merge-base --fork-point origin/$BASE_BRANCH\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h2",{attrs:{id:"a"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#a"}},[e._v("#")]),e._v(" 🔹 -a")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Atlassian Stash says that the second pull request merged remotely")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 6    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29140685",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base -a 629fb1f e9042fb\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#all"}},[e._v("#")]),e._v(" 🔹 --all")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Git, how to tell what changed when merging a file 'deleted by us'")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/54350194",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git diff :1:path :3:path\n\n▲ What does all this mean?\n          o--...--L   <-- our-branch (HEAD)\n         /\n...--A--B\n         \\\n          o--...--R   <-- develop\n\n▲ Footnote: more-tangled graphs\n...--A--B--C--D--G--H--K   <-- branch1\n         \\     \\     \\\n          E-----F--I--J--L   <-- branch2\n\ngit merge-base --all branch1 branch2\n\n...--o--o---A--...   <-- branch1\n         \\ /\n          X\n         / \\\n...--o--o---B--...   <-- branch2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: git merge conflicts: which commit was the common ancestor?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/69380610",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base --all HEAD MERGE_HEAD\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[e._v("#")]),e._v(" 🔹None")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Git: Find the most recent common ancestor of two branches")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1225    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1549155",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git merge-base branch2 branch3")]),e._v("\n050dc022f3a65bdc78d97e2b1ac9b595a924c3f2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: Get all files that have been modified in git branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 207    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10641810",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git diff --name-only <notMainDev> $(git merge-base <notMainDev> <mainDev>)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: Git Interactive Merge?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 87    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[e._v("git merge")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[e._v("git show")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10935340",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge --no-commit --no-ff branch-to-merge\n\ngit show HEAD:filename >filename.HEAD\ngit show branch-to-merge:filename >filename.branch\n\ngit show `git merge-base HEAD branch-to-merge`:filename  >filename.base\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: Git squash all commits in branch without conflicting")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 73    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/17354830",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base HEAD BRANCH_YOU_BRANCHED_FROM\n\ngit reset --soft COMMIT_HASH\n\ngit commit -am "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'This is the new re-created one commit'")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: Reference Git branch start commit")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 24    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/2458173",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base master feature-branch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: How can I find the first commit of a branch?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 15    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[e._v("git merge")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[e._v("git rev-list")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15949920",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ There are no commits “on a branch” in git. There are only commits reachable from a branch. And that information is not a very good indicator of what branch that commit originally belonged to. So I see two ways to interpret your question:\n git rev-list ^master mybranch | tail -n 1\n\n▲ I am a little bit confused as to what you want to achieve. If you want a whole branch to be represented by one commit, but still get a merge, You should do this:\ngit checkout mybranch\ngit reset --soft `git merge-base mybranch master`\ngit commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'All of Mybranch'")]),e._v("\ngit checkout master\ngit merge --no-ff mybranch\n\n▲ Note that this will start the squash at the first merge-base. This might not be what you want if you merged master into mybranch before. You can modify this to start at the first commit on mybranch, but not on master (might have wierd and unexpected results in complex histories) by replacing the second command with this:\n git reset --soft `git rev-list ^master mybranch | tail -n 1`^\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: How to squash commits on Bitbucket after they have been pushed?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 11    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[e._v("git rebase")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/34881686",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Start with the existing personal branch that contains all of your commits.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout {ExistingBranchName}")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a new personal branch that will be squashed.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -b")]),e._v(" {BranchName}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Replace {BranchName} with your new branch name.")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Replace "master" with a different CEF branch as appropriate')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# (e.g. "2272", "2171", etc).')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git merge-base {BranchName} master")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git rebase"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --interactive")]),e._v(" {hash}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# If the branch has already been pushed to the remote repository")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# you will need to add the  `--force` argument.")]),e._v("\ngit push origin {BranchName}\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or git push origin {BranchName} --force")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])]),t("p",[t("strong",[e._v("8. Usage scenario: How to get git parent branch name from current branch?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 10    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/38499630",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git merge-base feature develop")]),e._v("\n12345abc\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git merge-base feature release")]),e._v("\n98765fed\n\ngit merge-base 12345abc 98765fed\n98765fed\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("9. Usage scenario: Merging without changing the working directory")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[e._v("git commit-tree")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[e._v("git symbolic-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[e._v("git update-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[e._v("git log")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[e._v("git rev-parse")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3409382",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/bash")]),e._v("\n\nbranch=master\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or take an argument:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# if [ $@ eq 1 ];")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#      branch="$1";')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# fi")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# make sure the branch exists")]),e._v("\nif ! git rev-parse --verify --quiet --heads "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$branch"')]),e._v(" > /dev/null; then\n     echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error: branch $branch does not exist"')]),e._v("\n     exit 1\nfi\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# make sure this could be a fast-forward   ")]),e._v("\nif [ "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git merge-base HEAD $branch)"')]),e._v(" == "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git rev-parse $branch)"')]),e._v(" ]; then\n    # find the branch name associated with HEAD\n    currentbranch=$(git symbolic-ref HEAD | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s@.*/@@'")]),e._v(")\n    # make the commit\n    newcommit=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"Merge branch '$currentbranch'\"")]),e._v(" | git commit-tree $(git log -n 1 --pretty=%T HEAD) -p $branch -p HEAD)\n    # move the branch to point to the new commit\n    git update-ref -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"merge $currentbranch: Merge made by simulated no-ff"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"refs/heads/$branch"')]),e._v(" $newcommit\nelse\n    echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"error: merging $currentbranch into $branch would not be a fast-forward"')]),e._v("\n    exit 1\nfi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br")])]),t("p",[t("strong",[e._v("10. Usage scenario: How can I see what branch another branch was forked from?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 7    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4804023",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git branch --contains $(git merge-base customers/acme_patches devel stable)\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git branch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --contains")]),e._v(" $(git merge-base customers/acme_patches devel stable)")]),e._v("\ncustomers/acme_patches\ndevel\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git branch"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --contains")]),e._v(" $(git merge-base customers/acme_patches devel stable)")]),e._v("\ncustomers/acme_patches\ndevel\nstable\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[t("strong",[e._v("11. Usage scenario: Validate if commit exists")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4129070",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("if [ "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git merge-base $commit $branch)"')]),e._v(" = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$commit"')]),e._v(" ]; then\n    ...\nfi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("12. Usage scenario: Git - poor merge permanently ignores files changes in sub branches")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[e._v("git rev-list")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[e._v("git log")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[e._v("git rev-parse")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/35511043",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" isChangeInBaseChanges() {\n  for element in ${baseChanges[@]}; do \n    if [ $element == $change ]\n then \n return 1\nfi \n  done\n  return 0\n} \n\nrevopts=`git rev-parse --revs-only $*`\n\nif ! [[ $revopts ]] \nthen\n  revopts="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"--all"')]),e._v("\nfi\n\nexitCode=0\n\nfor merge in `git rev-list --min-parents=2 $revopts`; do\n  mergeChanges=`git log -m -1 --name-only --pretty="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"format:"')]),e._v(" $merge | sort -u`\n  mergeBase=`git merge-base $merge^ $merge^2`  \n  baseChanges=`git diff --name-only $merge $mergeBase`\n\n  lostFiles=()\n  for change in ${mergeChanges[@]}; do\n     isChangeInBaseChanges\nif [ $? -ne 1 ]\nthen\n  lostFiles+=($change)\nfi \n  done\n\n  if [ ${#lostFiles[@]} -ne 0 ]\n  then\n    exitCode=1\n    echo -n "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Possible botched merge at "')]),e._v("\necho  $merge\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"files with lost changes are: "')]),e._v("\nfor lostFile in ${lostFiles[@]}; do\n echo $lostFile\ndone\necho --------------------------------------------\n  fi\n\ndone\n\nexit $exitCode\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br"),t("span",{staticClass:"line-number"},[e._v("46")]),t("br"),t("span",{staticClass:"line-number"},[e._v("47")]),t("br"),t("span",{staticClass:"line-number"},[e._v("48")]),t("br")])]),t("p",[t("strong",[e._v("13. Usage scenario: Git: Find last SHA merged into a branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/65208054",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base master dev\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("14. Usage scenario: How to get the creation time of a git branch from remote?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-list.html"}},[e._v("git rev-list")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/51193825",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ git does not keep track of the time a branch was created.  The closest you can come is, if you make certain assumptions about commit topology, you can check the date(s) from the first commit that appears to relate to the branch.\nx -- o -- x -- x <--(master)\n      \\\n       A -- B -- c <--(feature)\n\n▲ You could use As author date.  If the branch is rebased, this should remain the same and at that point may precede the author date of its parent; so this won't necessarily tell you when the topological branch point could first be found at o, but it will give a fair estimate of when development for the branch started.  You could find this value as\ngit rev-list --format=%ad master..feature |tail -n1\n\n▲ If you can rule out rebasing, then you could estimate that development began sometime before As author date, and sometime after os author date.  You can get os author date as\ngit rev-list --format=%ad -n1 $(git merge-base master feature)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[t("strong",[e._v("15. Usage scenario: Git merge conflicts on files that are changed by one branch only")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/46327961",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base <branch1> <branch2>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("16. Usage scenario: GIT hook to prevent an experimental branch pushed to a release, or master branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[e._v("git rev-parse")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-tag.html"}},[e._v("git tag")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/13384768",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("refname="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$1"')]),e._v("\noldrev="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$2"')]),e._v("\nnewrev="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$3"')]),e._v("\ncase "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$refname"')]),e._v(" in\n  refs/heads/RELEASE|refs/heads/MASTER)\n    for forbidden in $(git tag -l "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'forbidden/*'")]),e._v("); do\n      if [ $(git merge-base "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$forbidden"')]),e._v(" $newrev) = $(git rev-parse "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$forbidden"')]),e._v(") ]; then\n        echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Push to $refname contains commit $forbidden"')]),e._v(" >&2\n        exit 1\n      fi\n    done\n    ;;\nesac\nexit 0\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("p",[t("strong",[e._v("17. Usage scenario: git log to graphically show all commits on 2 branches, but only show most recent shared commit")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[e._v("git log")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/62509612",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git log --oneline --graph --decorate branch1...branch2 --boundary\n\ngit log --oneline --graph --decorate branch1 branch2 ^$(git merge-base branch1 branch2)^\n\ngit log --oneline --graph --decorate branch1 branch2 ^$(echo $(git log -1 --pretty=%P $(git merge-base branch1 branch2)) | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/ / ^/g'")]),e._v(")\n\ngit log --oneline --graph --decorate branch1 branch2 ^$(git merge-base branch1 branch2)^@\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("18. Usage scenario: Can git checkout to remote branch without pulling files?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[e._v("git cherry-pick")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-log.html"}},[e._v("git log")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40188665",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git checkout --orphan abranch\n\ngit cherry-pick Y^..origin/abranch\n\ngit log origin/master..origin/abranch --oneline | tail -1\n\ngit cherry-pick $(git merge-base origin/master origin/abranch)..origin/abranch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("19. Usage scenario: git merge conflict saying deleted, but it's not")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show.html"}},[e._v("git show")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40672594",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" # find the merge-base :\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git merge-base master hotfix")]),e._v("\n 3e12717099f3dc7b83b3d267e5cbd580ec8e69a1\n\n # get the content you expect for "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"ours"')]),e._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"base"')]),e._v(" and "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"theirs"')]),e._v(" :\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git show master:f/a > f/a.ours")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git show hotfix:f/a > f/a.theirs")]),e._v("\n\n # here is the manual part : I don't know how to have an automatic detection\n # of the correct base file :\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git show 3e12717:a  > f/a.base")]),e._v("\n\n # start a 3-way merge :\n $ meld f/a.ours f/a.base f/a.theirs\n\n # if you are satisfied with the content in a.base,\n # and want to use it as your new a :\n $ mv f/a.base f/a\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git add f/a")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br")])]),t("p",[t("strong",[e._v("20. Usage scenario: Git merge conflict prevent deletes from newbs")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff-tree.html"}},[e._v("git diff-tree")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49619790",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/sh")]),e._v("\n\nif [ -e ./.git/MERGE_HEAD ]\nthen\n  echo This is a merge commit with conflicts. Checking to make sure the working set matches the merge diff.\n\n  # This is the commit we are merging into our branch (probably master or origin/master)\n  mergehead=$(cat .git/MERGE_HEAD)\n\n  # This is the last commit on our branch\n  orighead=$(cat .git/ORIG_HEAD)\n\n  # This is the common ancestor to the merge head and orig head\n  mergebase=$(git merge-base $mergehead $orighead)\n\n  # Find all the changes between the common ancestor and the merge head\n  linecountmerge=$(git diff-tree $mergebase $mergehead -r --name-only | wc -l)\n\n  # Find all files in the working set and staging area but exclude untracked files\n  # Remove files that start with a "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v(" character as that represents unstaged files\n  # Split Renamed files into 2 lines since diff-tree stores these separately as an Add and Delete\n  linecountworking=$(git status -s -uno | egrep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^[^ ].*$'")]),e._v(" | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/ -> /\\r\\n/g'")]),e._v("  | wc -l)\n\n  #Uncomment the following lines to produce these results to files for troubleshooting\n  #git diff-tree $mergebase $mergehead -r --name-status | sort > .git/mergediff.txt\n  #git status -s -uno | egrep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^[^ ].*$'")]),e._v(" | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/^R/D/g;s/ -> /\\r\\nA  /g;s/\\\"//g;s/  /\\t/g'")]),e._v(" | sort > .git/workingset.txt\n\n  echo Found $linecountmerge files in the merge diff.\n  echo Found $linecountworking files in the working set.\n\n  percentage=$(($linecountworking*100/$linecountmerge))\n\n  minimumallowedpercentage=60\n\n  echo Working set file count is $percentage% of the merge diff file count.\n\n  if [ $percentage -lt $minimumallowedpercentage ]\n  then\n    echo\n    echo\n    echo !!! Working set file count is less than $minimumallowedpercentage% of the merge diff file count. !!!\n    echo This probably means that you removed files from the working set during a merge conflict, which is a BAD THING!\n    echo If you are SURE you still want to commit the changes, you will need to add --no-verify to the commit command.\n    echo\n    echo Merge commit aborted.\n    exit 1\n  fi\nfi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br"),t("span",{staticClass:"line-number"},[e._v("46")]),t("br"),t("span",{staticClass:"line-number"},[e._v("47")]),t("br"),t("span",{staticClass:"line-number"},[e._v("48")]),t("br")])]),t("p",[t("strong",[e._v("21. Usage scenario: How to get the SHA of the base commit a branch is started from?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/42562844",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base <hash of commit C> <hash of commit E>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("22. Usage scenario: Rebase or Merge Git branch but Keep Deleted Files")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[e._v("git rebase")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45110449",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ If my_branch is as linear as you depict - no merge commits on the branch - then you could probably get by with an interactive rebase.\ngit rebase --interactive master my_branch\n\ngit diff --diff-filter D --no-renames --name-only HEAD^\n\ngit checkout HEAD^ -- path/and/filename\n\ngit add .\ngit commit --amend\n\n▲ The above rebase command will also complete the rebasing of your work onto the tip of master.  If you don't want that - e.g. if you want to merge the work into master instead - you could do something like\ngit rebase --interactive `git merge-base my_branch master` my_branch\n\ngit checkout `git merge-base master my_branch`\ncp all/the/files/that/were/deleted some/path/where/I/can/find/them/later\n\ngit filter-branch --tree-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'cp some/path/where/I/can/find/them/later all/the/files/that/were/deleted'")]),e._v(" -- my_branch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[t("strong",[e._v("23. Usage scenario: How do you rebase only changes between two branches into another branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-rebase.html"}},[e._v("git rebase")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41529998",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git rebase --onto B $(git merge-base master A) A\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("24. Usage scenario: Git - how to find first commit and get changed files of specific branche")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/41680233",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base master xxx\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("25. Usage scenario: Fetch from upstream and undo all commits I have in origin")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[e._v("git merge")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[e._v("git fetch")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/53598154",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base upstream/master origin/master\n\ngit reset --hard 55c1663\n\ngit fetch upstream\ngit checkout master\ngit merge upstream/master --no-ff\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v('26. Usage scenario: Issue merging Git Feature branch into "Beta" branch (after it has already been merged to "Develop" branch)')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[e._v("git cherry-pick")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge.html"}},[e._v("git merge")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/42474694",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git checkout -b tmp develop\ngit cherry-pick  $(git merge-base develop f2) f2\ngit checkout beta\ngit merge --squash tmp\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("27. Usage scenario: Rebasing a Detached HEAD against a master branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6221582",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base <yourrevision> master\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("28. Usage scenario: How to fix branches of partial directory structure in SVN to Git migration")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-update-index.html"}},[e._v("git update-index")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15481085",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Initial situation\nproject1/\nproject2/\nproject3/\nproject4/\n\nproject3/\n\n.project\nsrc/\ntest/\n\n▲ Step 1: Rewrite branch to move all contents into subdirectory (if needed)\ngit filter-branch --index-filter \\\n    'git ls-files -s | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s-\\t\\"*-&project3/-"')]),e._v(" |\n        GIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n            git update-index --index-info &&\n     mv "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$GIT_INDEX_FILE.new"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$GIT_INDEX_FILE"')]),e._v("' \\\n     master..project3-production-branch\n\n▲ Step 2: Rewrite branch to restore other projects\nbranch="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"project3-production-branch"')]),e._v("\nparent=`git merge-base $branch master` # or replace master with trunk if needed\npaths="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"project1 project2 project4"')]),e._v("\ngit filter-branch -f --index-filter \\\n"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git reset -q $parent -- $paths"')]),e._v(" --tag-name-filter cat -- \\\n$parent..$branch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br")])]),t("p",[t("strong",[e._v("29. Usage scenario: How to find a Pull Request start SHA if it is on the fork master branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64513189",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git merge-base HEAD^ HEAD^2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("30. Usage scenario: Make branch point to the tip of the branch that originated it")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[e._v("git fetch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/52279055",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ If you want to reset staging back to where you started\n<in the staging branch>\ngit reset --hard $(git merge-base HEAD origin/master) \ngit push --force\n\n▲ If you want to reset staging to the current state of master\n<in the staging branch>\ngit fetch\ngit reset --hard origin/master\ngit push --force\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[t("strong",[e._v("31. Usage scenario: How can I squash commits I've already merged?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[e._v("git commit-tree")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59844022",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git checkout PRx\ngit reset --soft $( git merge-base HEAD pre-merge ) # set the branch pointer where I started working on my PR, all changes are on index ready to be committed\ngit commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Squashed commits"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# PRx is now on this new squashed revision by the way")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and you don't want to do another merge effort, right? Maybe there were conflicts and so on... so")]),e._v("\ngit branch new-merge $( git commit-tree -p PRx -p pre-merge -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Merge"')]),e._v(" old-merge-revision^{tree} ) # old merge revision is the original merge revision you did when the branch was not squashed\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# now we have a new merge revision on branch new-merge")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# feel free to point another branch over here and do push -f")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);