(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{572:function(e,s,t){"use strict";t.r(s);var n=t(19),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("📖 "+e._s(e.$page.readingTime.text)+"    🔡 "+e._s(e.$page.readingTime.words)),t("br")])]),e._v(" "),t("h1",{attrs:{id:"git-update-index-register-file-contents-in-the-working-tree-to-the-index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-update-index-register-file-contents-in-the-working-tree-to-the-index"}},[e._v("#")]),e._v(" 📌 git update-index - Register file contents in the working tree to the index")]),e._v(" "),t("h2",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[e._v("#")]),e._v(" 🔹 --add")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Commit directly to a bare repository")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 10    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-write-tree.html"}},[e._v("git write-tree")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-show-ref.html"}},[e._v("git show-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-commit-tree.html"}},[e._v("git commit-tree")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[e._v("git update-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[e._v("git read-tree")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/25556917",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/bash")]),e._v("\ncd myrepo.git\n\nMY_BRANCH=master\nMY_FILE_CONTENTS=$"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello, world!\\n'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note this is just a lock for this script. It's not honored by other tools.")]),e._v("\nlockfile -1 -r 10 lock || exit 1\n\nPARENT_COMMIT="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git show-ref -s "')]),e._v("$MY_BRANCH"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('")"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Empty the index, not sure if this step is necessary")]),e._v("\ngit read-tree --empty\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Load the current tree. A commit ref is fine, it'll figure it out.")]),e._v("\ngit read-tree "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${PARENT_COMMIT}"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Create a blob object. Some systems have "shasum" instead of "sha1sum"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Might want to check if it already exists. Left as an excercise. :)")]),e._v("\nBLOB_ID=$(printf "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"blob %d\\0%s"')]),e._v(" $(echo -n "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$MY_FILE_CONTENTS"')]),e._v(" | wc -c) "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$MY_FILE_CONTENTS"')]),e._v(" | sha1sum | cut -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v(" -f 1)\nmkdir -p "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"objects/${BLOB_ID:0:2}"')]),e._v("\nprintf "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"blob %d\\0%s"')]),e._v(" $(echo -n "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$MY_FILE_CONTENTS"')]),e._v(" | wc -c) "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$MY_FILE_CONTENTS"')]),e._v(" | perl -MCompress::Zlib -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'undef $/; print compress(<>)'")]),e._v(" > "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"objects/${BLOB_ID:0:2}/${BLOB_ID:2}"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Now add it to the index.")]),e._v("\ngit update-index --add --cacheinfo 100644 "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$BLOB_ID"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"myfile.txt"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Create a tree from your new index")]),e._v("\nTREE_ID=$(git write-tree)\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Commit it.")]),e._v("\nNEW_COMMIT=$(echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"My commit message"')]),e._v(" | git commit-tree "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$TREE_ID"')]),e._v(" -p "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$PARENT_COMMIT"')]),e._v(")\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Update the branch")]),e._v("\ngit update-ref "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"refs/heads/$MY_BRANCH"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$NEW_COMMIT"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$PARENT_COMMIT"')]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Done")]),e._v("\nrm -f lock\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How do I update a git submodule without checking it out")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64950161",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --add --cacheinfo  mode,sha1,submodule_path\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: How to commit a file rename and its content edits separately (so git detects the rename)?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/56877294",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v('git update-index --add --cacheinfo "$(git ls-files --full-name -s foo \\\n    | awk '),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'{print $1 "," $2 ",bar"}\'')]),e._v(')"\ngit rm --cached foo\ngit commit -m '),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rename foo to bar"')]),e._v("\nmv foo bar\ngit add bar\ngit commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"make changes to bar"')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h2",{attrs:{id:"refresh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#refresh"}},[e._v("#")]),e._v(" 🔹 --refresh")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How can I check in a Bash script if my local Git repository has changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 231    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[e._v("git diff-index")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/5143914",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index -q --refresh\ntest -z "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git diff-index --name-only HEAD --)"')]),e._v(" ||\nVN="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$VN-dirty"')]),e._v("\n\nif git diff-index --quiet HEAD --; then\n    # No changes\nelse\n    # Changes\nfi\n\nif ! git diff-index --quiet HEAD --; then\n    VN="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$VN-mod"')]),e._v("\nfi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: Removing git repository objects entirely from all branches and tags and pushing changes to remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 7    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[e._v("git reflog")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[e._v("git update-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[e._v("git gc")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10633774",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure the repository to push all existing branches & tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# when none are explicitly specified")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/tags/*:refs/tags/*'")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/heads/*:refs/heads/*'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure all local branches exist, so they get filtered")]),e._v("\nfor remote_branch in `git branch --all | grep -v HEAD | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/\\*//'")]),e._v("`; do local_branch=`echo $remote_branch | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s!remotes/origin/!!'")]),e._v("`; git checkout $local_branch; done\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Prevent git <1.7.7.1 from complaining about dirty working directory")]),e._v("\ngit update-index -q --ignore-submodules --refresh\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do the filtering across --all branches and rewrite tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that this will necessarily remove signatures on tags")]),e._v("\ngit filter-branch -f --tree-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git rm -rf --ignore-unmatch modules/custom/mymigration/data/photos/*"')]),e._v(" --tag-name-filter cat -- --all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove the backed-up refs")]),e._v("\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%(refname)"')]),e._v(" refs/original/ | xargs -n 1 git update-ref -d\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Clear out the reflog and garbage-collect")]),e._v("\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Push all changes to origin - pushes tags and branches")]),e._v("\ngit push origin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: Make git reset --hard to ignore permission changes")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/17187693",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --refresh\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: How to properly bring only updated files from a github repo")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-symbolic-ref.html"}},[e._v("git symbolic-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[e._v("git clone")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-read-tree.html"}},[e._v("git read-tree")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30600149",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ If you effectively have some branch tip checked out in your test directory, but no underlying repo for it, \ngit clone --no-checkout u://r/l ../wip # fetch just the repo, leave worktree as-is\nmv ../wip/.git .                       # move the repo here\n\ngit symbolic-ref HEAD $thatbranch   # set a refname for the worktree content\ngit read-tree HEAD                  # load the default worktree index from there\ngit update-index --refresh          # get its metadata up to date\n\n▲ The index refresh will tell you which if any files in the worktree don"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'t match what the index says, and you haven'")]),e._v("t touched your worktree at all so you can lather-rinse-repeat until you find what commit is closest to what's already out.  You could even reorder things, \ngit read-tree $thatbranch\ngit update-index --refresh\n\ngit symbolic-ref HEAD $thatbranch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("h2",{attrs:{id:"q"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#q"}},[e._v("#")]),e._v(" 🔹 -q")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How can I check in a Bash script if my local Git repository has changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 231    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-diff-index.html"}},[e._v("git diff-index")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/5143914",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index -q --refresh\ntest -z "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$(git diff-index --name-only HEAD --)"')]),e._v(" ||\nVN="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$VN-dirty"')]),e._v("\n\nif git diff-index --quiet HEAD --; then\n    # No changes\nelse\n    # Changes\nfi\n\nif ! git diff-index --quiet HEAD --; then\n    VN="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$VN-mod"')]),e._v("\nfi\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: Removing git repository objects entirely from all branches and tags and pushing changes to remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 7    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[e._v("git reflog")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[e._v("git update-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[e._v("git gc")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10633774",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure the repository to push all existing branches & tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# when none are explicitly specified")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/tags/*:refs/tags/*'")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/heads/*:refs/heads/*'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure all local branches exist, so they get filtered")]),e._v("\nfor remote_branch in `git branch --all | grep -v HEAD | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/\\*//'")]),e._v("`; do local_branch=`echo $remote_branch | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s!remotes/origin/!!'")]),e._v("`; git checkout $local_branch; done\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Prevent git <1.7.7.1 from complaining about dirty working directory")]),e._v("\ngit update-index -q --ignore-submodules --refresh\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do the filtering across --all branches and rewrite tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that this will necessarily remove signatures on tags")]),e._v("\ngit filter-branch -f --tree-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git rm -rf --ignore-unmatch modules/custom/mymigration/data/photos/*"')]),e._v(" --tag-name-filter cat -- --all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove the backed-up refs")]),e._v("\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%(refname)"')]),e._v(" refs/original/ | xargs -n 1 git update-ref -d\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Clear out the reflog and garbage-collect")]),e._v("\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Push all changes to origin - pushes tags and branches")]),e._v("\ngit push origin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("h2",{attrs:{id:"ignore-submodules"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ignore-submodules"}},[e._v("#")]),e._v(" 🔹 --ignore-submodules")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Removing git repository objects entirely from all branches and tags and pushing changes to remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 7    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reflog.html"}},[e._v("git reflog")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-update-ref.html"}},[e._v("git update-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-gc.html"}},[e._v("git gc")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10633774",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure the repository to push all existing branches & tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# when none are explicitly specified")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/tags/*:refs/tags/*'")]),e._v("\ngit config --add remote.origin.push "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'+refs/heads/*:refs/heads/*'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure all local branches exist, so they get filtered")]),e._v("\nfor remote_branch in `git branch --all | grep -v HEAD | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s/\\*//'")]),e._v("`; do local_branch=`echo $remote_branch | sed -e "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'s!remotes/origin/!!'")]),e._v("`; git checkout $local_branch; done\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Prevent git <1.7.7.1 from complaining about dirty working directory")]),e._v("\ngit update-index -q --ignore-submodules --refresh\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Do the filtering across --all branches and rewrite tags")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Note that this will necessarily remove signatures on tags")]),e._v("\ngit filter-branch -f --tree-filter "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git rm -rf --ignore-unmatch modules/custom/mymigration/data/photos/*"')]),e._v(" --tag-name-filter cat -- --all\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Remove the backed-up refs")]),e._v("\ngit for-each-ref --format="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%(refname)"')]),e._v(" refs/original/ | xargs -n 1 git update-ref -d\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Clear out the reflog and garbage-collect")]),e._v("\ngit reflog expire --expire=now --all\ngit gc --aggressive --prune=now\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Push all changes to origin - pushes tags and branches")]),e._v("\ngit push origin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("h2",{attrs:{id:"cacheinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cacheinfo"}},[e._v("#")]),e._v(" 🔹 --cacheinfo")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How to resolve git submodule conflict if submodule is not initialized")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 29    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/31411086",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git reset master -- sub\ngit reset master@{upstream} -- sub\ngit reset HEAD -- sub\ngit reset MERGE_HEAD -- sub\n\ngit update-index --cacheinfo 0160000,533da4ea00703f4ad6d5518e1ce81d20261c40c0,sub\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How do I use 'git filter-branch' to update the SHA of a submodule?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14785691",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --cacheinfo 160000 88e6a302c42840440f9faac73f27efc6a3e0c1a6 pathto/mysubmodule\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: How do I git add only lines matching a pattern?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout-index.html"}},[e._v("git checkout-index")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-hash-object.html"}},[e._v("git hash-object")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-diff.html"}},[e._v("git diff")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/37336801",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git diff")]),e._v("\ndiff --git a/lorem.txt b/lorem.txt\nindex d5d20a4..58609a7 100644\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--- a/lorem.txt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+++ b/lorem.txt")]),e._v("\n@@ -2,10 +2,14 @@ Lorem ipsum dolor sit amet,\n consectetur adipiscing elit,\n sed do eiusmod tempor\n incididunt ut labore et dolore\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-magna aliqua. Ut enim ad minim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n veniam, quis nostrud\n exercitation ullamco laboris\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+maxim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+maxim")]),e._v("\n nisi ut aliquip ex ea commodo\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n consequat.  Duis aute irure\n dolor in reprehenderit in\n voluptate velit esse cillum\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git diff"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --cached")]),e._v("  # nothing staged in the index")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git diff")]),e._v("\ndiff --git a/lorem.txt b/lorem.txt\nindex 7e1b4cb..58609a7 100644\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--- a/lorem.txt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+++ b/lorem.txt")]),e._v("\n@@ -6,6 +6,8 @@ minim\n minim\n veniam, quis nostrud\n exercitation ullamco laboris\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+maxim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+maxim")]),e._v("\n nisi ut aliquip ex ea commodo\n minim\n consequat.  Duis aute irure\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git diff"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --cached")])]),e._v("\ndiff --git a/lorem.txt b/lorem.txt\nindex d5d20a4..7e1b4cb 100644\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--- a/lorem.txt")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+++ b/lorem.txt")]),e._v("\n@@ -2,10 +2,12 @@ Lorem ipsum dolor sit amet,\n consectetur adipiscing elit,\n sed do eiusmod tempor\n incididunt ut labore et dolore\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-magna aliqua. Ut enim ad minim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n veniam, quis nostrud\n exercitation ullamco laboris\n nisi ut aliquip ex ea commodo\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+minim")]),e._v("\n consequat.  Duis aute irure\n dolor in reprehenderit in\n voluptate velit esse cillum\n\n@(next :args)\n@(assert)\n@pattern\n@file\n@(bind regex @(regex-compile pattern))\n@(next (open-command `git diff @file`))\ndiff @diffjunk\nindex @indexjunk\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--- a/@file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+++ b/@file")]),e._v("\n@(collect)\n@@@@ -@bfline,@bflen +@afline,@aflen @@@@@(skip)\n@  (bind (nminus nplus) (0 0))\n@  (collect)\n@    (cases)\n @line\n@      (bind zerocol "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('" "')]),e._v(")\n@    (or)\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+@line")]),e._v("\n@      (bind zerocol "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"+"')]),e._v(")\n@      (require (search-regex line regex))\n@      (do (inc nplus))\n@    (or)\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-@line")]),e._v("\n@      (bind zerocol "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-"')]),e._v(")\n@      (require (search-regex line regex))\n@      (do (inc nminus))\n@    (or)\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("-@line")]),e._v("\n@;;    unmatched - line becomes context line\n@      (bind zerocol "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('" "')]),e._v(")\n@    (end)\n@  (until)\n@/[^+\\- ]/@(skip)\n@  (end)\n@  (set (bfline bflen afline aflen)\n        @[mapcar int-str (list bfline bflen afline aflen)])\n@  (set aflen @(+ bflen nplus (- nminus)))\n@(end)\n@(output :into stripped-diff)\ndiff @diffjunk\nindex @indexjunk\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("--- a/@file")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+++ b/@file")]),e._v("\n@  (repeat)\n"),t("span",{pre:!0,attrs:{class:"token coord"}},[e._v("@@@@ -@bfline,@bflen +@afline,@aflen @@@@")]),e._v("\n@    (repeat)\n@zerocol@line\n@    (end)\n@  (end)\n@(end)\n@(next (open-command `git checkout-index --temp @file`))\n@tempname@\\t@file\n@(try)\n@  (do\n     (with-stream (patch-stream (open-command `patch -p1 @tempname` "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"w"')]),e._v("))\n       (put-lines stripped-diff patch-stream)))\n@  (next (open-command `git hash-object -w @tempname`))\n@newsha\n@  (do (sh `git update-index --cacheinfo 100644 @newsha @file`))\n@(catch)\n@  (fail)\n@(finally)\n@  (do\n     (ignerr [mapdo remove-path #`@tempname @tempname.orig @tempname.rej`]))\n@(end)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br"),t("span",{staticClass:"line-number"},[e._v("39")]),t("br"),t("span",{staticClass:"line-number"},[e._v("40")]),t("br"),t("span",{staticClass:"line-number"},[e._v("41")]),t("br"),t("span",{staticClass:"line-number"},[e._v("42")]),t("br"),t("span",{staticClass:"line-number"},[e._v("43")]),t("br"),t("span",{staticClass:"line-number"},[e._v("44")]),t("br"),t("span",{staticClass:"line-number"},[e._v("45")]),t("br"),t("span",{staticClass:"line-number"},[e._v("46")]),t("br"),t("span",{staticClass:"line-number"},[e._v("47")]),t("br"),t("span",{staticClass:"line-number"},[e._v("48")]),t("br"),t("span",{staticClass:"line-number"},[e._v("49")]),t("br"),t("span",{staticClass:"line-number"},[e._v("50")]),t("br"),t("span",{staticClass:"line-number"},[e._v("51")]),t("br"),t("span",{staticClass:"line-number"},[e._v("52")]),t("br"),t("span",{staticClass:"line-number"},[e._v("53")]),t("br"),t("span",{staticClass:"line-number"},[e._v("54")]),t("br"),t("span",{staticClass:"line-number"},[e._v("55")]),t("br"),t("span",{staticClass:"line-number"},[e._v("56")]),t("br"),t("span",{staticClass:"line-number"},[e._v("57")]),t("br"),t("span",{staticClass:"line-number"},[e._v("58")]),t("br"),t("span",{staticClass:"line-number"},[e._v("59")]),t("br"),t("span",{staticClass:"line-number"},[e._v("60")]),t("br"),t("span",{staticClass:"line-number"},[e._v("61")]),t("br"),t("span",{staticClass:"line-number"},[e._v("62")]),t("br"),t("span",{staticClass:"line-number"},[e._v("63")]),t("br"),t("span",{staticClass:"line-number"},[e._v("64")]),t("br"),t("span",{staticClass:"line-number"},[e._v("65")]),t("br"),t("span",{staticClass:"line-number"},[e._v("66")]),t("br"),t("span",{staticClass:"line-number"},[e._v("67")]),t("br"),t("span",{staticClass:"line-number"},[e._v("68")]),t("br"),t("span",{staticClass:"line-number"},[e._v("69")]),t("br"),t("span",{staticClass:"line-number"},[e._v("70")]),t("br"),t("span",{staticClass:"line-number"},[e._v("71")]),t("br"),t("span",{staticClass:"line-number"},[e._v("72")]),t("br"),t("span",{staticClass:"line-number"},[e._v("73")]),t("br"),t("span",{staticClass:"line-number"},[e._v("74")]),t("br"),t("span",{staticClass:"line-number"},[e._v("75")]),t("br"),t("span",{staticClass:"line-number"},[e._v("76")]),t("br"),t("span",{staticClass:"line-number"},[e._v("77")]),t("br"),t("span",{staticClass:"line-number"},[e._v("78")]),t("br"),t("span",{staticClass:"line-number"},[e._v("79")]),t("br"),t("span",{staticClass:"line-number"},[e._v("80")]),t("br"),t("span",{staticClass:"line-number"},[e._v("81")]),t("br"),t("span",{staticClass:"line-number"},[e._v("82")]),t("br"),t("span",{staticClass:"line-number"},[e._v("83")]),t("br"),t("span",{staticClass:"line-number"},[e._v("84")]),t("br"),t("span",{staticClass:"line-number"},[e._v("85")]),t("br"),t("span",{staticClass:"line-number"},[e._v("86")]),t("br"),t("span",{staticClass:"line-number"},[e._v("87")]),t("br"),t("span",{staticClass:"line-number"},[e._v("88")]),t("br"),t("span",{staticClass:"line-number"},[e._v("89")]),t("br"),t("span",{staticClass:"line-number"},[e._v("90")]),t("br"),t("span",{staticClass:"line-number"},[e._v("91")]),t("br"),t("span",{staticClass:"line-number"},[e._v("92")]),t("br"),t("span",{staticClass:"line-number"},[e._v("93")]),t("br"),t("span",{staticClass:"line-number"},[e._v("94")]),t("br"),t("span",{staticClass:"line-number"},[e._v("95")]),t("br"),t("span",{staticClass:"line-number"},[e._v("96")]),t("br"),t("span",{staticClass:"line-number"},[e._v("97")]),t("br"),t("span",{staticClass:"line-number"},[e._v("98")]),t("br"),t("span",{staticClass:"line-number"},[e._v("99")]),t("br"),t("span",{staticClass:"line-number"},[e._v("100")]),t("br"),t("span",{staticClass:"line-number"},[e._v("101")]),t("br"),t("span",{staticClass:"line-number"},[e._v("102")]),t("br"),t("span",{staticClass:"line-number"},[e._v("103")]),t("br"),t("span",{staticClass:"line-number"},[e._v("104")]),t("br"),t("span",{staticClass:"line-number"},[e._v("105")]),t("br"),t("span",{staticClass:"line-number"},[e._v("106")]),t("br"),t("span",{staticClass:"line-number"},[e._v("107")]),t("br"),t("span",{staticClass:"line-number"},[e._v("108")]),t("br"),t("span",{staticClass:"line-number"},[e._v("109")]),t("br"),t("span",{staticClass:"line-number"},[e._v("110")]),t("br"),t("span",{staticClass:"line-number"},[e._v("111")]),t("br"),t("span",{staticClass:"line-number"},[e._v("112")]),t("br"),t("span",{staticClass:"line-number"},[e._v("113")]),t("br"),t("span",{staticClass:"line-number"},[e._v("114")]),t("br"),t("span",{staticClass:"line-number"},[e._v("115")]),t("br"),t("span",{staticClass:"line-number"},[e._v("116")]),t("br"),t("span",{staticClass:"line-number"},[e._v("117")]),t("br"),t("span",{staticClass:"line-number"},[e._v("118")]),t("br"),t("span",{staticClass:"line-number"},[e._v("119")]),t("br"),t("span",{staticClass:"line-number"},[e._v("120")]),t("br"),t("span",{staticClass:"line-number"},[e._v("121")]),t("br"),t("span",{staticClass:"line-number"},[e._v("122")]),t("br"),t("span",{staticClass:"line-number"},[e._v("123")]),t("br"),t("span",{staticClass:"line-number"},[e._v("124")]),t("br"),t("span",{staticClass:"line-number"},[e._v("125")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: How do I update a git submodule without checking it out")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/64950161",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --add --cacheinfo  mode,sha1,submodule_path\n\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("h2",{attrs:{id:"index-info"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#index-info"}},[e._v("#")]),e._v(" 🔹 --index-info")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Checkout a Git tree object into working dir?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24746739",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --index-info\n100755 tree abc123 fake.tree.path\n\ngit update-index --index-info\n040000 tree abc123 fake.tree.path\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How to fix branches of partial directory structure in SVN to Git migration")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-filter-branch.html"}},[e._v("git filter-branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-merge-base.html"}},[e._v("git merge-base")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/15481085",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Initial situation\nproject1/\nproject2/\nproject3/\nproject4/\n\nproject3/\n\n.project\nsrc/\ntest/\n\n▲ Step 1: Rewrite branch to move all contents into subdirectory (if needed)\ngit filter-branch --index-filter \\\n    'git ls-files -s | sed "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s-\\t\\"*-&project3/-"')]),e._v(" |\n        GIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n            git update-index --index-info &&\n     mv "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$GIT_INDEX_FILE.new"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$GIT_INDEX_FILE"')]),e._v("' \\\n     master..project3-production-branch\n\n▲ Step 2: Rewrite branch to restore other projects\nbranch="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"project3-production-branch"')]),e._v("\nparent=`git merge-base $branch master` # or replace master with trunk if needed\npaths="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"project1 project2 project4"')]),e._v("\ngit filter-branch -f --index-filter \\\n"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git reset -q $parent -- $paths"')]),e._v(" --tag-name-filter cat -- \\\n$parent..$branch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br")])]),t("h2",{attrs:{id:"chmod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chmod"}},[e._v("#")]),e._v(" 🔹 --chmod")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How to add chmod permissions to file in Git?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 454    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/40979016",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --chmod=+x path/to/file\n\ngit update-index --chmod=-x path/to/file\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ls-files"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --stage")])]),e._v("\n100644 aee89ef43dc3b0ec6a7c6228f742377692b50484 0       .gitignore\n100755 0ac339497485f7cc80d988561807906b2fd56172 0       my_executable_script.sh\n\ngit config core.fileMode false\n\ngit update-index --chmod=-x path/to/file\ngit update-index --chmod=+x path/to/file\n\ngit add --chmod=+x path/to/file\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("h2",{attrs:{id:"no-assume-unchanged"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-assume-unchanged"}},[e._v("#")]),e._v(" 🔹 --no-assume-unchanged")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Can I 'git commit' a file and ignore its content changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 505    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3320183",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Sure, I do exactly this from time to time using\ngit update-index --assume-unchanged [<file> ...]\n\n▲ To undo and start tracking again (if you forgot what files were untracked, see this question):\ngit update-index --no-assume-unchanged [<file> ...]\n\n▲ Fail gracefully in this case means, if there are any changes upstream to that file (legitimate changes, etc.) when you do a pull, it will say:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git pull")]),e._v("\n…\nFrom https://github.com/x/y\n   72a914a..106a261  master     -> origin/master\nUpdating 72a914a..106a261\nerror: Your local changes to the following files would be overwritten by merge:\n                filename.ext\n \n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git checkout filename.ext")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How do I tell git to ignore my local changes, but leave the file in my remote repo?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 32    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24535600",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <filename>\n\ngit update-index --no-assume-unchanged <filename>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v('3. Usage scenario: git: how to "retrack" untracked file')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 12    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/6100626",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --no-assume-unchanged filename\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: How do I .gitignore and delete an already committed file without affecting other working copies?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3979833",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged [FILENAME]\n\ngit update-index --no-assume-unchanged [FILENAME]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: How to restrict git from tracking / updating local changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 9    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49955071",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ How to tell git to ignore local changes?\n▲ assume-unchanged\n// Mark local fule so git will not detect local changes\ngit update-index --assume-unchanged <file>\n\n// To get a list of dir's/files that are marked as assume-unchanged\ngit ls-files -v|grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^h'")]),e._v("\n\n// To un-mark files\ngit update-index --no-assume-unchanged <file>\n\n▲ Adding assume-unchanged aliases\ngit config --global alias.hide "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update-index --assume-unchanged"')]),e._v("\ngit config --global alias.show "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update-index --no-assume-unchanged"')]),e._v("\ngit config --global alias.list-unchanged "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"ls-files -v|grep '^h'\"")]),e._v("\n\n[alias]\n    hide = update-index --assume-unchanged\n    unhide = update-index --no-assume-unchanged\n    list-unchanged = ls-files -v|grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^h'")]),e._v("\n\n▲ Usage:\ngit hide myfile.ext\ngit unhide myfile.ext\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: How to ignore files locally without adding it in .gitignore")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45753660",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status")]),e._v("\nOn branch master\nChanges not staged for commit:\n  (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add <file>..."')]),e._v(" to update what will be committed)\n  (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git checkout -- <file>..."')]),e._v(" to discard changes in working directory)\n\n        modified:   file\n\nno changes added to commit (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add"')]),e._v(" and/or "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git commit -a"')]),e._v(")\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged file")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status")]),e._v("\nOn branch master\nnothing to commit, working tree clean\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ls-files"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")])]),e._v("\nh file\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --no")]),e._v("-assume-unchanged file")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ls-files"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")])]),e._v("\nH file\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status")]),e._v("\nOn branch master\nChanges not staged for commit:\n  (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add <file>..."')]),e._v(" to update what will be committed)\n  (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git checkout -- <file>..."')]),e._v(" to discard changes in working directory)\n\n        modified:   file\n\nno changes added to commit (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add"')]),e._v(" and/or "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git commit -a"')]),e._v(")\n\n[alias]\n    forget = update-index --assume-unchanged\n    unforget = update-index --no-assume-unchanged\n    forgotten = ! git ls-files -v | grep ^[a-z]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br"),t("span",{staticClass:"line-number"},[e._v("33")]),t("br"),t("span",{staticClass:"line-number"},[e._v("34")]),t("br"),t("span",{staticClass:"line-number"},[e._v("35")]),t("br"),t("span",{staticClass:"line-number"},[e._v("36")]),t("br"),t("span",{staticClass:"line-number"},[e._v("37")]),t("br"),t("span",{staticClass:"line-number"},[e._v("38")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: A locally ignored file was updated on remote; can't checkout to remote branch now")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/22117891",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --no-assume-unchanged files/dependency/config.lua\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v('8. Usage scenario: Git adding "unchanged" files to the stage')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/18698143",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("9. Usage scenario: Git push all but one file, without deletion")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/53194591",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged config.txt\n\ngit update-index --no-assume-unchanged config.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("10. Usage scenario: git stash save assume changed file")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14398310",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("11. Usage scenario: Do not commit specific changes to the git, but also don't revert them from my local workspace")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21582271",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stage all of your other changes that aren't in the .proj file.")]),e._v("\ngit add somefile otherfile\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stash the .proj file changes.")]),e._v("\ngit stash\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Work with the remote.")]),e._v("\ngit pull\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get your .proj changes back.")]),e._v("\ngit stash pop\n\ngit update-index --assume-unchanged file.proj\n\ngit update-index --no-assume-unchanged file.proj\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("p",[t("strong",[e._v("12. Usage scenario: Exclude given directory from git add")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23367635",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged /var/www/classes/dont_include")]),e._v("\n\n$git update-index --no-assume-unchanged /var/www/classes/dont_include\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("13. Usage scenario: How can I have git ignore parts of Atmel Studio's .cproj file?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/56495069",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v('14. Usage scenario: How do I delete files locally without commiting these deletions to a remote repository while keeping a "clean" working tree?')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-restore.html"}},[e._v("git restore")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60387954",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged -- unWantedFile\nrm unWantedFile\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# work")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# later on")]),e._v("\ngit update-index --no-assume-unchanged -- unWantedFile\ngit restore unWantedFile\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("15. Usage scenario: Git: Keep changes in local repo & remove from index after adding to .gitignore")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33820016",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged local.xml\n\ngit update-index --no-assume-unchanged local.xml\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("16. Usage scenario: In git, how one can record changes to a file after making changes that you'd never want committed")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29658145",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --no")]),e._v("-assume-unchanged web.config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git stash")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#apply and commit your changes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git stash pop")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged web.config")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("17. Usage scenario: How do I use git to checkout just the files and their parent folders that have a given file extension?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[e._v("git clone")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23861934",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#clone as usual")]),e._v("\ngit clone https://github.com/username/repo.git myrepo\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#change into the myrepo directory that was just created ")]),e._v("\ncd myrepo\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#turn off tracking for everything")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#this allows us to start pruning our working directory without the index ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#being effected, leaving us only with the files that we want to work on")]),e._v("\ngit ls-files | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 git update-index --assume-unchanged\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#turn on tracking for only the files that you want, editing the grep pattern")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as needed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#here I'm only going to track markdown files with a *.md extension")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#notice the '--no-assume-unchanged' flag")]),e._v("\ngit ls-files | grep \\\\.md | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 git update-index --no-assume-unchanged\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#delete everything in the directory that you don't want by reversing ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#the grep pattern and adding a 'rm -rf' command")]),e._v("\ngit ls-files | grep -v \\\\.md | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 rm -rf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#delete empty directories (optional)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#run the following command. you'll receive a lot of 'no such file or ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#directory' messages. run the command again until you ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#no longer receive such messages.you'll need to do this several times depending on the depth of your directory structure. perfect place for a while loop if your scripting this")]),e._v("\nfind . -type d -empty -exec rm -rf {} \\;\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#list the file paths that are left to verify everything went as expected")]),e._v("\nfind -type f | grep -v .git\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#run a git status to make sure the index doesn't show anything being deleted")]),e._v("\n    git status\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br")])]),t("p",[t("strong",[e._v("18. Usage scenario: Apply and remove a commit frequently")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60508090",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged index.asp\n\ngit update-index --no-assume-unchanged index.asp\ngit checkout -- index.asp\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("19. Usage scenario: Make git ignore and keep local changes to some files (vs different version in remote)")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30045655",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"assume-unchanged"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#assume-unchanged"}},[e._v("#")]),e._v(" 🔹 --assume-unchanged")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How to stop tracking and ignore changes to a file in Git?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2332    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/936290",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged [path]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How do I configure git to ignore some files locally?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2191    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1753078",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file-list>\n\ngit update-index --skip-worktree <file-list>\n\ngit update-index --no-skip-worktree <file-list>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: Can I 'git commit' a file and ignore its content changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 505    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3320183",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Sure, I do exactly this from time to time using\ngit update-index --assume-unchanged [<file> ...]\n\n▲ To undo and start tracking again (if you forgot what files were untracked, see this question):\ngit update-index --no-assume-unchanged [<file> ...]\n\n▲ Fail gracefully in this case means, if there are any changes upstream to that file (legitimate changes, etc.) when you do a pull, it will say:\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git pull")]),e._v("\n…\nFrom https://github.com/x/y\n   72a914a..106a261  master     -> origin/master\nUpdating 72a914a..106a261\nerror: Your local changes to the following files would be overwritten by merge:\n                filename.ext\n \n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v(" $ git checkout filename.ext")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: Ignore modified (but not committed) files in git?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 297    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/761116",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged dir-im-removing/\n\ngit update-index --assume-unchanged config/database.yml\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: using gitignore to ignore (but not delete) files")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 196    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/16442091",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: Git ignore locally deleted folder")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 75    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4590664",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: How to commit all file except one in GitHub for Windows")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 50    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26823358",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ If you only want to exclude the file for a little time (maybe one commit) and add it in a future commit you can execute the following commands:\ngit add .\ngit reset filename\ngit commit -m "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"commit message"')]),e._v("\n\n▲ If the file is already committed to the repository but you only sporadically want to commit further changes of the file, you can use git update-index --assume-unchanged in this way:\n`git update-index --assume-unchanged filename`\n\n▲ You can use the .gitignore file if you don't want to track a file at all. To ignore a file named filename you create, or edit, a file called .gitignore. Put filename on a line of its own to ignore that file. Now the file is not added to the staging area when you execute git add .. Remark: If the file is already checked in you have to remove it from the repository to actually start ignoring it. Execute the following to do just that:\n`git rm --cached filename`\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("p",[t("strong",[e._v("8. Usage scenario: How do I tell git to ignore my local changes, but leave the file in my remote repo?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 32    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24535600",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <filename>\n\ngit update-index --no-assume-unchanged <filename>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("9. Usage scenario: How can untrack few files locally in git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 16    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/28620604",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged product/db.py product/prms.py\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("10. Usage scenario: Ignoring files already in a repo WITHOUT deleting them")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 14    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3604598",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged -- .noise")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("11. Usage scenario: How do I .gitignore and delete an already committed file without affecting other working copies?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 9    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3979833",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged [FILENAME]\n\ngit update-index --no-assume-unchanged [FILENAME]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("12. Usage scenario: How to restrict git from tracking / updating local changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 9    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-config.html"}},[e._v("git config")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49955071",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ How to tell git to ignore local changes?\n▲ assume-unchanged\n// Mark local fule so git will not detect local changes\ngit update-index --assume-unchanged <file>\n\n// To get a list of dir's/files that are marked as assume-unchanged\ngit ls-files -v|grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^h'")]),e._v("\n\n// To un-mark files\ngit update-index --no-assume-unchanged <file>\n\n▲ Adding assume-unchanged aliases\ngit config --global alias.hide "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update-index --assume-unchanged"')]),e._v("\ngit config --global alias.show "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"update-index --no-assume-unchanged"')]),e._v("\ngit config --global alias.list-unchanged "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"ls-files -v|grep '^h'\"")]),e._v("\n\n[alias]\n    hide = update-index --assume-unchanged\n    unhide = update-index --no-assume-unchanged\n    list-unchanged = ls-files -v|grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^h'")]),e._v("\n\n▲ Usage:\ngit hide myfile.ext\ngit unhide myfile.ext\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("p",[t("strong",[e._v("13. Usage scenario: git delete local files but keep files in repo")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 8    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/31415112",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("14. Usage scenario: Ignore (no commit) locally deleted files tracked by Git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21904084",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged <file>")]),e._v("\n$ rm <file>\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On branch master")]),e._v("\nnothing to commit, working directory clean\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("15. Usage scenario: git stash save assume changed file")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14398310",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("16. Usage scenario: Merging config files in git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30501984",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged -- yourConfigFile\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v('17. Usage scenario: How to ignore from commit the files "pom.xml" and ".gitignore"?')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/43200948",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" git update-index --assume-unchanged .gitignore\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("18. Usage scenario: Git remove file without other on the team having it deleted")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29889524",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged file.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("19. Usage scenario: Do not commit specific changes to the git, but also don't revert them from my local workspace")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21582271",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stage all of your other changes that aren't in the .proj file.")]),e._v("\ngit add somefile otherfile\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stash the .proj file changes.")]),e._v("\ngit stash\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Work with the remote.")]),e._v("\ngit pull\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Get your .proj changes back.")]),e._v("\ngit stash pop\n\ngit update-index --assume-unchanged file.proj\n\ngit update-index --no-assume-unchanged file.proj\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("p",[t("strong",[e._v("20. Usage scenario: Exclude given directory from git add")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23367635",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged /var/www/classes/dont_include")]),e._v("\n\n$git update-index --no-assume-unchanged /var/www/classes/dont_include\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("21. Usage scenario: How to work on a drop-in library?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/7350745",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("\n    git update-index --assume-unchanged my/sensitive/file\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("22. Usage scenario: How to prevent a local file being synced with the remote repo?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33624465",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <filehere>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("23. Usage scenario: How can I have git ignore parts of Atmel Studio's .cproj file?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/56495069",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("24. Usage scenario: How to remove a file from a git repository, without deleting it in cloned repositories")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/21232805",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("25. Usage scenario: How do I keep a local change outside of Commit?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/54912330",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged [path-to-config-file]\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v('26. Usage scenario: How do I delete files locally without commiting these deletions to a remote repository while keeping a "clean" working tree?')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-restore.html"}},[e._v("git restore")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60387954",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged -- unWantedFile\nrm unWantedFile\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# work")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ...")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# later on")]),e._v("\ngit update-index --no-assume-unchanged -- unWantedFile\ngit restore unWantedFile\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[t("strong",[e._v("27. Usage scenario: How to keep a version of a file fixed on github")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24556737",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Option 1: ignore it locally\ngit update-index --assume-unchanged path/to/file.txt\n\n▲ Option 2: make a template\ncp local.conf.template local.conf\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("28. Usage scenario: Protect a file against modifications in git merge")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24544992",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged versionFile.java\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("29. Usage scenario: Git: Keep changes in local repo & remove from index after adding to .gitignore")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33820016",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged local.xml\n\ngit update-index --no-assume-unchanged local.xml\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("30. Usage scenario: In git, how one can record changes to a file after making changes that you'd never want committed")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29658145",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --no")]),e._v("-assume-unchanged web.config")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git stash")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#apply and commit your changes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git stash pop")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git update-index"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --assume")]),e._v("-unchanged web.config")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("31. Usage scenario: How do I use git to checkout just the files and their parent folders that have a given file extension?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-clone.html"}},[e._v("git clone")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23861934",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#clone as usual")]),e._v("\ngit clone https://github.com/username/repo.git myrepo\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#change into the myrepo directory that was just created ")]),e._v("\ncd myrepo\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#turn off tracking for everything")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#this allows us to start pruning our working directory without the index ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#being effected, leaving us only with the files that we want to work on")]),e._v("\ngit ls-files | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 git update-index --assume-unchanged\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#turn on tracking for only the files that you want, editing the grep pattern")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as needed")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#here I'm only going to track markdown files with a *.md extension")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#notice the '--no-assume-unchanged' flag")]),e._v("\ngit ls-files | grep \\\\.md | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 git update-index --no-assume-unchanged\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#delete everything in the directory that you don't want by reversing ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#the grep pattern and adding a 'rm -rf' command")]),e._v("\ngit ls-files | grep -v \\\\.md | tr "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\n'")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'\\0'")]),e._v(" | xargs -0 rm -rf\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#delete empty directories (optional)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#run the following command. you'll receive a lot of 'no such file or ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#directory' messages. run the command again until you ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#no longer receive such messages.you'll need to do this several times depending on the depth of your directory structure. perfect place for a while loop if your scripting this")]),e._v("\nfind . -type d -empty -exec rm -rf {} \\;\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#list the file paths that are left to verify everything went as expected")]),e._v("\nfind -type f | grep -v .git\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#run a git status to make sure the index doesn't show anything being deleted")]),e._v("\n    git status\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br"),t("span",{staticClass:"line-number"},[e._v("32")]),t("br")])]),t("p",[t("strong",[e._v("32. Usage scenario: Trying to amend commit and push to remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rm.html"}},[e._v("git rm")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-push.html"}},[e._v("git push")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/36110764",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <path>\n\ngit ls-files -v|grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^h'")]),e._v("\n\ngit pull origin <branch>\ngit add -A .\ngit rm --cached notes\ngit commit -m ...\ngit push origin <branch name>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("p",[t("strong",[e._v("33. Usage scenario: Apply and remove a commit frequently")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60508090",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged index.asp\n\ngit update-index --no-assume-unchanged index.asp\ngit checkout -- index.asp\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("34. Usage scenario: Make git ignore and keep local changes to some files (vs different version in remote)")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/30045655",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file>\n\ngit update-index --no-assume-unchanged <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"really-refresh"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#really-refresh"}},[e._v("#")]),e._v(" 🔹 --really-refresh")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: GIT diff and GIT status ignore changes of a file")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/29919448",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --really-refresh\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"no-skip-worktree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#no-skip-worktree"}},[e._v("#")]),e._v(" 🔹 --no-skip-worktree")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How do I configure git to ignore some files locally?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2191    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1753078",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file-list>\n\ngit update-index --skip-worktree <file-list>\n\ngit update-index --no-skip-worktree <file-list>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How can I make git ignore future revisions to a file?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 176    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39776107",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree default_values.txt\n\ngit update-index --no-skip-worktree default_values.txt\n\ngit ls-files -v . | grep ^S\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: How I can store some local changes that survives git reset --hard")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/16884309",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree -- file\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to cancel it:")]),e._v("\ngit update-index --no-skip-worktree -- file\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: How to I switch to a git branch that ignores files without deleting these files?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39090922",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree .idea\n\ngit update-index --no-skip-worktree .idea\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: How to push once and untracking?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/57591725",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree path/to/config.js\n\ngit update-index --no-skip-worktree path/to/config.js\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: Very weird tracking of a file using git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-commit.html"}},[e._v("git commit")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-add.html"}},[e._v("git add")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-status.html"}},[e._v("git status")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/17743480",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ls-files"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")])]),e._v("\nS missingFile\n\ngit update-index --no-skip-worktree missingFile\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git status")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# On branch test")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Changes not staged for commit:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   (use "git add <file>..." to update what will be committed)')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#       modified:   missingFile")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\nno changes added to commit (use "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git add"')]),e._v(" and/or "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"git commit -a"')]),e._v(")\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: How can I pull after git --skip-worktree?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63594469",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --no-skip-worktree example.txt\n\ngit stash\n\ngit pull origin\n\ngit stash pop\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or")]),e._v("\ngit stash apply\n\ngit update-index --skip-worktree example.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[t("strong",[e._v("8. Usage scenario: IntelliJ IDEA / WebStorm: how to make all files unselected by default in the commit dialog?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/43123803",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree changelog.txt\n\ngit update-index --no-skip-worktree changelog.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"skip-worktree"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#skip-worktree"}},[e._v("#")]),e._v(" 🔹 --skip-worktree")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How do I configure git to ignore some files locally?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2191    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1753078",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --assume-unchanged <file-list>\n\ngit update-index --skip-worktree <file-list>\n\ngit update-index --no-skip-worktree <file-list>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How can I make git ignore future revisions to a file?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 176    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39776107",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree default_values.txt\n\ngit update-index --no-skip-worktree default_values.txt\n\ngit ls-files -v . | grep ^S\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: Ignore changes to a tracked file")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 19    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/32257019",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ Quick Fix\ngit update-index --skip-worktree my-file\n\ngit update-index --no-skip-worktree my-file\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# merge here")]),e._v("\ngit update-index --skip-worktree my-file\n\n▲ Long Term Fix\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: ignore my changes in files but don't delete them from remote rep")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 7    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23011156",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree -- afile\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: How I can store some local changes that survives git reset --hard")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/16884309",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree -- file\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# to cancel it:")]),e._v("\ngit update-index --no-skip-worktree -- file\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: How to make a commit, or a change permanently local")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/14456667",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree -- /path/to/file\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: Temporarily hide some changed files in git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 3    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45006771",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree <file>\n\ngit update-index --no-skip-worktree <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("8. Usage scenario: git - how to hide changes for a particular file at a repo level")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/18543287",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree -- path\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("9. Usage scenario: How to I switch to a git branch that ignores files without deleting these files?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/39090922",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree .idea\n\ngit update-index --no-skip-worktree .idea\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("10. Usage scenario: git how to reserve a file both on remote and local, but don't track the modify of this file ever")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/52195695",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree <file>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("11. Usage scenario: How to push once and untracking?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/57591725",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree path/to/config.js\n\ngit update-index --no-skip-worktree path/to/config.js\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("12. Usage scenario: git checkout branch without deleting the files deleted in it")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-fetch.html"}},[e._v("git fetch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-reset.html"}},[e._v("git reset")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/23653769",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git fetch\ngit reset origin/master\ngit update-index --skip-worktree foo/*\ngit checkout --\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("13. Usage scenario: How to add files to a git repository but don't track their changes?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/49204065",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree statsabove.ejs\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("14. Usage scenario: How can I pull after git --skip-worktree?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-stash.html"}},[e._v("git stash")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-pull.html"}},[e._v("git pull")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63594469",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --no-skip-worktree example.txt\n\ngit stash\n\ngit pull origin\n\ngit stash pop\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# or")]),e._v("\ngit stash apply\n\ngit update-index --skip-worktree example.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("p",[t("strong",[e._v("15. Usage scenario: IntelliJ IDEA / WebStorm: how to make all files unselected by default in the commit dialog?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/43123803",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree changelog.txt\n\ngit update-index --no-skip-worktree changelog.txt\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("16. Usage scenario: git ignore files pushed in the remote by another person, without modifying the remote")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/61843281",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --skip-worktree <filename>...\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("17. Usage scenario: using git to selectively push certain files but then I can't checkout another branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-worktree.html"}},[e._v("git worktree")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/33274022",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git worktree add <path> [<anotherbranch>]\n\ngit update-index --skip-worktree -- path\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h2",{attrs:{id:"again"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#again"}},[e._v("#")]),e._v(" 🔹 --again")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Add only modified already staged files")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63729261",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --again\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"unresolve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unresolve"}},[e._v("#")]),e._v(" 🔹 --unresolve")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How to tell Git that Mergetool Failed?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/16108249",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git update-index --unresolve <path/to/messed/up/merge>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"stdin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stdin"}},[e._v("#")]),e._v(" 🔹 --stdin")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Git ignore locally deleted folder")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 75    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4590664",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"z"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#z"}},[e._v("#")]),e._v(" 🔹 -z")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Git ignore locally deleted folder")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 75    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/4590664",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v(" git ls-files --deleted -z | git update-index --assume-unchanged -z --stdin\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("h2",{attrs:{id:"none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[e._v("#")]),e._v(" 🔹None")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How do I get my git merge conflicts back after merging incorrectly?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 12    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-ls-files.html"}},[e._v("git ls-files")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/1689871",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("▲ First, check out if you have conflicted state in the index (before resetting to HEAD), via \n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git ls-files"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --stage")]),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" --abbrev")]),e._v(" my_file")]),e._v("\n\n100644 257cc56  1        my_file\n100644 b7d6715 2        my_file\n100644 5716ca5  3        my_file\n\n▲ If you don't get that, you would have to use git update-index, like Charles Bailey said, or use temporary files.  If you have that, then\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git checkout"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -m")]),e._v(" my_file")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);