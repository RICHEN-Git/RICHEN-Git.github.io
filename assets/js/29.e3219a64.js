(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{457:function(e,s,t){"use strict";t.r(s);var a=t(19),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("📖 "+e._s(e.$page.readingTime.text)+"    🔡 "+e._s(e.$page.readingTime.words)),t("br")])]),e._v(" "),t("h1",{attrs:{id:"git-cherry-find-commits-yet-to-be-applied-to-upstream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-find-commits-yet-to-be-applied-to-upstream"}},[e._v("#")]),e._v(" 📌 git cherry - Find commits yet to be applied to upstream")]),e._v(" "),t("h2",{attrs:{id:"v"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v"}},[e._v("#")]),e._v(" 🔹 -v")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: Git : List all unmerged changes in git")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 266    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/3602022",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git branch --no-merged master\n\ngit cherry -v master <branch>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: Git log to get commits only for a specific branch")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 222    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/24668421",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v develop mybranch\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v('3. Usage scenario: List the "different commits"')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/27623034",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v origin/master\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("4. Usage scenario: Git: How to list cherry-picked commits?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/26659476",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v branch1 master\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("5. Usage scenario: How do I merge from another git branch, excepting some commits, and have sane/easily queried history?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 5    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-cherry-pick.html"}},[e._v("git cherry-pick")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/10834929",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v master foo\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git cherry"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")]),e._v(" master foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+ 1cffcfb1d061d308e8d33c262e30282a26b195cb Added anotherFile.txt to foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+ fe0599190a6953c970cd3f94e18ff0c282e89e2c Added foochange.txt to foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+ 1b548eb45ff50e59f3522ee63edd0c177e842645 Added yetAnotherFile.txt to foo")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git cherry-pick 1cffcfb1d061d308e8d33c262e30282a26b195cb")]),e._v("\n...\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git cherry-pick 1b548eb45ff50e59f3522ee63edd0c177e842645")]),e._v("\n...\n\n"),t("span",{pre:!0,attrs:{class:"token command"}},[e._v("$ git cherry"),t("span",{pre:!0,attrs:{class:"token parameter"}},[e._v(" -v")]),e._v(" master foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("- 1cffcfb1d061d308e8d33c262e30282a26b195cb Added anotherFile.txt to foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+ fe0599190a6953c970cd3f94e18ff0c282e89e2c Added foochange.txt to foo")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("- 1b548eb45ff50e59f3522ee63edd0c177e842645 Added yetAnotherFile.txt to foo")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("p",[t("strong",[e._v("6. Usage scenario: Any way to safely delete a feature branch after rebasing it onto another?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 4    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45970671",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("branch-cleanup = "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"!f(){ for b in $(git for-each-ref refs/heads --format=\\"%(refname:short)\\"); do if [[ ! $(git cherry -v upstream/master $b | grep \\"^+\\") ]]; then git branch -D $b; fi; done };f"')]),e._v("\n\nfor b in $(git for-each-ref refs/heads --format="),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"%(refname:short)"')]),e._v("); do  # Go through each branch\n  # git cherry prefixes each commit with "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"+"')]),e._v(" if it's not included and "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-"')]),e._v(" if it is, so check if there are no "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"+"')]),e._v(" lines:\n  if [[ ! $(git cherry upstream/master $b | grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"^+"')]),e._v(") ]]; then\n    git branch -D $b\n  fi\ndone\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("p",[t("strong",[e._v("7. Usage scenario: git cherry: How to identify equivalent commit by commit message")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45396583",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/bash")]),e._v("\ngit cherry -v stable dev | grep + | cut -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v(" -f 3- > /tmp/unmerged\nxargs -a /tmp/unmerged  -I{} git --no-pager log stable --pretty=oneline --grep {} | cut -d "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("' '")]),e._v(" -f 2- > /tmp/cherry-picked\ndiff /tmp/unmerged /tmp/cherry-picked\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("p",[t("strong",[e._v("8. Usage scenario: Git - Log commits of dev except which are cherry-picked into main")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 2    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/45605041",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v main dev\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[t("strong",[e._v("9. Usage scenario: Clean up local branches when Pull Request closed and remote @{push} branch deleted")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-remote.html"}},[e._v("git remote")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-for-each-ref.html"}},[e._v("git for-each-ref")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-branch.html"}},[e._v("git branch")]),e._v(", "),t("RouterLink",{attrs:{to:"/richen/git-rev-parse.html"}},[e._v("git rev-parse")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/59416954",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#!/bin/bash")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# `git branch-prune`: delete local branches whose commits have already been merged.")]),e._v("\n\nbranches_to_prune=()\n\nwhile read -r branch up_branch; do\n  # If no remote-tracking branch with the same name in any remote,\n  if [[ -z $(for remote in $(git remote); do git rev-parse --verify --quiet "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$remote/$branch"')]),e._v(" ; done) ]] &&\n    # and upstream branch exists,\n    [[ -n "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$up_branch"')]),e._v(" ]] &&\n    # and upstream branch contains all the commits in fork branch.\n    ! git cherry -v "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$up_branch"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$branch"')]),e._v(" | grep -q "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^+'")]),e._v("; then\n    # then we should delete the branch.\n    branches_to_prune+=("),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"$branch"')]),e._v(")\n  fi\ndone <<<"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("\"$(git for-each-ref refs/heads --format='%(refname:short) %(upstream:short)')\"")]),e._v("\n\nif [[ ${#branches_to_prune[@]} = 0 ]]; then\n  echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Nothing to prune."')]),e._v("\n  exit 0\nfi\n\necho "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Branches to delete: ${branches_to_prune[*]}"')]),e._v("\nread -rp "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Continue? [Y/n] "')]),e._v(" choice\n\ncase $choice in\n  N|n|no|No|NO) echo "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Exiting..."')]),e._v("; exit 1 ;;\nesac\n\ngit branch -D "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"${branches_to_prune[@]}"')]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br")])]),t("p",[t("strong",[e._v("10. Usage scenario: How can I get the "),t("em",[e._v("other")]),e._v(' commit-id when running "git cherry"?')])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/63890627",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry -v test HEAD\n"),t("span",{pre:!0,attrs:{class:"token inserted"}},[e._v("+ 8cc1e2105f387eeede67a87688b6bfae0cab42c6 - m")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("- 8ce948ca1b54d551581f4574bda2c215cc96a351 1c156417bff133e25664fe7047b5df6a81fbd2f7 a")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("- 1e73b75de891eab9314856558624e9b4c21bbb1f f207a10a5249f9e0fe74184f8b03c75bbf7488c5 b")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token deleted"}},[e._v("- 04876f4e615b2bb70b969e99de15ec78b1ea84f6 4b8bc3eab7c625f298ca3bd031ba141b66240da4 c")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h2",{attrs:{id:"none"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#none"}},[e._v("#")]),e._v(" 🔹None")]),e._v(" "),t("p",[t("strong",[e._v("1. Usage scenario: How to see which commits in one branch aren't in the other?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 225    🔗Associated commands: [ "),t("RouterLink",{attrs:{to:"/richen/git-checkout.html"}},[e._v("git checkout")]),e._v(" ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/7566523",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)],1)],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git checkout devel\ngit cherry next\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[t("strong",[e._v("2. Usage scenario: How to maintain long running git branches")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 17    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/7754301",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# commits from "stable" that are not present in')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# the current branch will be prefixed with "+"')]),e._v("\ngit cherry HEAD stable\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[t("strong",[e._v("3. Usage scenario: How can I filter "),t("code",[e._v("git cherry")]),e._v(" output?")])]),e._v(" "),t("blockquote",[t("p",[t("font",{attrs:{size:"2"}},[e._v("💯Score: 1    🔗Associated commands: [ None ]    🌐"),t("a",{attrs:{href:"https://stackoverflow.com/questions/60303983",target:"_blank",rel:"noopener noreferrer"}},[e._v("Details"),t("OutboundLink")],1)])],1)]),e._v(" "),t("p",[t("strong",[e._v("Example:")])]),e._v(" "),t("div",{staticClass:"language-git line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-git"}},[t("code",[e._v("git cherry main dev | grep "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'^+'")]),e._v("\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);